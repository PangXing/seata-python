# Generated from MySqlParser.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u044b")
        buf.write("\u19ac\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\3\2\5\2\u0284\n\2\3\2\5\2\u0287\n\2\3\2\3\2\3")
        buf.write("\3\3\3\5\3\u028d\n\3\3\3\5\3\u0290\n\3\3\3\7\3\u0293\n")
        buf.write("\3\f\3\16\3\u0296\13\3\3\3\3\3\5\3\u029a\n\3\3\3\5\3\u029d")
        buf.write("\n\3\3\3\5\3\u02a0\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4")
        buf.write("\u02a9\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u02d0\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u02dc\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02e7")
        buf.write("\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\5\t\u02f8\n\t\3\n\3\n\3\n\5\n\u02fd\n\n\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0309")
        buf.write("\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5")
        buf.write("\f\u0324\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u032d\n\r")
        buf.write("\3\16\3\16\3\16\5\16\u0332\n\16\3\16\3\16\7\16\u0336\n")
        buf.write("\16\f\16\16\16\u0339\13\16\3\17\3\17\5\17\u033d\n\17\3")
        buf.write("\17\3\17\5\17\u0341\n\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\5\17\u034a\n\17\3\17\5\17\u034d\n\17\3\17\5\17\u0350")
        buf.write("\n\17\3\17\3\17\5\17\u0354\n\17\3\17\3\17\3\17\3\20\3")
        buf.write("\20\5\20\u035b\n\20\3\20\5\20\u035e\n\20\3\20\3\20\3\20")
        buf.write("\5\20\u0363\n\20\3\20\3\20\3\20\3\20\7\20\u0369\n\20\f")
        buf.write("\20\16\20\u036c\13\20\3\20\3\20\5\20\u0370\n\20\3\20\3")
        buf.write("\20\3\20\5\20\u0375\n\20\3\20\7\20\u0378\n\20\f\20\16")
        buf.write("\20\u037b\13\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u0386\n\21\3\21\5\21\u0389\n\21\3\21\3\21\5")
        buf.write("\21\u038d\n\21\3\21\5\21\u0390\n\21\3\21\3\21\5\21\u0394")
        buf.write("\n\21\3\21\5\21\u0397\n\21\3\21\3\21\5\21\u039b\n\21\3")
        buf.write("\21\5\21\u039e\n\21\3\21\5\21\u03a1\n\21\3\21\3\21\5\21")
        buf.write("\u03a5\n\21\3\21\5\21\u03a8\n\21\3\21\3\21\5\21\u03ac")
        buf.write("\n\21\3\21\3\21\3\22\3\22\5\22\u03b2\n\22\3\22\3\22\3")
        buf.write("\22\3\22\5\22\u03b8\n\22\3\22\3\22\7\22\u03bc\n\22\f\22")
        buf.write("\16\22\u03bf\13\22\3\22\3\22\7\22\u03c3\n\22\f\22\16\22")
        buf.write("\u03c6\13\22\3\22\3\22\3\23\3\23\5\23\u03cc\n\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u03d2\n\23\3\23\3\23\7\23\u03d6\n")
        buf.write("\23\f\23\16\23\u03d9\13\23\3\23\3\23\3\23\3\23\7\23\u03df")
        buf.write("\n\23\f\23\16\23\u03e2\13\23\3\23\3\23\5\23\u03e6\n\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\7\24\u03f4\n\24\f\24\16\24\u03f7\13\24\3\24\3\24")
        buf.write("\3\25\3\25\5\25\u03fd\n\25\3\25\3\25\5\25\u0401\n\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u040b\n\25")
        buf.write("\3\25\3\25\5\25\u040f\n\25\3\25\3\25\5\25\u0413\n\25\3")
        buf.write("\25\3\25\5\25\u0417\n\25\3\25\3\25\5\25\u041b\n\25\3\25")
        buf.write("\7\25\u041e\n\25\f\25\16\25\u0421\13\25\5\25\u0423\n\25")
        buf.write("\3\25\5\25\u0426\n\25\3\25\5\25\u0429\n\25\3\25\5\25\u042c")
        buf.write("\n\25\3\25\3\25\3\25\3\25\5\25\u0432\n\25\3\25\3\25\5")
        buf.write("\25\u0436\n\25\3\25\3\25\3\25\3\25\5\25\u043c\n\25\3\25")
        buf.write("\7\25\u043f\n\25\f\25\16\25\u0442\13\25\5\25\u0444\n\25")
        buf.write("\3\25\5\25\u0447\n\25\5\25\u0449\n\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\5\26\u0454\n\26\3\26\3\26")
        buf.write("\5\26\u0458\n\26\3\26\5\26\u045b\n\26\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0469")
        buf.write("\n\27\3\27\5\27\u046c\n\27\3\27\3\27\5\27\u0470\n\27\3")
        buf.write("\27\5\27\u0473\n\27\3\27\3\27\5\27\u0477\n\27\3\27\5\27")
        buf.write("\u047a\n\27\3\27\3\27\5\27\u047e\n\27\3\27\5\27\u0481")
        buf.write("\n\27\3\27\3\27\5\27\u0485\n\27\3\27\5\27\u0488\n\27\3")
        buf.write("\27\5\27\u048b\n\27\3\27\3\27\5\27\u048f\n\27\3\27\5\27")
        buf.write("\u0492\n\27\3\27\3\27\5\27\u0496\n\27\3\27\3\27\3\30\3")
        buf.write("\30\5\30\u049c\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u04a9\n\30\3\30\3\30\3\31\3")
        buf.write("\31\3\31\5\31\u04b0\n\31\3\31\3\31\3\31\5\31\u04b5\n\31")
        buf.write("\3\31\5\31\u04b8\n\31\3\31\3\31\3\31\5\31\u04bd\n\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\5\31\u04c5\n\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u04cb\n\31\3\31\3\31\5\31\u04cf\n\31\3")
        buf.write("\32\5\32\u04d2\n\32\3\32\3\32\3\32\5\32\u04d7\n\32\3\32")
        buf.write("\5\32\u04da\n\32\3\32\3\32\5\32\u04de\n\32\3\32\5\32\u04e1")
        buf.write("\n\32\3\32\3\32\5\32\u04e5\n\32\3\32\5\32\u04e8\n\32\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\5\33\u04f0\n\33\5\33\u04f2")
        buf.write("\n\33\3\34\3\34\3\34\7\34\u04f7\n\34\f\34\16\34\u04fa")
        buf.write("\13\34\3\34\3\34\3\34\5\34\u04ff\n\34\3\34\3\34\3\34\3")
        buf.write("\34\7\34\u0505\n\34\f\34\16\34\u0508\13\34\5\34\u050a")
        buf.write("\n\34\3\34\3\34\3\34\7\34\u050f\n\34\f\34\16\34\u0512")
        buf.write("\13\34\5\34\u0514\n\34\5\34\u0516\n\34\3\35\3\35\3\35")
        buf.write("\3\35\5\35\u051c\n\35\3\36\3\36\3\36\3\36\5\36\u0522\n")
        buf.write("\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\5\37\u0533\n\37\3 \3 \3 \3 ")
        buf.write("\3 \5 \u053a\n \3!\3!\3!\3\"\3\"\5\"\u0541\n\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u054c\n\"\3#\5#\u054f")
        buf.write("\n#\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\3%\5%\u055c\n%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0569\n%\3%\3%\3%\5%\u056e")
        buf.write("\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u057e")
        buf.write("\n&\3\'\3\'\3\'\3\'\7\'\u0584\n\'\f\'\16\'\u0587\13\'")
        buf.write("\3\'\3\'\3(\3(\3(\3(\3(\5(\u0590\n(\3)\3)\7)\u0594\n)")
        buf.write("\f)\16)\u0597\13)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u05a2")
        buf.write("\n*\3*\5*\u05a5\n*\3*\3*\3*\5*\u05aa\n*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\5*\u05b7\n*\3*\3*\3*\3*\3*\5*\u05be")
        buf.write("\n*\3*\3*\3*\3*\3*\5*\u05c5\n*\5*\u05c7\n*\3*\3*\3*\3")
        buf.write("*\3*\5*\u05ce\n*\3+\3+\5+\u05d2\n+\5+\u05d4\n+\3+\3+\3")
        buf.write("+\5+\u05d9\n+\3+\5+\u05dc\n+\3+\3+\7+\u05e0\n+\f+\16+")
        buf.write("\u05e3\13+\3+\3+\5+\u05e7\n+\5+\u05e9\n+\3+\3+\5+\u05ed")
        buf.write("\n+\3+\5+\u05f0\n+\3+\5+\u05f3\n+\3+\3+\7+\u05f7\n+\f")
        buf.write("+\16+\u05fa\13+\3+\3+\5+\u05fe\n+\5+\u0600\n+\3+\3+\3")
        buf.write("+\5+\u0605\n+\3+\3+\3+\3+\3+\5+\u060c\n+\5+\u060e\n+\3")
        buf.write("+\3+\3+\3+\3+\5+\u0615\n+\3,\3,\3,\5,\u061a\n,\3,\3,\5")
        buf.write(",\u061e\n,\3,\5,\u0621\n,\3-\3-\3-\3-\3-\3-\5-\u0629\n")
        buf.write("-\3-\3-\3-\3-\3-\3-\5-\u0631\n-\5-\u0633\n-\3.\3.\3.\3")
        buf.write(".\3.\3.\5.\u063b\n.\3/\3/\5/\u063f\n/\3/\5/\u0642\n/\3")
        buf.write("/\3/\7/\u0646\n/\f/\16/\u0649\13/\3/\3/\5/\u064d\n/\3")
        buf.write("/\5/\u0650\n/\3/\3/\7/\u0654\n/\f/\16/\u0657\13/\5/\u0659")
        buf.write("\n/\3\60\3\60\5\60\u065d\n\60\3\60\5\60\u0660\n\60\3\60")
        buf.write("\3\60\5\60\u0664\n\60\3\60\3\60\3\60\5\60\u0669\n\60\3")
        buf.write("\60\3\60\5\60\u066d\n\60\3\60\3\60\3\60\5\60\u0672\n\60")
        buf.write("\3\60\5\60\u0675\n\60\3\60\3\60\5\60\u0679\n\60\3\60\3")
        buf.write("\60\5\60\u067d\n\60\3\60\3\60\5\60\u0681\n\60\3\60\3\60")
        buf.write("\5\60\u0685\n\60\3\60\3\60\3\60\5\60\u068a\n\60\3\60\3")
        buf.write("\60\3\60\5\60\u068f\n\60\3\60\3\60\3\60\5\60\u0694\n\60")
        buf.write("\3\60\3\60\3\60\3\60\5\60\u069a\n\60\3\60\3\60\3\60\5")
        buf.write("\60\u069f\n\60\3\60\3\60\3\60\5\60\u06a4\n\60\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u06aa\n\60\3\60\3\60\3\60\5\60\u06af\n")
        buf.write("\60\3\60\3\60\3\60\5\60\u06b4\n\60\3\60\3\60\3\60\5\60")
        buf.write("\u06b9\n\60\3\60\3\60\3\60\5\60\u06be\n\60\3\60\3\60\3")
        buf.write("\60\5\60\u06c3\n\60\3\60\3\60\3\60\5\60\u06c8\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u06cd\n\60\3\60\3\60\3\60\5\60\u06d2\n")
        buf.write("\60\3\60\3\60\3\60\5\60\u06d7\n\60\3\60\3\60\3\60\5\60")
        buf.write("\u06dc\n\60\3\60\3\60\3\60\3\60\5\60\u06e2\n\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\5\60\u06ea\n\60\3\60\3\60\3\60")
        buf.write("\3\60\5\60\u06f0\n\60\3\61\3\61\3\62\3\62\3\62\3\63\3")
        buf.write("\63\3\63\3\63\3\63\5\63\u06fc\n\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u0703\n\63\5\63\u0705\n\63\3\63\3\63\3\63\3")
        buf.write("\63\7\63\u070b\n\63\f\63\16\63\u070e\13\63\3\63\3\63\5")
        buf.write("\63\u0712\n\63\3\64\5\64\u0715\n\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\5\64\u071d\n\64\3\64\3\64\3\64\3\64\5\64\u0723")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\5\64\u0733\n\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u073f\n\64\5\64")
        buf.write("\u0741\n\64\3\65\5\65\u0744\n\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\3\65\5\65\u074c\n\65\3\65\3\65\3\65\3\65\5\65\u0752")
        buf.write("\n\65\3\65\3\65\3\65\3\65\5\65\u0758\n\65\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0763\n\66\f\66")
        buf.write("\16\66\u0766\13\66\3\66\3\66\7\66\u076a\n\66\f\66\16\66")
        buf.write("\u076d\13\66\3\66\3\66\3\66\3\66\7\66\u0773\n\66\f\66")
        buf.write("\16\66\u0776\13\66\3\66\3\66\5\66\u077a\n\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\7\66\u0783\n\66\f\66\16\66\u0786")
        buf.write("\13\66\3\66\3\66\3\66\3\66\7\66\u078c\n\66\f\66\16\66")
        buf.write("\u078f\13\66\3\66\3\66\5\66\u0793\n\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\7\66\u079d\n\66\f\66\16\66\u07a0")
        buf.write("\13\66\3\66\3\66\7\66\u07a4\n\66\f\66\16\66\u07a7\13\66")
        buf.write("\3\66\3\66\3\66\3\66\7\66\u07ad\n\66\f\66\16\66\u07b0")
        buf.write("\13\66\3\66\3\66\5\66\u07b4\n\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\7\66\u07be\n\66\f\66\16\66\u07c1\13")
        buf.write("\66\3\66\3\66\7\66\u07c5\n\66\f\66\16\66\u07c8\13\66\3")
        buf.write("\66\3\66\3\66\3\66\7\66\u07ce\n\66\f\66\16\66\u07d1\13")
        buf.write("\66\3\66\3\66\5\66\u07d5\n\66\3\66\3\66\3\66\7\66\u07da")
        buf.write("\n\66\f\66\16\66\u07dd\13\66\3\66\3\66\3\66\3\66\7\66")
        buf.write("\u07e3\n\66\f\66\16\66\u07e6\13\66\3\66\3\66\5\66\u07ea")
        buf.write("\n\66\5\66\u07ec\n\66\3\67\3\67\3\67\5\67\u07f1\n\67\3")
        buf.write("8\38\38\38\68\u07f7\n8\r8\168\u07f8\38\38\39\39\39\79")
        buf.write("\u0800\n9\f9\169\u0803\139\3:\5:\u0806\n:\3:\5:\u0809")
        buf.write("\n:\3:\3:\5:\u080d\n:\3:\3:\3:\5:\u0812\n:\3:\3:\3:\3")
        buf.write(":\5:\u0818\n:\3:\3:\3:\3:\5:\u081e\n:\3:\3:\3:\5:\u0823")
        buf.write("\n:\3:\3:\3:\5:\u0828\n:\3:\3:\3:\5:\u082d\n:\3:\3:\3")
        buf.write(":\5:\u0832\n:\3:\5:\u0835\n:\3;\3;\3;\5;\u083a\n;\3;\6")
        buf.write(";\u083d\n;\r;\16;\u083e\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0849")
        buf.write("\n;\3<\3<\5<\u084d\n<\3<\3<\3<\3<\3<\5<\u0854\n<\3<\3")
        buf.write("<\3<\5<\u0859\n<\3<\5<\u085c\n<\3<\3<\3<\5<\u0861\n<\3")
        buf.write("<\5<\u0864\n<\3<\3<\5<\u0868\n<\3<\3<\5<\u086c\n<\3=\3")
        buf.write("=\3=\3=\7=\u0872\n=\f=\16=\u0875\13=\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0887\n?\3?\5?\u088a")
        buf.write("\n?\3?\5?\u088d\n?\3?\3?\5?\u0891\n?\3?\3?\3@\3@\3@\3")
        buf.write("@\7@\u0899\n@\f@\16@\u089c\13@\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\7A\u08a6\nA\fA\16A\u08a9\13A\3A\3A\3B\3B\5B\u08af\n")
        buf.write("B\3B\5B\u08b2\nB\3B\3B\3B\3B\3B\7B\u08b9\nB\fB\16B\u08bc")
        buf.write("\13B\5B\u08be\nB\3B\5B\u08c1\nB\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\5C\u08cc\nC\3C\5C\u08cf\nC\3C\3C\5C\u08d3\nC\3C\3")
        buf.write("C\3D\3D\3D\3D\5D\u08db\nD\3D\5D\u08de\nD\3D\3D\3D\5D\u08e3")
        buf.write("\nD\3D\3D\3D\3D\3D\3D\5D\u08eb\nD\3D\3D\3D\3D\5D\u08f1")
        buf.write("\nD\3D\3D\5D\u08f5\nD\3E\3E\5E\u08f9\nE\3E\7E\u08fc\n")
        buf.write("E\fE\16E\u08ff\13E\3E\3E\5E\u0903\nE\3E\3E\3E\3E\3E\5")
        buf.write("E\u090a\nE\3E\3E\5E\u090e\nE\3E\3E\3E\3E\3E\3E\3E\7E\u0917")
        buf.write("\nE\fE\16E\u091a\13E\3E\3E\3E\3E\3E\5E\u0921\nE\3E\5E")
        buf.write("\u0924\nE\3E\3E\7E\u0928\nE\fE\16E\u092b\13E\3E\3E\3E")
        buf.write("\5E\u0930\nE\5E\u0932\nE\3E\3E\3E\5E\u0937\nE\3E\5E\u093a")
        buf.write("\nE\3E\3E\7E\u093e\nE\fE\16E\u0941\13E\3E\3E\3E\5E\u0946")
        buf.write("\nE\5E\u0948\nE\3E\3E\5E\u094c\nE\3E\5E\u094f\nE\3E\5")
        buf.write("E\u0952\nE\3E\3E\7E\u0956\nE\fE\16E\u0959\13E\3E\3E\3")
        buf.write("E\5E\u095e\nE\3E\5E\u0961\nE\3E\3E\7E\u0965\nE\fE\16E")
        buf.write("\u0968\13E\3E\3E\3E\5E\u096d\nE\5E\u096f\nE\3E\3E\3E\5")
        buf.write("E\u0974\nE\3E\3E\3E\3E\3E\3E\5E\u097c\nE\5E\u097e\nE\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\5E\u0987\nE\3E\3E\3E\5E\u098c\nE\3")
        buf.write("E\3E\3E\3E\3E\3E\5E\u0994\nE\3E\3E\5E\u0998\nE\3E\3E\3")
        buf.write("E\3E\3E\3E\5E\u09a0\nE\3E\3E\3E\3E\3E\3E\3E\3E\5E\u09aa")
        buf.write("\nE\3E\3E\3E\5E\u09af\nE\3E\3E\3E\3E\3E\5E\u09b6\nE\3")
        buf.write("E\3E\5E\u09ba\nE\3E\3E\5E\u09be\nE\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\5E\u09de\nE\3E\3E\5E\u09e2\nE\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\5E\u09ee\nE\3E\5E\u09f1\nE\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\5E\u09fa\nE\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\7E\u0a09\nE\fE\16E\u0a0c\13E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\5E\u0a17\nE\3E\3E\3E\3E\3E\5E\u0a1e\n")
        buf.write("E\3E\3E\3E\3E\3E\5E\u0a25\nE\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\7E\u0a32\nE\fE\16E\u0a35\13E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\5E\u0a41\nE\3E\3E\3E\3E\5E\u0a47\nE\3E\3")
        buf.write("E\3E\3E\5E\u0a4d\nE\3E\3E\3E\3E\5E\u0a53\nE\3E\3E\3E\3")
        buf.write("E\5E\u0a59\nE\3E\3E\3E\3E\5E\u0a5f\nE\3E\3E\3E\3E\5E\u0a65")
        buf.write("\nE\3F\3F\3F\5F\u0a6a\nF\3F\3F\3G\3G\3G\5G\u0a71\nG\3")
        buf.write("G\3G\3H\3H\3H\5H\u0a78\nH\3H\3H\3H\3H\3H\5H\u0a7f\nH\3")
        buf.write("H\3H\3H\5H\u0a84\nH\3H\7H\u0a87\nH\fH\16H\u0a8a\13H\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3J\3J\3J\5J\u0a97\nJ\3J\3J\3K\3")
        buf.write("K\3K\5K\u0a9e\nK\3K\3K\3L\3L\3L\5L\u0aa5\nL\3L\3L\3M\3")
        buf.write("M\5M\u0aab\nM\3M\3M\5M\u0aaf\nM\3M\3M\5M\u0ab3\nM\3N\3")
        buf.write("N\3N\3N\3N\5N\u0aba\nN\3N\5N\u0abd\nN\3O\3O\3O\5O\u0ac2")
        buf.write("\nO\3O\3O\3P\3P\3P\5P\u0ac9\nP\3P\3P\3P\7P\u0ace\nP\f")
        buf.write("P\16P\u0ad1\13P\3P\5P\u0ad4\nP\3Q\3Q\3Q\3Q\3Q\7Q\u0adb")
        buf.write("\nQ\fQ\16Q\u0ade\13Q\3R\3R\3R\3R\3S\3S\5S\u0ae6\nS\3S")
        buf.write("\3S\3T\3T\3T\3T\3T\5T\u0aef\nT\3T\5T\u0af2\nT\3U\3U\5")
        buf.write("U\u0af6\nU\3V\3V\3V\3W\3W\3W\3W\5W\u0aff\nW\3X\3X\5X\u0b03")
        buf.write("\nX\3X\5X\u0b06\nX\3X\5X\u0b09\nX\3X\3X\3X\3X\5X\u0b0f")
        buf.write("\nX\3X\5X\u0b12\nX\3X\3X\3X\3X\5X\u0b18\nX\3X\3X\3X\3")
        buf.write("X\3X\7X\u0b1f\nX\fX\16X\u0b22\13X\5X\u0b24\nX\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\7X\u0b2d\nX\fX\16X\u0b30\13X\5X\u0b32\n")
        buf.write("X\3Y\3Y\3Y\5Y\u0b37\nY\3Y\5Y\u0b3a\nY\3Y\3Y\3Y\5Y\u0b3f")
        buf.write("\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b49\nY\3Y\3Y\3Y\5Y\u0b4e")
        buf.write("\nY\3Y\3Y\6Y\u0b52\nY\rY\16Y\u0b53\5Y\u0b56\nY\3Y\3Y\6")
        buf.write("Y\u0b5a\nY\rY\16Y\u0b5b\5Y\u0b5e\nY\3Y\3Y\3Y\3Y\5Y\u0b64")
        buf.write("\nY\3Y\3Y\3Y\3Y\7Y\u0b6a\nY\fY\16Y\u0b6d\13Y\3Y\3Y\5Y")
        buf.write("\u0b71\nY\3Y\3Y\3Y\3Y\7Y\u0b77\nY\fY\16Y\u0b7a\13Y\5Y")
        buf.write("\u0b7c\nY\3Z\3Z\3Z\5Z\u0b81\nZ\3Z\5Z\u0b84\nZ\3Z\3Z\3")
        buf.write("Z\5Z\u0b89\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b91\nZ\3Z\3Z\3Z\3")
        buf.write("Z\3Z\3Z\5Z\u0b99\nZ\3Z\3Z\3Z\3Z\5Z\u0b9f\nZ\3Z\3Z\3Z\3")
        buf.write("Z\7Z\u0ba5\nZ\fZ\16Z\u0ba8\13Z\3Z\3Z\5Z\u0bac\nZ\3Z\3")
        buf.write("Z\3Z\3Z\7Z\u0bb2\nZ\fZ\16Z\u0bb5\13Z\5Z\u0bb7\nZ\3[\3")
        buf.write("[\5[\u0bbb\n[\3[\5[\u0bbe\n[\3[\3[\3[\3[\3[\3[\5[\u0bc6")
        buf.write("\n[\3[\3[\3[\3[\5[\u0bcc\n[\3[\3[\3[\3[\3[\7[\u0bd3\n")
        buf.write("[\f[\16[\u0bd6\13[\5[\u0bd8\n[\3\\\3\\\5\\\u0bdc\n\\\3")
        buf.write("\\\3\\\5\\\u0be0\n\\\3\\\3\\\6\\\u0be4\n\\\r\\\16\\\u0be5")
        buf.write("\3\\\3\\\5\\\u0bea\n\\\3\\\3\\\5\\\u0bee\n\\\5\\\u0bf0")
        buf.write("\n\\\3\\\5\\\u0bf3\n\\\3\\\5\\\u0bf6\n\\\3\\\5\\\u0bf9")
        buf.write("\n\\\3\\\3\\\6\\\u0bfd\n\\\r\\\16\\\u0bfe\3\\\3\\\5\\")
        buf.write("\u0c03\n\\\3\\\5\\\u0c06\n\\\3\\\5\\\u0c09\n\\\3\\\5\\")
        buf.write("\u0c0c\n\\\3\\\5\\\u0c0f\n\\\5\\\u0c11\n\\\3]\3]\5]\u0c15")
        buf.write("\n]\3^\3^\3^\3^\5^\u0c1b\n^\3^\3^\3^\3^\5^\u0c21\n^\3")
        buf.write("^\7^\u0c24\n^\f^\16^\u0c27\13^\5^\u0c29\n^\3_\3_\3_\3")
        buf.write("_\5_\u0c2f\n_\3`\3`\5`\u0c33\n`\3a\3a\3a\3a\3a\3a\5a\u0c3b")
        buf.write("\na\3b\3b\5b\u0c3f\nb\3b\5b\u0c42\nb\3b\5b\u0c45\nb\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\5b\u0c4e\nb\3b\3b\5b\u0c52\nb\3b\5")
        buf.write("b\u0c55\nb\3b\3b\5b\u0c59\nb\3c\3c\5c\u0c5d\nc\3c\5c\u0c60")
        buf.write("\nc\3c\5c\u0c63\nc\3c\3c\3c\5c\u0c68\nc\3c\3c\3c\3c\5")
        buf.write("c\u0c6e\nc\7c\u0c70\nc\fc\16c\u0c73\13c\3c\3c\3c\3c\3")
        buf.write("c\3c\3c\5c\u0c7c\nc\3c\3c\3c\3c\5c\u0c82\nc\7c\u0c84\n")
        buf.write("c\fc\16c\u0c87\13c\3c\3c\3c\5c\u0c8c\nc\3c\3c\5c\u0c90")
        buf.write("\nc\3d\3d\3d\3d\5d\u0c96\nd\3d\5d\u0c99\nd\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\5e\u0ca5\ne\3e\3e\5e\u0ca9\ne\3e\3")
        buf.write("e\5e\u0cad\ne\3f\3f\3f\3f\3f\3f\5f\u0cb5\nf\3f\3f\5f\u0cb9")
        buf.write("\nf\3g\3g\3g\3g\3h\3h\5h\u0cc1\nh\3h\5h\u0cc4\nh\3h\3")
        buf.write("h\5h\u0cc8\nh\3h\5h\u0ccb\nh\3h\3h\3h\3h\7h\u0cd1\nh\f")
        buf.write("h\16h\u0cd4\13h\3h\3h\5h\u0cd8\nh\3h\5h\u0cdb\nh\3h\5")
        buf.write("h\u0cde\nh\3i\3i\5i\u0ce2\ni\3i\5i\u0ce5\ni\3i\3i\3i\3")
        buf.write("i\3i\7i\u0cec\ni\fi\16i\u0cef\13i\3i\3i\5i\u0cf3\ni\3")
        buf.write("j\3j\3j\3j\3j\7j\u0cfa\nj\fj\16j\u0cfd\13j\3k\3k\5k\u0d01")
        buf.write("\nk\3l\3l\3l\7l\u0d06\nl\fl\16l\u0d09\13l\3m\3m\7m\u0d0d")
        buf.write("\nm\fm\16m\u0d10\13m\3m\3m\3m\7m\u0d15\nm\fm\16m\u0d18")
        buf.write("\13m\3m\3m\5m\u0d1c\nm\3n\3n\3n\3n\3n\3n\5n\u0d24\nn\3")
        buf.write("n\5n\u0d27\nn\3n\5n\u0d2a\nn\3n\3n\3n\7n\u0d2f\nn\fn\16")
        buf.write("n\u0d32\13n\5n\u0d34\nn\3n\3n\3n\3n\3n\5n\u0d3b\nn\3n")
        buf.write("\5n\u0d3e\nn\3n\3n\3n\3n\3n\3n\5n\u0d46\nn\3o\3o\3o\3")
        buf.write("o\5o\u0d4c\no\3o\3o\3o\3o\3p\3p\3p\3p\3p\5p\u0d57\np\3")
        buf.write("q\5q\u0d5a\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0d65\nq\3")
        buf.write("q\3q\3q\3q\5q\u0d6b\nq\3q\3q\5q\u0d6f\nq\3q\3q\3q\3q\3")
        buf.write("q\3q\3q\3q\3q\5q\u0d7a\nq\3q\3q\3q\5q\u0d7f\nq\5q\u0d81")
        buf.write("\nq\3q\3q\5q\u0d85\nq\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0d8f")
        buf.write("\nr\3s\3s\3s\3s\3s\3s\3s\3s\5s\u0d99\ns\3t\3t\7t\u0d9d")
        buf.write("\nt\ft\16t\u0da0\13t\3t\3t\5t\u0da4\nt\3t\5t\u0da7\nt")
        buf.write("\3t\5t\u0daa\nt\3t\5t\u0dad\nt\3t\5t\u0db0\nt\3t\5t\u0db3")
        buf.write("\nt\3t\3t\7t\u0db7\nt\ft\16t\u0dba\13t\3t\3t\5t\u0dbe")
        buf.write("\nt\3t\5t\u0dc1\nt\3t\5t\u0dc4\nt\3t\5t\u0dc7\nt\3t\5")
        buf.write("t\u0dca\nt\3t\5t\u0dcd\nt\5t\u0dcf\nt\3u\3u\7u\u0dd3\n")
        buf.write("u\fu\16u\u0dd6\13u\3u\3u\5u\u0dda\nu\3u\5u\u0ddd\nu\3")
        buf.write("u\5u\u0de0\nu\3u\5u\u0de3\nu\3u\5u\u0de6\nu\3v\3v\5v\u0dea")
        buf.write("\nv\3v\3v\3w\3w\5w\u0df0\nw\3w\3w\5w\u0df4\nw\3x\3x\3")
        buf.write("x\3x\3x\3x\3x\3x\5x\u0dfe\nx\3y\3y\5y\u0e02\ny\3y\3y\7")
        buf.write("y\u0e06\ny\fy\16y\u0e09\13y\3z\3z\3z\3z\3z\3z\5z\u0e11")
        buf.write("\nz\3z\5z\u0e14\nz\3z\3z\5z\u0e18\nz\3z\5z\u0e1b\nz\3")
        buf.write("z\3z\5z\u0e1f\nz\3z\3z\5z\u0e23\nz\3z\5z\u0e26\nz\5z\u0e28")
        buf.write("\nz\3{\3{\3{\3{\7{\u0e2e\n{\f{\16{\u0e31\13{\3{\3{\3{")
        buf.write("\3{\3{\3{\3{\3{\3{\5{\u0e3c\n{\3{\3{\6{\u0e40\n{\r{\16")
        buf.write("{\u0e41\5{\u0e44\n{\3{\3{\6{\u0e48\n{\r{\16{\u0e49\5{")
        buf.write("\u0e4c\n{\5{\u0e4e\n{\3|\3|\3|\3|\5|\u0e54\n|\3|\3|\3")
        buf.write("|\3|\3|\3|\5|\u0e5c\n|\3}\3}\3}\3}\3}\3}\5}\u0e64\n}\3")
        buf.write("~\3~\3~\3~\5~\u0e6a\n~\3\177\3\177\3\177\3\177\3\177\7")
        buf.write("\177\u0e71\n\177\f\177\16\177\u0e74\13\177\3\177\3\177")
        buf.write("\5\177\u0e78\n\177\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081")
        buf.write("\5\u0081\u0e7f\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\5\u0082\u0e85\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\5\u0082\u0e8c\n\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\5\u0083\u0e91\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\7\u0084\u0e98\n\u0084\f\u0084\16\u0084\u0e9b")
        buf.write("\13\u0084\5\u0084\u0e9d\n\u0084\3\u0085\3\u0085\5\u0085")
        buf.write("\u0ea1\n\u0085\3\u0086\3\u0086\5\u0086\u0ea5\n\u0086\3")
        buf.write("\u0086\3\u0086\5\u0086\u0ea9\n\u0086\3\u0086\5\u0086\u0eac")
        buf.write("\n\u0086\3\u0086\5\u0086\u0eaf\n\u0086\3\u0086\5\u0086")
        buf.write("\u0eb2\n\u0086\3\u0087\3\u0087\5\u0087\u0eb6\n\u0087\3")
        buf.write("\u0087\3\u0087\5\u0087\u0eba\n\u0087\3\u0087\5\u0087\u0ebd")
        buf.write("\n\u0087\3\u0087\5\u0087\u0ec0\n\u0087\3\u0087\5\u0087")
        buf.write("\u0ec3\n\u0087\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089")
        buf.write("\5\u0089\u0eca\n\u0089\3\u0089\3\u0089\5\u0089\u0ece\n")
        buf.write("\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b\u0edb")
        buf.write("\n\u008b\f\u008b\16\u008b\u0ede\13\u008b\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008e")
        buf.write("\3\u008e\5\u008e\u0eea\n\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\7\u008e\u0ef0\n\u008e\f\u008e\16\u008e\u0ef3")
        buf.write("\13\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\5\u008f\u0efc\n\u008f\3\u0090\3\u0090\5\u0090")
        buf.write("\u0f00\n\u0090\3\u0090\5\u0090\u0f03\n\u0090\3\u0090\3")
        buf.write("\u0090\3\u0091\3\u0091\5\u0091\u0f09\n\u0091\3\u0091\5")
        buf.write("\u0091\u0f0c\n\u0091\3\u0091\5\u0091\u0f0f\n\u0091\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092")
        buf.write("\u0f18\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u0f21\n\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094\u0f29\n\u0094")
        buf.write("\f\u0094\16\u0094\u0f2c\13\u0094\3\u0094\5\u0094\u0f2f")
        buf.write("\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\7\u0095\u0f37\n\u0095\f\u0095\16\u0095\u0f3a\13\u0095")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\5\u0096\u0f43\n\u0096\3\u0097\3\u0097\3\u0097\3\u0098")
        buf.write("\3\u0098\3\u0098\5\u0098\u0f4b\n\u0098\3\u0098\5\u0098")
        buf.write("\u0f4e\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\7\u0099\u0f55\n\u0099\f\u0099\16\u0099\u0f58\13\u0099")
        buf.write("\5\u0099\u0f5a\n\u0099\3\u0099\3\u0099\5\u0099\u0f5e\n")
        buf.write("\u0099\3\u0099\7\u0099\u0f61\n\u0099\f\u0099\16\u0099")
        buf.write("\u0f64\13\u0099\3\u0099\5\u0099\u0f67\n\u0099\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a\u0f6e\n\u009a")
        buf.write("\f\u009a\16\u009a\u0f71\13\u009a\5\u009a\u0f73\n\u009a")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\7\u009d")
        buf.write("\u0f90\n\u009d\f\u009d\16\u009d\u0f93\13\u009d\5\u009d")
        buf.write("\u0f95\n\u009d\3\u009d\5\u009d\u0f98\n\u009d\3\u009e\3")
        buf.write("\u009e\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\7\u00a2\u0fce\n\u00a2\f\u00a2\16\u00a2")
        buf.write("\u0fd1\13\u00a2\3\u00a2\3\u00a2\5\u00a2\u0fd5\n\u00a2")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0ff1")
        buf.write("\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write("\u0fff\n\u00a6\3\u00a7\3\u00a7\3\u00a7\7\u00a7\u1004\n")
        buf.write("\u00a7\f\u00a7\16\u00a7\u1007\13\u00a7\3\u00a7\5\u00a7")
        buf.write("\u100a\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8")
        buf.write("\u1010\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\5\u00a9\u1018\n\u00a9\5\u00a9\u101a\n\u00a9\3")
        buf.write("\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\5\u00ab\u1025\n\u00ab\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad")
        buf.write("\u102f\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\5\u00ae\u1036\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\5\u00af\u103c\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b1\3\u00b1\5\u00b1\u1044\n\u00b1\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\5\u00b2\u1049\n\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\7\u00b2\u104f\n\u00b2\f\u00b2\16\u00b2\u1052")
        buf.write("\13\u00b2\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u1057\n\u00b2")
        buf.write("\f\u00b2\16\u00b2\u105a\13\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\7\u00b2\u105f\n\u00b2\f\u00b2\16\u00b2\u1062\13\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u1067\n\u00b2\f\u00b2")
        buf.write("\16\u00b2\u106a\13\u00b2\3\u00b2\7\u00b2\u106d\n\u00b2")
        buf.write("\f\u00b2\16\u00b2\u1070\13\u00b2\5\u00b2\u1072\n\u00b2")
        buf.write("\3\u00b2\3\u00b2\5\u00b2\u1076\n\u00b2\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\5\u00b3\u107b\n\u00b3\3\u00b3\6\u00b3\u107e\n")
        buf.write("\u00b3\r\u00b3\16\u00b3\u107f\3\u00b3\3\u00b3\6\u00b3")
        buf.write("\u1084\n\u00b3\r\u00b3\16\u00b3\u1085\5\u00b3\u1088\n")
        buf.write("\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\6\u00b4\u1091\n\u00b4\r\u00b4\16\u00b4\u1092")
        buf.write("\3\u00b4\7\u00b4\u1096\n\u00b4\f\u00b4\16\u00b4\u1099")
        buf.write("\13\u00b4\3\u00b4\3\u00b4\6\u00b4\u109d\n\u00b4\r\u00b4")
        buf.write("\16\u00b4\u109e\5\u00b4\u10a1\n\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10af\n\u00b7\3\u00b7")
        buf.write("\3\u00b7\6\u00b7\u10b3\n\u00b7\r\u00b7\16\u00b7\u10b4")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10ba\n\u00b7\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\5\u00b8\u10bf\n\u00b8\3\u00b8\3\u00b8")
        buf.write("\6\u00b8\u10c3\n\u00b8\r\u00b8\16\u00b8\u10c4\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10cc\n\u00b8")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\5\u00ba")
        buf.write("\u10d4\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\6\u00ba")
        buf.write("\u10da\n\u00ba\r\u00ba\16\u00ba\u10db\3\u00ba\3\u00ba")
        buf.write("\3\u00ba\5\u00ba\u10e1\n\u00ba\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\5\u00bb\u10e7\n\u00bb\3\u00bb\5\u00bb\u10ea\n")
        buf.write("\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\5\u00bb\u10f2\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\5\u00bc\u10f9\n\u00bc\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u1102\n\u00bd")
        buf.write("\3\u00bd\5\u00bd\u1105\n\u00bd\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u1114\n\u00bf\f\u00bf")
        buf.write("\16\u00bf\u1117\13\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\5\u00c0\u111e\n\u00c0\3\u00c0\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u1126\n\u00c0\3\u00c1")
        buf.write("\3\u00c1\5\u00c1\u112a\n\u00c1\3\u00c1\3\u00c1\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\5\u00c2\u1131\n\u00c2\3\u00c2\3\u00c2")
        buf.write("\6\u00c2\u1135\n\u00c2\r\u00c2\16\u00c2\u1136\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\6\u00c3\u113d\n\u00c3\r\u00c3")
        buf.write("\16\u00c3\u113e\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\7\u00c4\u1146\n\u00c4\f\u00c4\16\u00c4\u1149\13\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u114e\n\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\7\u00c4\u1153\n\u00c4\f\u00c4\16\u00c4")
        buf.write("\u1156\13\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4")
        buf.write("\u115c\n\u00c4\3\u00c4\7\u00c4\u115f\n\u00c4\f\u00c4\16")
        buf.write("\u00c4\u1162\13\u00c4\5\u00c4\u1164\n\u00c4\5\u00c4\u1166")
        buf.write("\n\u00c4\3\u00c4\3\u00c4\6\u00c4\u116a\n\u00c4\r\u00c4")
        buf.write("\16\u00c4\u116b\5\u00c4\u116e\n\u00c4\3\u00c4\3\u00c4")
        buf.write("\7\u00c4\u1172\n\u00c4\f\u00c4\16\u00c4\u1175\13\u00c4")
        buf.write("\5\u00c4\u1177\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\7\u00c5\u117e\n\u00c5\f\u00c5\16\u00c5\u1181")
        buf.write("\13\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u1186\n\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u118b\n\u00c5\f\u00c5")
        buf.write("\16\u00c5\u118e\13\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\5\u00c5\u1194\n\u00c5\3\u00c5\7\u00c5\u1197\n\u00c5\f")
        buf.write("\u00c5\16\u00c5\u119a\13\u00c5\5\u00c5\u119c\n\u00c5\5")
        buf.write("\u00c5\u119e\n\u00c5\3\u00c5\3\u00c5\6\u00c5\u11a2\n\u00c5")
        buf.write("\r\u00c5\16\u00c5\u11a3\5\u00c5\u11a6\n\u00c5\3\u00c5")
        buf.write("\3\u00c5\7\u00c5\u11aa\n\u00c5\f\u00c5\16\u00c5\u11ad")
        buf.write("\13\u00c5\5\u00c5\u11af\n\u00c5\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\5\u00c6\u11b4\n\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6")
        buf.write("\u11b9\n\u00c6\f\u00c6\16\u00c6\u11bc\13\u00c6\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11c2\n\u00c7\f\u00c7")
        buf.write("\16\u00c7\u11c5\13\u00c7\3\u00c7\3\u00c7\5\u00c7\u11c9")
        buf.write("\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7")
        buf.write("\u11d0\n\u00c7\f\u00c7\16\u00c7\u11d3\13\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u11d9\n\u00c7\3\u00c7")
        buf.write("\7\u00c7\u11dc\n\u00c7\f\u00c7\16\u00c7\u11df\13\u00c7")
        buf.write("\5\u00c7\u11e1\n\u00c7\5\u00c7\u11e3\n\u00c7\3\u00c7\3")
        buf.write("\u00c7\3\u00c7\3\u00c7\7\u00c7\u11e9\n\u00c7\f\u00c7\16")
        buf.write("\u00c7\u11ec\13\u00c7\5\u00c7\u11ee\n\u00c7\3\u00c7\3")
        buf.write("\u00c7\3\u00c7\3\u00c7\7\u00c7\u11f4\n\u00c7\f\u00c7\16")
        buf.write("\u00c7\u11f7\13\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7")
        buf.write("\u11fc\n\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u1201\n")
        buf.write("\u00c7\7\u00c7\u1203\n\u00c7\f\u00c7\16\u00c7\u1206\13")
        buf.write("\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u120b\n\u00c7\5")
        buf.write("\u00c7\u120d\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3")
        buf.write("\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u1217\n\u00c8\f")
        buf.write("\u00c8\16\u00c8\u121a\13\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\5\u00c8\u121f\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\7\u00c9\u1226\n\u00c9\f\u00c9\16\u00c9\u1229")
        buf.write("\13\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u122f")
        buf.write("\n\u00ca\f\u00ca\16\u00ca\u1232\13\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u1236\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\7\u00ca\u123d\n\u00ca\f\u00ca\16\u00ca\u1240")
        buf.write("\13\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1245\n\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\7\u00ca\u124e\n\u00ca\f\u00ca\16\u00ca\u1251\13\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u1257\n\u00ca")
        buf.write("\f\u00ca\16\u00ca\u125a\13\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u125f\n\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca")
        buf.write("\u1264\n\u00ca\7\u00ca\u1266\n\u00ca\f\u00ca\16\u00ca")
        buf.write("\u1269\13\u00ca\5\u00ca\u126b\n\u00ca\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb")
        buf.write("\u1275\n\u00cb\f\u00cb\16\u00cb\u1278\13\u00cb\3\u00cc")
        buf.write("\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u127e\n\u00cc\3\u00cc")
        buf.write("\3\u00cc\3\u00cc\5\u00cc\u1283\n\u00cc\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1292\n\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\5\u00ce\u129d\n\u00ce\3\u00ce\5\u00ce")
        buf.write("\u12a0\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u12aa\n\u00cf\3\u00d0")
        buf.write("\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\5\u00d0\u12b4\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u12be\n\u00d1")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\5\u00d3\u12c8\n\u00d3\3\u00d4\3\u00d4\5\u00d4")
        buf.write("\u12cc\n\u00d4\3\u00d4\3\u00d4\5\u00d4\u12d0\n\u00d4\3")
        buf.write("\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\5\u00d4\u12da\n\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\5\u00d4\u12df\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u1319\n\u00d4\3\u00d5")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\3\u00d5\5\u00d5\u132b\n\u00d5\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d7\3\u00d7\5\u00d7\u1333\n\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8")
        buf.write("\u133c\n\u00d8\f\u00d8\16\u00d8\u133f\13\u00d8\3\u00d9")
        buf.write("\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1345\n\u00d9\3\u00da")
        buf.write("\3\u00da\5\u00da\u1349\n\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\3\u00db\3\u00db\5\u00db\u1350\n\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\5\u00db\u1355\n\u00db\3\u00db\5\u00db\u1358\n")
        buf.write("\u00db\3\u00db\5\u00db\u135b\n\u00db\3\u00dc\3\u00dc\3")
        buf.write("\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u1364\n")
        buf.write("\u00dc\3\u00dd\3\u00dd\5\u00dd\u1368\n\u00dd\3\u00dd\3")
        buf.write("\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u1384\n\u00e0")
        buf.write("\f\u00e0\16\u00e0\u1387\13\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\3\u00e0\5\u00e0\u138d\n\u00e0\3\u00e0\3\u00e0\5\u00e0")
        buf.write("\u1391\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\5\u00e0\u1398\n\u00e0\3\u00e0\5\u00e0\u139b\n\u00e0\3")
        buf.write("\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u13a9")
        buf.write("\n\u00e0\f\u00e0\16\u00e0\u13ac\13\u00e0\5\u00e0\u13ae")
        buf.write("\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\5\u00e1\u13b8\n\u00e1\3\u00e1\3\u00e1")
        buf.write("\5\u00e1\u13bc\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\5\u00e1\u13c2\n\u00e1\3\u00e1\5\u00e1\u13c5\n\u00e1\3")
        buf.write("\u00e1\3\u00e1\3\u00e1\5\u00e1\u13ca\n\u00e1\3\u00e1\3")
        buf.write("\u00e1\5\u00e1\u13ce\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3")
        buf.write("\u00e1\3\u00e1\5\u00e1\u13d5\n\u00e1\3\u00e1\5\u00e1\u13d8")
        buf.write("\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u13de")
        buf.write("\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\5\u00e1\u13f6\n\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\5\u00e1\u1403\n\u00e1\3\u00e1\5\u00e1")
        buf.write("\u1406\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1410\n\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1418")
        buf.write("\n\u00e1\3\u00e1\3\u00e1\5\u00e1\u141c\n\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1423\n\u00e1")
        buf.write("\3\u00e1\5\u00e1\u1426\n\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\7\u00e1\u142d\n\u00e1\f\u00e1\16\u00e1")
        buf.write("\u1430\13\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1435")
        buf.write("\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u143b")
        buf.write("\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\5\u00e1\u1445\n\u00e1\5\u00e1\u1447\n")
        buf.write("\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u144d\n")
        buf.write("\u00e2\3\u00e2\5\u00e2\u1450\n\u00e2\3\u00e2\5\u00e2\u1453")
        buf.write("\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3")
        buf.write("\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u145f\n\u00e3")
        buf.write("\3\u00e3\5\u00e3\u1462\n\u00e3\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\5\u00e4\u1468\n\u00e4\3\u00e5\5\u00e5\u146b\n")
        buf.write("\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\5\u00e5\u1473\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\5\u00e5\u147b\n\u00e5\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\3\u00e6\5\u00e6\u1481\n\u00e6\3\u00e6\3\u00e6")
        buf.write("\5\u00e6\u1485\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\3\u00e7\5\u00e7\u1493\n\u00e7\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u149d")
        buf.write("\n\u00e9\f\u00e9\16\u00e9\u14a0\13\u00e9\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\5\u00e9\u14a6\n\u00e9\3\u00e9\5\u00e9")
        buf.write("\u14a9\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea")
        buf.write("\5\u00ea\u14b0\n\u00ea\3\u00ea\3\u00ea\3\u00ea\7\u00ea")
        buf.write("\u14b5\n\u00ea\f\u00ea\16\u00ea\u14b8\13\u00ea\3\u00eb")
        buf.write("\3\u00eb\5\u00eb\u14bc\n\u00eb\3\u00eb\6\u00eb\u14bf\n")
        buf.write("\u00eb\r\u00eb\16\u00eb\u14c0\3\u00ec\3\u00ec\3\u00ec")
        buf.write("\3\u00ec\3\u00ec\3\u00ec\3\u00ec\7\u00ec\u14ca\n\u00ec")
        buf.write("\f\u00ec\16\u00ec\u14cd\13\u00ec\3\u00ed\3\u00ed\3\u00ed")
        buf.write("\3\u00ed\3\u00ee\3\u00ee\3\u00ef\3\u00ef\5\u00ef\u14d7")
        buf.write("\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u14dd")
        buf.write("\n\u00ef\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u14e2\n\u00f0")
        buf.write("\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0")
        buf.write("\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u14ef\n\u00f0")
        buf.write("\5\u00f0\u14f1\n\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0")
        buf.write("\u14f6\n\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u14fb\n")
        buf.write("\u00f0\5\u00f0\u14fd\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3")
        buf.write("\u00f1\3\u00f1\5\u00f1\u1504\n\u00f1\3\u00f2\3\u00f2\3")
        buf.write("\u00f2\3\u00f2\3\u00f2\5\u00f2\u150b\n\u00f2\3\u00f2\5")
        buf.write("\u00f2\u150e\n\u00f2\3\u00f2\5\u00f2\u1511\n\u00f2\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1517\n\u00f2\3\u00f2")
        buf.write("\3\u00f2\5\u00f2\u151b\n\u00f2\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\3\u00f3\5\u00f3\u1521\n\u00f3\3\u00f4\3\u00f4\3\u00f4")
        buf.write("\3\u00f4\5\u00f4\u1527\n\u00f4\3\u00f4\3\u00f4\3\u00f5")
        buf.write("\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f7\3\u00f7")
        buf.write("\3\u00f7\5\u00f7\u1534\n\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write("\5\u00f7\u1539\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write("\7\u00f7\u153f\n\u00f7\f\u00f7\16\u00f7\u1542\13\u00f7")
        buf.write("\5\u00f7\u1544\n\u00f7\3\u00f8\3\u00f8\3\u00f8\5\u00f8")
        buf.write("\u1549\n\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u154e\n")
        buf.write("\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u1554\n")
        buf.write("\u00f8\f\u00f8\16\u00f8\u1557\13\u00f8\5\u00f8\u1559\n")
        buf.write("\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\5\u00f9\u1561\n\u00f9\3\u00fa\3\u00fa\5\u00fa\u1565\n")
        buf.write("\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u1570\n\u00fa\f\u00fa")
        buf.write("\16\u00fa\u1573\13\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa")
        buf.write("\u1578\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u1582\n\u00fa\f\u00fa")
        buf.write("\16\u00fa\u1585\13\u00fa\5\u00fa\u1587\n\u00fa\3\u00fb")
        buf.write("\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc")
        buf.write("\u1590\n\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1595\n")
        buf.write("\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u159b\n")
        buf.write("\u00fd\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\5\u00ff")
        buf.write("\u15a2\n\u00ff\5\u00ff\u15a4\n\u00ff\3\u00ff\3\u00ff\3")
        buf.write("\u00ff\5\u00ff\u15a9\n\u00ff\5\u00ff\u15ab\n\u00ff\3\u0100")
        buf.write("\3\u0100\5\u0100\u15af\n\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\5\u0100\u15b5\n\u0100\3\u0100\5\u0100\u15b8\n")
        buf.write("\u0100\3\u0101\3\u0101\3\u0102\3\u0102\3\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\5\u0103\u15c2\n\u0103\3\u0104\3\u0104")
        buf.write("\5\u0104\u15c6\n\u0104\3\u0105\3\u0105\3\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\6\u0106\u15d8")
        buf.write("\n\u0106\r\u0106\16\u0106\u15d9\3\u0107\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\5\u0107\u15e1\n\u0107\5\u0107\u15e3\n")
        buf.write("\u0107\3\u0108\3\u0108\3\u0108\6\u0108\u15e8\n\u0108\r")
        buf.write("\u0108\16\u0108\u15e9\5\u0108\u15ec\n\u0108\3\u0109\3")
        buf.write("\u0109\5\u0109\u15f0\n\u0109\3\u010a\3\u010a\3\u010a\5")
        buf.write("\u010a\u15f5\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3")
        buf.write("\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b")
        buf.write("\u1601\n\u010b\3\u010c\3\u010c\3\u010c\5\u010c\u1606\n")
        buf.write("\u010c\3\u010d\3\u010d\3\u010e\3\u010e\5\u010e\u160c\n")
        buf.write("\u010e\3\u010f\5\u010f\u160f\n\u010f\3\u010f\3\u010f\5")
        buf.write("\u010f\u1613\n\u010f\3\u010f\6\u010f\u1616\n\u010f\r\u010f")
        buf.write("\16\u010f\u1617\3\u010f\5\u010f\u161b\n\u010f\3\u010f")
        buf.write("\3\u010f\5\u010f\u161f\n\u010f\3\u010f\3\u010f\5\u010f")
        buf.write("\u1623\n\u010f\5\u010f\u1625\n\u010f\3\u0110\3\u0110\3")
        buf.write("\u0111\5\u0111\u162a\n\u0111\3\u0111\3\u0111\3\u0112\5")
        buf.write("\u0112\u162f\n\u0112\3\u0112\3\u0112\3\u0113\3\u0113\3")
        buf.write("\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write("\3\u0113\5\u0113\u163d\n\u0113\3\u0113\5\u0113\u1640\n")
        buf.write("\u0113\3\u0114\3\u0114\5\u0114\u1644\n\u0114\3\u0114\5")
        buf.write("\u0114\u1647\n\u0114\3\u0114\5\u0114\u164a\n\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u164f\n\u0114\3\u0114\5\u0114")
        buf.write("\u1652\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1657\n")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u165c\n\u0114\3")
        buf.write("\u0114\5\u0114\u165f\n\u0114\3\u0114\3\u0114\3\u0114\5")
        buf.write("\u0114\u1664\n\u0114\3\u0114\5\u0114\u1667\n\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\5\u0114\u166d\n\u0114\3\u0114")
        buf.write("\5\u0114\u1670\n\u0114\3\u0114\3\u0114\5\u0114\u1674\n")
        buf.write("\u0114\3\u0114\5\u0114\u1677\n\u0114\3\u0114\5\u0114\u167a")
        buf.write("\n\u0114\3\u0114\3\u0114\5\u0114\u167e\n\u0114\3\u0114")
        buf.write("\5\u0114\u1681\n\u0114\3\u0114\5\u0114\u1684\n\u0114\3")
        buf.write("\u0114\3\u0114\5\u0114\u1688\n\u0114\3\u0114\5\u0114\u168b")
        buf.write("\n\u0114\3\u0114\5\u0114\u168e\n\u0114\3\u0114\5\u0114")
        buf.write("\u1691\n\u0114\3\u0114\3\u0114\5\u0114\u1695\n\u0114\3")
        buf.write("\u0114\5\u0114\u1698\n\u0114\3\u0114\5\u0114\u169b\n\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\5\u0114\u16a0\n\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u16a5\n\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u16aa\n\u0114\3\u0114\5\u0114\u16ad\n")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u16b2\n\u0114\3")
        buf.write("\u0114\5\u0114\u16b5\n\u0114\3\u0114\3\u0114\3\u0114\5")
        buf.write("\u0114\u16ba\n\u0114\3\u0114\5\u0114\u16bd\n\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u16c1\n\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u16c5\n\u0114\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115")
        buf.write("\u16cb\n\u0115\f\u0115\16\u0115\u16ce\13\u0115\3\u0115")
        buf.write("\3\u0115\3\u0116\3\u0116\5\u0116\u16d4\n\u0116\3\u0116")
        buf.write("\3\u0116\5\u0116\u16d8\n\u0116\3\u0116\3\u0116\3\u0116")
        buf.write("\5\u0116\u16dd\n\u0116\3\u0116\5\u0116\u16e0\n\u0116\3")
        buf.write("\u0116\3\u0116\3\u0116\5\u0116\u16e5\n\u0116\3\u0116\3")
        buf.write("\u0116\5\u0116\u16e9\n\u0116\5\u0116\u16eb\n\u0116\3\u0117")
        buf.write("\3\u0117\3\u0117\3\u0117\3\u0118\3\u0118\3\u0118\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119")
        buf.write("\u16fb\n\u0119\3\u0119\3\u0119\3\u011a\3\u011a\3\u011a")
        buf.write("\7\u011a\u1702\n\u011a\f\u011a\16\u011a\u1705\13\u011a")
        buf.write("\3\u011b\3\u011b\3\u011b\7\u011b\u170a\n\u011b\f\u011b")
        buf.write("\16\u011b\u170d\13\u011b\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\7\u011c\u1713\n\u011c\f\u011c\16\u011c\u1716\13\u011c")
        buf.write("\3\u011c\3\u011c\3\u011d\3\u011d\3\u011d\7\u011d\u171d")
        buf.write("\n\u011d\f\u011d\16\u011d\u1720\13\u011d\3\u011e\3\u011e")
        buf.write("\3\u011e\7\u011e\u1725\n\u011e\f\u011e\16\u011e\u1728")
        buf.write("\13\u011e\3\u011f\3\u011f\3\u011f\7\u011f\u172d\n\u011f")
        buf.write("\f\u011f\16\u011f\u1730\13\u011f\3\u0120\3\u0120\3\u0120")
        buf.write("\7\u0120\u1735\n\u0120\f\u0120\16\u0120\u1738\13\u0120")
        buf.write("\3\u0121\3\u0121\3\u0121\7\u0121\u173d\n\u0121\f\u0121")
        buf.write("\16\u0121\u1740\13\u0121\3\u0122\3\u0122\5\u0122\u1744")
        buf.write("\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write("\5\u0122\u174c\n\u0122\3\u0122\3\u0122\3\u0122\5\u0122")
        buf.write("\u1751\n\u0122\3\u0123\3\u0123\3\u0123\5\u0123\u1756\n")
        buf.write("\u0123\3\u0123\5\u0123\u1759\n\u0123\3\u0123\3\u0123\3")
        buf.write("\u0123\5\u0123\u175e\n\u0123\3\u0123\5\u0123\u1761\n\u0123")
        buf.write("\3\u0124\3\u0124\5\u0124\u1765\n\u0124\3\u0125\3\u0125")
        buf.write("\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0127\3\u0127")
        buf.write("\3\u0127\3\u0127\3\u0127\5\u0127\u1773\n\u0127\3\u0127")
        buf.write("\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u177a\n\u0127")
        buf.write("\3\u0127\3\u0127\3\u0127\5\u0127\u177f\n\u0127\3\u0128")
        buf.write("\3\u0128\3\u0128\5\u0128\u1784\n\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\6\u0128")
        buf.write("\u17a3\n\u0128\r\u0128\16\u0128\u17a4\3\u0128\3\u0128")
        buf.write("\5\u0128\u17a9\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\6\u0128\u17af\n\u0128\r\u0128\16\u0128\u17b0\3\u0128")
        buf.write("\3\u0128\5\u0128\u17b5\n\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u17be\n\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128")
        buf.write("\u17c6\n\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u17cb\n")
        buf.write("\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\5\u0128\u17d3\n\u0128\3\u0128\3\u0128\3\u0128\5\u0128")
        buf.write("\u17d8\n\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u17dd\n")
        buf.write("\u0128\5\u0128\u17df\n\u0128\3\u0128\3\u0128\3\u0128\3")
        buf.write("\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u17e8\n\u0128\3")
        buf.write("\u0128\3\u0128\3\u0128\5\u0128\u17ed\n\u0128\3\u0128\3")
        buf.write("\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u17f5\n")
        buf.write("\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u17fa\n\u0128\3")
        buf.write("\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128")
        buf.write("\u1802\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\5\u0128\u180a\n\u0128\3\u0128\5\u0128\u180d\n")
        buf.write("\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\5\u0128\u1817\n\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\5\u0128\u1829\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\5\u0128\u182f\n\u0128\3\u0128\3\u0128\5\u0128\u1833\n")
        buf.write("\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1839\n")
        buf.write("\u0128\3\u0128\3\u0128\5\u0128\u183d\n\u0128\3\u0128\3")
        buf.write("\u0128\5\u0128\u1841\n\u0128\3\u0129\3\u0129\3\u0129\3")
        buf.write("\u0129\3\u0129\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a")
        buf.write("\u184c\n\u012a\f\u012a\16\u012a\u184f\13\u012a\3\u012a")
        buf.write("\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1856\n\u012a")
        buf.write("\3\u012b\3\u012b\5\u012b\u185a\n\u012b\3\u012c\3\u012c")
        buf.write("\3\u012c\5\u012c\u185f\n\u012c\3\u012c\3\u012c\3\u012c")
        buf.write("\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1868\n\u012c")
        buf.write("\3\u012c\5\u012c\u186b\n\u012c\3\u012c\3\u012c\3\u012c")
        buf.write("\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write("\5\u012c\u1877\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write("\3\u012c\3\u012c\5\u012c\u187f\n\u012c\3\u012c\3\u012c")
        buf.write("\3\u012c\3\u012c\3\u012c\3\u012c\7\u012c\u1887\n\u012c")
        buf.write("\f\u012c\16\u012c\u188a\13\u012c\5\u012c\u188c\n\u012c")
        buf.write("\3\u012c\3\u012c\5\u012c\u1890\n\u012c\3\u012c\3\u012c")
        buf.write("\5\u012c\u1894\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u18ad")
        buf.write("\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012f")
        buf.write("\3\u012f\3\u012f\3\u012f\5\u012f\u18b8\n\u012f\3\u012f")
        buf.write("\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u18bf\n\u012f")
        buf.write("\7\u012f\u18c1\n\u012f\f\u012f\16\u012f\u18c4\13\u012f")
        buf.write("\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u18ca\n\u0130")
        buf.write("\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131")
        buf.write("\u18d2\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u18d7\n")
        buf.write("\u0131\3\u0131\3\u0131\3\u0131\3\u0131\7\u0131\u18dd\n")
        buf.write("\u0131\f\u0131\16\u0131\u18e0\13\u0131\3\u0132\3\u0132")
        buf.write("\3\u0132\5\u0132\u18e5\n\u0132\3\u0132\3\u0132\3\u0132")
        buf.write("\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u18ef")
        buf.write("\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132")
        buf.write("\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u18fc")
        buf.write("\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1902")
        buf.write("\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1908")
        buf.write("\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132")
        buf.write("\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132")
        buf.write("\3\u0132\5\u0132\u1918\n\u0132\3\u0132\3\u0132\3\u0132")
        buf.write("\3\u0132\5\u0132\u191e\n\u0132\3\u0132\3\u0132\3\u0132")
        buf.write("\3\u0132\3\u0132\3\u0132\3\u0132\7\u0132\u1927\n\u0132")
        buf.write("\f\u0132\16\u0132\u192a\13\u0132\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\7\u0133\u193a\n\u0133")
        buf.write("\f\u0133\16\u0133\u193d\13\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\6\u0133\u1946\n\u0133")
        buf.write("\r\u0133\16\u0133\u1947\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1959\n\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\3\u0133\7\u0133\u196a\n\u0133\f\u0133\16\u0133\u196d")
        buf.write("\13\u0133\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\5\u0135\u197f\n\u0135\3\u0136")
        buf.write("\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136")
        buf.write("\u1988\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137")
        buf.write("\3\u0137\3\u0137\5\u0137\u1991\n\u0137\3\u0138\3\u0138")
        buf.write("\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u199a")
        buf.write("\n\u0139\3\u013a\3\u013a\3\u013b\3\u013b\3\u013c\3\u013c")
        buf.write("\3\u013d\3\u013d\3\u013e\3\u013e\3\u013f\3\u013f\3\u0140")
        buf.write("\3\u0140\3\u0141\3\u0141\3\u0141\2\5\u0260\u0262\u0264")
        buf.write("\u0142\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,")
        buf.write(".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write("\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec")
        buf.write("\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe")
        buf.write("\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110")
        buf.write("\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122")
        buf.write("\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134")
        buf.write("\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146")
        buf.write("\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158")
        buf.write("\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a")
        buf.write("\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c")
        buf.write("\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e")
        buf.write("\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0")
        buf.write("\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2")
        buf.write("\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4")
        buf.write("\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6")
        buf.write("\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8")
        buf.write("\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa")
        buf.write("\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c")
        buf.write("\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e")
        buf.write("\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230")
        buf.write("\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242")
        buf.write("\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254")
        buf.write("\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266")
        buf.write("\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278")
        buf.write("\u027a\u027c\u027e\u0280\2\u0084\4\2\'\'\u008c\u008c\4")
        buf.write("\2\u01e9\u01e9\u01ef\u01ef\5\2CC\u0093\u0093\u00a8\u00a8")
        buf.write("\5\2**\u0164\u0164\u01a3\u01a3\6\2**\u0184\u0184\u01e7")
        buf.write("\u01e7\u0230\u0230\4\2\u01de\u01de\u043a\u043a\4\2KK\u0084")
        buf.write("\u0084\4\2\21\21\u0133\u0133\5\2,,QQ\u00ab\u00ab\4\2\u0191")
        buf.write("\u0191\u0201\u0201\5\2\u01d6\u01d6\u0257\u0257\u025e\u025e")
        buf.write("\4\2\u016b\u016b\u01a8\u01a8\4\2\u0145\u0145\u01b6\u01b6")
        buf.write("\4\2\u0143\u0143\u019a\u019a\5\2LLPPuu\5\2**\u0175\u0175")
        buf.write("\u018f\u018f\5\2**\u0171\u0171\u02d9\u02d9\4\2\u024a\u024a")
        buf.write("\u026c\u026c\4\2MMWW\5\2\u0193\u0193\u01f8\u01f8\u0232")
        buf.write("\u0232\4\2CC\u0093\u0093\3\2\u0149\u014a\3\2\u0430\u0431")
        buf.write("\4\2\u043a\u043a\u0442\u0442\5\2\u018e\u018e\u01b1\u01b1")
        buf.write("\u01e5\u01e5\4\2**\u0430\u0431\t\2**\u0156\u0156\u0158")
        buf.write("\u0158\u0175\u0175\u018f\u018f\u020e\u020e\u0442\u0442")
        buf.write("\4\2\u01de\u01de\u01e8\u01e8\3\2\u0431\u0432\4\2\t\t\63")
        buf.write("\63\4\2\33\33\37\37\4\2\u01a7\u01a7\u026d\u026d\4\2\17")
        buf.write("\17\u00a2\u00a2\4\2\u00b3\u00b3\u0270\u0270\4\2\26\26")
        buf.write("\u0087\u0087\5\2++IIdd\4\2dd\u015a\u015a\4\2\u0151\u0151")
        buf.write("\u018b\u018b\4\2``\u0228\u0228\4\2++dd\4\2\n\n\61\61\4")
        buf.write("\2\u00af\u00af\u0269\u0269\6\2\u018e\u018e\u01b1\u01b1")
        buf.write("\u01e4\u01e4\u0204\u0204\4\2\u018e\u018e\u01e4\u01e4\4")
        buf.write("\2\20\20--\5\2@@KK\u00ad\u00ad\4\2##OO\4\2\\\\\u008a\u008a")
        buf.write("\4\2\n\n\61\62\3\2\u023f\u0240\4\2\u0196\u0196\u022e\u022e")
        buf.write("\4\2\u00d5\u00d5\u01b9\u01b9\7\2ee\u01be\u01bf\u01c1\u01c1")
        buf.write("\u01c5\u01cd\u0210\u0210\6\2\u01bb\u01bc\u01c0\u01c0\u01c2")
        buf.write("\u01c3\u0211\u0211\5\2ff\u01ba\u01ba\u01c4\u01c4\4\2\u01aa")
        buf.write("\u01aa\u0241\u0241\4\2\u023b\u023b\u023d\u023d\4\2\u013d")
        buf.write("\u013d\u0242\u0242\4\2VV\u021f\u021f\4\2\63\63\u0169\u0169")
        buf.write("\5\2  ;;\u00a6\u00a6\5\2zz\u009f\u009f\u0194\u0194\4\2")
        buf.write("bb\u00a9\u00a9\4\2\u014d\u014d\u0233\u0233\4\2((\u026b")
        buf.write("\u026b\4\2ll\u01b6\u01b6\4\2\u0187\u0187\u020a\u020a\4")
        buf.write("\2\u009f\u009f\u0283\u0283\6\2\u00c1\u00c1\u00c3\u00c3")
        buf.write("\u00c9\u00c9\u024b\u024b\4\2\u0411\u0411\u0422\u0422\4")
        buf.write("\2\u013e\u013e\u0212\u0212\4\2BBLL\b\2zz\u009f\u009f\u00a4")
        buf.write("\u00a4\u0180\u0180\u0194\u0194\u026b\u026b\4\2\u01dd\u01dd")
        buf.write("\u0247\u0247\4\2\u017d\u017d\u026f\u026f\4\2zz\u0194\u0194")
        buf.write("\5\2MMXX\u01a1\u01a1\5\2\u0196\u0196\u01b6\u01b6\u022e")
        buf.write("\u022e\4\2\u0247\u0247\u026a\u026a\4\2\u015c\u015c\u0209")
        buf.write("\u0209\b\2\u00d5\u00d5\u017a\u017a\u017c\u017c\u0195\u0195")
        buf.write("\u020f\u020f\u0234\u0234\4\2-.<<\5\2\u0187\u0187\u01fa")
        buf.write("\u01fa\u0335\u0335\4\2\u01ae\u01ae\u0259\u0259\f\2\u014c")
        buf.write("\u014c\u0153\u0153\u015e\u0160\u0166\u0166\u01d7\u01d7")
        buf.write("\u01df\u01df\u024c\u024c\u0253\u0253\u0305\u0305\u03ab")
        buf.write("\u03ab\4\2$$\u009c\u009c\4\2nn\u03a3\u03a3\r\2\u014c\u014c")
        buf.write("\u0153\u0153\u015e\u0160\u0166\u0166\u01d7\u01d7\u01df")
        buf.write("\u01df\u0220\u0220\u024c\u024c\u0253\u0253\u0305\u0305")
        buf.write("\u03ab\u03ab\5\2\u043a\u043a\u0442\u0442\u0444\u0444\3")
        buf.write("\2\u0446\u0447\6\2\u015b\u015b\u02d4\u02df\u043a\u043a")
        buf.write("\u0442\u0443\4\2\u0430\u0432\u043b\u043b\4\2==\u00a5\u00a5")
        buf.write("\4\2mm\u043e\u043e\7\2\32\32\u00d1\u00d3\u00da\u00da\u00dc")
        buf.write("\u00df\u01e2\u01e2\4\2\32\32\u00d2\u00d2\4\2\32\32\u00d1")
        buf.write("\u00d1\3\2\u00b7\u00c2\4\2\u00aa\u00aa\u0231\u0231\4\2")
        buf.write("\u00c6\u00cb\u018f\u018f\b\2\u00cc\u00cc\u00d7\u00d7\u00d9")
        buf.write("\u00d9\u00db\u00db\u00e2\u00e2\u0141\u0142\6\2\u00cd\u00d0")
        buf.write("\u00d5\u00d6\u00d8\u00d8\u013f\u013f\4\2\u008f\u008f\u00e0")
        buf.write("\u00e0\4\2\u01ae\u01ae\u02e4\u02ec\4\2\u00d5\u00d5\u01e2")
        buf.write("\u01e2\5\2\u00cc\u00cd\u00cf\u00cf\u01ae\u01ae\4\2\u0120")
        buf.write("\u0121\u0127\u0127\4\2%%\u011e\u0121\3\2\u012a\u012b\5")
        buf.write("\2\23\23ZZ\u00a3\u00a3\4\2\u00d1\u00d1\u00d5\u00d5\4\2")
        buf.write("\u00cc\u00cd\u00cf\u00cf\5\2\20\20--\u03a1\u03a1\5\2\u010e")
        buf.write("\u010e\u0114\u0115\u011a\u011a\5\2\u010f\u0111\u0116\u0119")
        buf.write("\u011b\u011d\4\2\u01ed\u01ed\u01fb\u01fb\4\2kk\u0425\u0425")
        buf.write("\5\2==\u00a5\u00a5\u0262\u0262\4\2\u0080\u0080\u008b\u008b")
        buf.write("\5\2\n\n\u0136\u0136\u0237\u0237\6\2kk\u041d\u041d\u041f")
        buf.write("\u041f\u0425\u0426\3\2\u041a\u0421\3\2\u02ac\u02d3\3\2")
        buf.write("\u02e0\u02e3\3\2\u0283\u028b\3\2\u027b\u0282\5\2\u00cc")
        buf.write("\u00d0\u00dd\u00dd\u00e0\u00e0\31\2$$\60\60GGnntt\u009c")
        buf.write("\u009c\u00e2\u00e2\u010e\u011d\u0131\u01a6\u01a8\u0220")
        buf.write("\u0222\u0249\u024b\u0254\u0256\u026b\u026e\u0275\u027a")
        buf.write("\u027a\u028d\u0295\u029a\u029b\u029d\u02a3\u02a5\u02ab")
        buf.write("\u02d9\u02d9\u0305\u0305\u03ab\u03ab\u044b\u044b\24\2")
        buf.write("\'\'\\\\\u008a\u008a\u008c\u008c\u00cc\u00ce\u00d0\u00d0")
        buf.write("\u00ee\u010d\u0112\u0112\u0129\u0129\u01a7\u01a7\u026d")
        buf.write("\u026d\u027b\u0282\u02a5\u02a5\u02e4\u02e4\u02e7\u0304")
        buf.write("\u0306\u03aa\u03ac\u0410\u0421\u0421\3\2\7\b\2\u1e3c\2")
        buf.write("\u0283\3\2\2\2\4\u0294\3\2\2\2\6\u02a8\3\2\2\2\b\u02aa")
        buf.write("\3\2\2\2\n\u02cf\3\2\2\2\f\u02db\3\2\2\2\16\u02e6\3\2")
        buf.write("\2\2\20\u02f7\3\2\2\2\22\u02fc\3\2\2\2\24\u0308\3\2\2")
        buf.write("\2\26\u0323\3\2\2\2\30\u032c\3\2\2\2\32\u032e\3\2\2\2")
        buf.write("\34\u033a\3\2\2\2\36\u0358\3\2\2\2 \u037c\3\2\2\2\"\u03af")
        buf.write("\3\2\2\2$\u03c9\3\2\2\2&\u03e7\3\2\2\2(\u0448\3\2\2\2")
        buf.write("*\u044a\3\2\2\2,\u045c\3\2\2\2.\u0499\3\2\2\2\60\u04ac")
        buf.write("\3\2\2\2\62\u04e7\3\2\2\2\64\u04e9\3\2\2\2\66\u0515\3")
        buf.write("\2\2\28\u051b\3\2\2\2:\u051d\3\2\2\2<\u0532\3\2\2\2>\u0539")
        buf.write("\3\2\2\2@\u053b\3\2\2\2B\u054b\3\2\2\2D\u054e\3\2\2\2")
        buf.write("F\u0553\3\2\2\2H\u056d\3\2\2\2J\u057d\3\2\2\2L\u057f\3")
        buf.write("\2\2\2N\u058f\3\2\2\2P\u0591\3\2\2\2R\u05cd\3\2\2\2T\u0614")
        buf.write("\3\2\2\2V\u0616\3\2\2\2X\u0632\3\2\2\2Z\u063a\3\2\2\2")
        buf.write("\\\u0658\3\2\2\2^\u06ef\3\2\2\2`\u06f1\3\2\2\2b\u06f3")
        buf.write("\3\2\2\2d\u06f6\3\2\2\2f\u0740\3\2\2\2h\u0757\3\2\2\2")
        buf.write("j\u07eb\3\2\2\2l\u07f0\3\2\2\2n\u07f2\3\2\2\2p\u07fc\3")
        buf.write("\2\2\2r\u0834\3\2\2\2t\u0848\3\2\2\2v\u084a\3\2\2\2x\u086d")
        buf.write("\3\2\2\2z\u0876\3\2\2\2|\u087d\3\2\2\2~\u0894\3\2\2\2")
        buf.write("\u0080\u089d\3\2\2\2\u0082\u08ac\3\2\2\2\u0084\u08c2\3")
        buf.write("\2\2\2\u0086\u08d6\3\2\2\2\u0088\u0a64\3\2\2\2\u008a\u0a66")
        buf.write("\3\2\2\2\u008c\u0a6d\3\2\2\2\u008e\u0a74\3\2\2\2\u0090")
        buf.write("\u0a8b\3\2\2\2\u0092\u0a93\3\2\2\2\u0094\u0a9a\3\2\2\2")
        buf.write("\u0096\u0aa1\3\2\2\2\u0098\u0aa8\3\2\2\2\u009a\u0ab4\3")
        buf.write("\2\2\2\u009c\u0abe\3\2\2\2\u009e\u0ac5\3\2\2\2\u00a0\u0ad5")
        buf.write("\3\2\2\2\u00a2\u0adf\3\2\2\2\u00a4\u0ae3\3\2\2\2\u00a6")
        buf.write("\u0ae9\3\2\2\2\u00a8\u0af5\3\2\2\2\u00aa\u0af7\3\2\2\2")
        buf.write("\u00ac\u0afe\3\2\2\2\u00ae\u0b00\3\2\2\2\u00b0\u0b33\3")
        buf.write("\2\2\2\u00b2\u0b7d\3\2\2\2\u00b4\u0bb8\3\2\2\2\u00b6\u0c10")
        buf.write("\3\2\2\2\u00b8\u0c14\3\2\2\2\u00ba\u0c28\3\2\2\2\u00bc")
        buf.write("\u0c2a\3\2\2\2\u00be\u0c32\3\2\2\2\u00c0\u0c3a\3\2\2\2")
        buf.write("\u00c2\u0c3c\3\2\2\2\u00c4\u0c5a\3\2\2\2\u00c6\u0c91\3")
        buf.write("\2\2\2\u00c8\u0c9a\3\2\2\2\u00ca\u0cae\3\2\2\2\u00cc\u0cba")
        buf.write("\3\2\2\2\u00ce\u0cbe\3\2\2\2\u00d0\u0cdf\3\2\2\2\u00d2")
        buf.write("\u0cf4\3\2\2\2\u00d4\u0cfe\3\2\2\2\u00d6\u0d02\3\2\2\2")
        buf.write("\u00d8\u0d1b\3\2\2\2\u00da\u0d45\3\2\2\2\u00dc\u0d47\3")
        buf.write("\2\2\2\u00de\u0d56\3\2\2\2\u00e0\u0d84\3\2\2\2\u00e2\u0d8e")
        buf.write("\3\2\2\2\u00e4\u0d98\3\2\2\2\u00e6\u0dce\3\2\2\2\u00e8")
        buf.write("\u0dd0\3\2\2\2\u00ea\u0de7\3\2\2\2\u00ec\u0ded\3\2\2\2")
        buf.write("\u00ee\u0dfd\3\2\2\2\u00f0\u0e01\3\2\2\2\u00f2\u0e27\3")
        buf.write("\2\2\2\u00f4\u0e4d\3\2\2\2\u00f6\u0e5b\3\2\2\2\u00f8\u0e63")
        buf.write("\3\2\2\2\u00fa\u0e65\3\2\2\2\u00fc\u0e6b\3\2\2\2\u00fe")
        buf.write("\u0e79\3\2\2\2\u0100\u0e7c\3\2\2\2\u0102\u0e80\3\2\2\2")
        buf.write("\u0104\u0e90\3\2\2\2\u0106\u0e92\3\2\2\2\u0108\u0e9e\3")
        buf.write("\2\2\2\u010a\u0ea2\3\2\2\2\u010c\u0eb3\3\2\2\2\u010e\u0ec4")
        buf.write("\3\2\2\2\u0110\u0ec7\3\2\2\2\u0112\u0ed1\3\2\2\2\u0114")
        buf.write("\u0ed5\3\2\2\2\u0116\u0edf\3\2\2\2\u0118\u0ee2\3\2\2\2")
        buf.write("\u011a\u0ee7\3\2\2\2\u011c\u0efb\3\2\2\2\u011e\u0efd\3")
        buf.write("\2\2\2\u0120\u0f0e\3\2\2\2\u0122\u0f17\3\2\2\2\u0124\u0f20")
        buf.write("\3\2\2\2\u0126\u0f22\3\2\2\2\u0128\u0f30\3\2\2\2\u012a")
        buf.write("\u0f3b\3\2\2\2\u012c\u0f44\3\2\2\2\u012e\u0f47\3\2\2\2")
        buf.write("\u0130\u0f4f\3\2\2\2\u0132\u0f68\3\2\2\2\u0134\u0f74\3")
        buf.write("\2\2\2\u0136\u0f77\3\2\2\2\u0138\u0f97\3\2\2\2\u013a\u0f99")
        buf.write("\3\2\2\2\u013c\u0f9b\3\2\2\2\u013e\u0f9d\3\2\2\2\u0140")
        buf.write("\u0f9f\3\2\2\2\u0142\u0fd4\3\2\2\2\u0144\u0fd6\3\2\2\2")
        buf.write("\u0146\u0fdc\3\2\2\2\u0148\u0ff0\3\2\2\2\u014a\u0ffe\3")
        buf.write("\2\2\2\u014c\u1009\3\2\2\2\u014e\u100b\3\2\2\2\u0150\u1011")
        buf.write("\3\2\2\2\u0152\u101b\3\2\2\2\u0154\u101f\3\2\2\2\u0156")
        buf.write("\u1026\3\2\2\2\u0158\u102a\3\2\2\2\u015a\u1030\3\2\2\2")
        buf.write("\u015c\u1037\3\2\2\2\u015e\u103d\3\2\2\2\u0160\u1043\3")
        buf.write("\2\2\2\u0162\u1048\3\2\2\2\u0164\u1077\3\2\2\2\u0166\u108c")
        buf.write("\3\2\2\2\u0168\u10a5\3\2\2\2\u016a\u10a8\3\2\2\2\u016c")
        buf.write("\u10ae\3\2\2\2\u016e\u10be\3\2\2\2\u0170\u10cd\3\2\2\2")
        buf.write("\u0172\u10d3\3\2\2\2\u0174\u10f1\3\2\2\2\u0176\u10f3\3")
        buf.write("\2\2\2\u0178\u10fa\3\2\2\2\u017a\u1106\3\2\2\2\u017c\u110c")
        buf.write("\3\2\2\2\u017e\u1125\3\2\2\2\u0180\u1129\3\2\2\2\u0182")
        buf.write("\u112d\3\2\2\2\u0184\u1138\3\2\2\2\u0186\u1176\3\2\2\2")
        buf.write("\u0188\u11ae\3\2\2\2\u018a\u11b0\3\2\2\2\u018c\u120c\3")
        buf.write("\2\2\2\u018e\u120e\3\2\2\2\u0190\u1220\3\2\2\2\u0192\u126a")
        buf.write("\3\2\2\2\u0194\u126c\3\2\2\2\u0196\u1279\3\2\2\2\u0198")
        buf.write("\u1284\3\2\2\2\u019a\u129f\3\2\2\2\u019c\u12a9\3\2\2\2")
        buf.write("\u019e\u12b3\3\2\2\2\u01a0\u12b5\3\2\2\2\u01a2\u12bf\3")
        buf.write("\2\2\2\u01a4\u12c2\3\2\2\2\u01a6\u1318\3\2\2\2\u01a8\u132a")
        buf.write("\3\2\2\2\u01aa\u132c\3\2\2\2\u01ac\u1330\3\2\2\2\u01ae")
        buf.write("\u1337\3\2\2\2\u01b0\u1340\3\2\2\2\u01b2\u1346\3\2\2\2")
        buf.write("\u01b4\u134d\3\2\2\2\u01b6\u1363\3\2\2\2\u01b8\u1365\3")
        buf.write("\2\2\2\u01ba\u1370\3\2\2\2\u01bc\u1376\3\2\2\2\u01be\u13ad")
        buf.write("\3\2\2\2\u01c0\u1446\3\2\2\2\u01c2\u1452\3\2\2\2\u01c4")
        buf.write("\u1461\3\2\2\2\u01c6\u1467\3\2\2\2\u01c8\u147a\3\2\2\2")
        buf.write("\u01ca\u1484\3\2\2\2\u01cc\u1492\3\2\2\2\u01ce\u1494\3")
        buf.write("\2\2\2\u01d0\u1497\3\2\2\2\u01d2\u14ad\3\2\2\2\u01d4\u14b9")
        buf.write("\3\2\2\2\u01d6\u14c2\3\2\2\2\u01d8\u14ce\3\2\2\2\u01da")
        buf.write("\u14d2\3\2\2\2\u01dc\u14d4\3\2\2\2\u01de\u14fc\3\2\2\2")
        buf.write("\u01e0\u1503\3\2\2\2\u01e2\u1505\3\2\2\2\u01e4\u151c\3")
        buf.write("\2\2\2\u01e6\u1522\3\2\2\2\u01e8\u152a\3\2\2\2\u01ea\u152d")
        buf.write("\3\2\2\2\u01ec\u1530\3\2\2\2\u01ee\u1545\3\2\2\2\u01f0")
        buf.write("\u155a\3\2\2\2\u01f2\u1562\3\2\2\2\u01f4\u1588\3\2\2\2")
        buf.write("\u01f6\u1594\3\2\2\2\u01f8\u1596\3\2\2\2\u01fa\u159c\3")
        buf.write("\2\2\2\u01fc\u15aa\3\2\2\2\u01fe\u15ae\3\2\2\2\u0200\u15b9")
        buf.write("\3\2\2\2\u0202\u15bb\3\2\2\2\u0204\u15c1\3\2\2\2\u0206")
        buf.write("\u15c5\3\2\2\2\u0208\u15c7\3\2\2\2\u020a\u15c9\3\2\2\2")
        buf.write("\u020c\u15db\3\2\2\2\u020e\u15eb\3\2\2\2\u0210\u15ef\3")
        buf.write("\2\2\2\u0212\u15f4\3\2\2\2\u0214\u1600\3\2\2\2\u0216\u1605")
        buf.write("\3\2\2\2\u0218\u1607\3\2\2\2\u021a\u160b\3\2\2\2\u021c")
        buf.write("\u1624\3\2\2\2\u021e\u1626\3\2\2\2\u0220\u1629\3\2\2\2")
        buf.write("\u0222\u162e\3\2\2\2\u0224\u163f\3\2\2\2\u0226\u16c4\3")
        buf.write("\2\2\2\u0228\u16c6\3\2\2\2\u022a\u16ea\3\2\2\2\u022c\u16ec")
        buf.write("\3\2\2\2\u022e\u16f0\3\2\2\2\u0230\u16f6\3\2\2\2\u0232")
        buf.write("\u16fe\3\2\2\2\u0234\u1706\3\2\2\2\u0236\u170e\3\2\2\2")
        buf.write("\u0238\u1719\3\2\2\2\u023a\u1721\3\2\2\2\u023c\u1729\3")
        buf.write("\2\2\2\u023e\u1731\3\2\2\2\u0240\u1739\3\2\2\2\u0242\u174b")
        buf.write("\3\2\2\2\u0244\u1760\3\2\2\2\u0246\u1764\3\2\2\2\u0248")
        buf.write("\u1766\3\2\2\2\u024a\u1769\3\2\2\2\u024c\u177e\3\2\2\2")
        buf.write("\u024e\u1840\3\2\2\2\u0250\u1842\3\2\2\2\u0252\u1855\3")
        buf.write("\2\2\2\u0254\u1857\3\2\2\2\u0256\u1893\3\2\2\2\u0258\u18ac")
        buf.write("\3\2\2\2\u025a\u18ae\3\2\2\2\u025c\u18b7\3\2\2\2\u025e")
        buf.write("\u18c9\3\2\2\2\u0260\u18d6\3\2\2\2\u0262\u18e1\3\2\2\2")
        buf.write("\u0264\u1958\3\2\2\2\u0266\u196e\3\2\2\2\u0268\u197e\3")
        buf.write("\2\2\2\u026a\u1987\3\2\2\2\u026c\u1990\3\2\2\2\u026e\u1992")
        buf.write("\3\2\2\2\u0270\u1999\3\2\2\2\u0272\u199b\3\2\2\2\u0274")
        buf.write("\u199d\3\2\2\2\u0276\u199f\3\2\2\2\u0278\u19a1\3\2\2\2")
        buf.write("\u027a\u19a3\3\2\2\2\u027c\u19a5\3\2\2\2\u027e\u19a7\3")
        buf.write("\2\2\2\u0280\u19a9\3\2\2\2\u0282\u0284\5\4\3\2\u0283\u0282")
        buf.write("\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0286\3\2\2\2\u0285")
        buf.write("\u0287\7\u041e\2\2\u0286\u0285\3\2\2\2\u0286\u0287\3\2")
        buf.write("\2\2\u0287\u0288\3\2\2\2\u0288\u0289\7\2\2\3\u0289\3\3")
        buf.write("\2\2\2\u028a\u028c\5\6\4\2\u028b\u028d\7\u041e\2\2\u028c")
        buf.write("\u028b\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028f\3\2\2\2")
        buf.write("\u028e\u0290\7\u042e\2\2\u028f\u028e\3\2\2\2\u028f\u0290")
        buf.write("\3\2\2\2\u0290\u0293\3\2\2\2\u0291\u0293\5\b\5\2\u0292")
        buf.write("\u028a\3\2\2\2\u0292\u0291\3\2\2\2\u0293\u0296\3\2\2\2")
        buf.write("\u0294\u0292\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u029f\3")
        buf.write("\2\2\2\u0296\u0294\3\2\2\2\u0297\u029c\5\6\4\2\u0298\u029a")
        buf.write("\7\u041e\2\2\u0299\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a")
        buf.write("\u029b\3\2\2\2\u029b\u029d\7\u042e\2\2\u029c\u0299\3\2")
        buf.write("\2\2\u029c\u029d\3\2\2\2\u029d\u02a0\3\2\2\2\u029e\u02a0")
        buf.write("\5\b\5\2\u029f\u0297\3\2\2\2\u029f\u029e\3\2\2\2\u02a0")
        buf.write("\5\3\2\2\2\u02a1\u02a9\5\n\6\2\u02a2\u02a9\5\f\7\2\u02a3")
        buf.write("\u02a9\5\16\b\2\u02a4\u02a9\5\20\t\2\u02a5\u02a9\5\22")
        buf.write("\n\2\u02a6\u02a9\5\26\f\2\u02a7\u02a9\5\30\r\2\u02a8\u02a1")
        buf.write("\3\2\2\2\u02a8\u02a2\3\2\2\2\u02a8\u02a3\3\2\2\2\u02a8")
        buf.write("\u02a4\3\2\2\2\u02a8\u02a5\3\2\2\2\u02a8\u02a6\3\2\2\2")
        buf.write("\u02a8\u02a7\3\2\2\2\u02a9\7\3\2\2\2\u02aa\u02ab\7\u042e")
        buf.write("\2\2\u02ab\t\3\2\2\2\u02ac\u02d0\5\32\16\2\u02ad\u02d0")
        buf.write("\5\34\17\2\u02ae\u02d0\5\36\20\2\u02af\u02d0\5 \21\2\u02b0")
        buf.write("\u02d0\5\"\22\2\u02b1\u02d0\5$\23\2\u02b2\u02d0\5&\24")
        buf.write("\2\u02b3\u02d0\5(\25\2\u02b4\u02d0\5*\26\2\u02b5\u02d0")
        buf.write("\5,\27\2\u02b6\u02d0\5.\30\2\u02b7\u02d0\5\60\31\2\u02b8")
        buf.write("\u02d0\5t;\2\u02b9\u02d0\5v<\2\u02ba\u02d0\5x=\2\u02bb")
        buf.write("\u02d0\5z>\2\u02bc\u02d0\5|?\2\u02bd\u02d0\5~@\2\u02be")
        buf.write("\u02d0\5\u0080A\2\u02bf\u02d0\5\u0082B\2\u02c0\u02d0\5")
        buf.write("\u0084C\2\u02c1\u02d0\5\u0086D\2\u02c2\u02d0\5\u008aF")
        buf.write("\2\u02c3\u02d0\5\u008cG\2\u02c4\u02d0\5\u008eH\2\u02c5")
        buf.write("\u02d0\5\u0090I\2\u02c6\u02d0\5\u0092J\2\u02c7\u02d0\5")
        buf.write("\u0094K\2\u02c8\u02d0\5\u0096L\2\u02c9\u02d0\5\u0098M")
        buf.write("\2\u02ca\u02d0\5\u009aN\2\u02cb\u02d0\5\u009cO\2\u02cc")
        buf.write("\u02d0\5\u009eP\2\u02cd\u02d0\5\u00a0Q\2\u02ce\u02d0\5")
        buf.write("\u00a4S\2\u02cf\u02ac\3\2\2\2\u02cf\u02ad\3\2\2\2\u02cf")
        buf.write("\u02ae\3\2\2\2\u02cf\u02af\3\2\2\2\u02cf\u02b0\3\2\2\2")
        buf.write("\u02cf\u02b1\3\2\2\2\u02cf\u02b2\3\2\2\2\u02cf\u02b3\3")
        buf.write("\2\2\2\u02cf\u02b4\3\2\2\2\u02cf\u02b5\3\2\2\2\u02cf\u02b6")
        buf.write("\3\2\2\2\u02cf\u02b7\3\2\2\2\u02cf\u02b8\3\2\2\2\u02cf")
        buf.write("\u02b9\3\2\2\2\u02cf\u02ba\3\2\2\2\u02cf\u02bb\3\2\2\2")
        buf.write("\u02cf\u02bc\3\2\2\2\u02cf\u02bd\3\2\2\2\u02cf\u02be\3")
        buf.write("\2\2\2\u02cf\u02bf\3\2\2\2\u02cf\u02c0\3\2\2\2\u02cf\u02c1")
        buf.write("\3\2\2\2\u02cf\u02c2\3\2\2\2\u02cf\u02c3\3\2\2\2\u02cf")
        buf.write("\u02c4\3\2\2\2\u02cf\u02c5\3\2\2\2\u02cf\u02c6\3\2\2\2")
        buf.write("\u02cf\u02c7\3\2\2\2\u02cf\u02c8\3\2\2\2\u02cf\u02c9\3")
        buf.write("\2\2\2\u02cf\u02ca\3\2\2\2\u02cf\u02cb\3\2\2\2\u02cf\u02cc")
        buf.write("\3\2\2\2\u02cf\u02cd\3\2\2\2\u02cf\u02ce\3\2\2\2\u02d0")
        buf.write("\13\3\2\2\2\u02d1\u02dc\5\u00b6\\\2\u02d2\u02dc\5\u00ae")
        buf.write("X\2\u02d3\u02dc\5\u00b8]\2\u02d4\u02dc\5\u00a8U\2\u02d5")
        buf.write("\u02dc\5\u00b4[\2\u02d6\u02dc\5\u00a6T\2\u02d7\u02dc\5")
        buf.write("\u00b0Y\2\u02d8\u02dc\5\u00b2Z\2\u02d9\u02dc\5\u00aaV")
        buf.write("\2\u02da\u02dc\5\u00acW\2\u02db\u02d1\3\2\2\2\u02db\u02d2")
        buf.write("\3\2\2\2\u02db\u02d3\3\2\2\2\u02db\u02d4\3\2\2\2\u02db")
        buf.write("\u02d5\3\2\2\2\u02db\u02d6\3\2\2\2\u02db\u02d7\3\2\2\2")
        buf.write("\u02db\u02d8\3\2\2\2\u02db\u02d9\3\2\2\2\u02db\u02da\3")
        buf.write("\2\2\2\u02dc\r\3\2\2\2\u02dd\u02e7\5\u0106\u0084\2\u02de")
        buf.write("\u02e7\5\u0108\u0085\2\u02df\u02e7\5\u010a\u0086\2\u02e0")
        buf.write("\u02e7\5\u010c\u0087\2\u02e1\u02e7\5\u010e\u0088\2\u02e2")
        buf.write("\u02e7\5\u0110\u0089\2\u02e3\u02e7\5\u0112\u008a\2\u02e4")
        buf.write("\u02e7\5\u0114\u008b\2\u02e5\u02e7\5\u0116\u008c\2\u02e6")
        buf.write("\u02dd\3\2\2\2\u02e6\u02de\3\2\2\2\u02e6\u02df\3\2\2\2")
        buf.write("\u02e6\u02e0\3\2\2\2\u02e6\u02e1\3\2\2\2\u02e6\u02e2\3")
        buf.write("\2\2\2\u02e6\u02e3\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e6\u02e5")
        buf.write("\3\2\2\2\u02e7\17\3\2\2\2\u02e8\u02f8\5\u0126\u0094\2")
        buf.write("\u02e9\u02f8\5\u0128\u0095\2\u02ea\u02f8\5\u012a\u0096")
        buf.write("\2\u02eb\u02f8\5\u012c\u0097\2\u02ec\u02f8\5\u012e\u0098")
        buf.write("\2\u02ed\u02f8\5\u0130\u0099\2\u02ee\u02f8\5\u0132\u009a")
        buf.write("\2\u02ef\u02f8\5\u0134\u009b\2\u02f0\u02f8\5\u0136\u009c")
        buf.write("\2\u02f1\u02f8\5\u014e\u00a8\2\u02f2\u02f8\5\u0150\u00a9")
        buf.write("\2\u02f3\u02f8\5\u0152\u00aa\2\u02f4\u02f8\5\u0154\u00ab")
        buf.write("\2\u02f5\u02f8\5\u0156\u00ac\2\u02f6\u02f8\5\u0158\u00ad")
        buf.write("\2\u02f7\u02e8\3\2\2\2\u02f7\u02e9\3\2\2\2\u02f7\u02ea")
        buf.write("\3\2\2\2\u02f7\u02eb\3\2\2\2\u02f7\u02ec\3\2\2\2\u02f7")
        buf.write("\u02ed\3\2\2\2\u02f7\u02ee\3\2\2\2\u02f7\u02ef\3\2\2\2")
        buf.write("\u02f7\u02f0\3\2\2\2\u02f7\u02f1\3\2\2\2\u02f7\u02f2\3")
        buf.write("\2\2\2\u02f7\u02f3\3\2\2\2\u02f7\u02f4\3\2\2\2\u02f7\u02f5")
        buf.write("\3\2\2\2\u02f7\u02f6\3\2\2\2\u02f8\21\3\2\2\2\u02f9\u02fd")
        buf.write("\5\u015a\u00ae\2\u02fa\u02fd\5\u015c\u00af\2\u02fb\u02fd")
        buf.write("\5\u015e\u00b0\2\u02fc\u02f9\3\2\2\2\u02fc\u02fa\3\2\2")
        buf.write("\2\u02fc\u02fb\3\2\2\2\u02fd\23\3\2\2\2\u02fe\u0309\5")
        buf.write("\u0162\u00b2\2\u02ff\u0309\5\u0164\u00b3\2\u0300\u0309")
        buf.write("\5\u0166\u00b4\2\u0301\u0309\5\u016a\u00b6\2\u0302\u0309")
        buf.write("\5\u016c\u00b7\2\u0303\u0309\5\u016e\u00b8\2\u0304\u0309")
        buf.write("\5\u0172\u00ba\2\u0305\u0309\5\u0168\u00b5\2\u0306\u0309")
        buf.write("\5\u0170\u00b9\2\u0307\u0309\5\u0174\u00bb\2\u0308\u02fe")
        buf.write("\3\2\2\2\u0308\u02ff\3\2\2\2\u0308\u0300\3\2\2\2\u0308")
        buf.write("\u0301\3\2\2\2\u0308\u0302\3\2\2\2\u0308\u0303\3\2\2\2")
        buf.write("\u0308\u0304\3\2\2\2\u0308\u0305\3\2\2\2\u0308\u0306\3")
        buf.write("\2\2\2\u0308\u0307\3\2\2\2\u0309\25\3\2\2\2\u030a\u0324")
        buf.write("\5\u0186\u00c4\2\u030b\u0324\5\u0188\u00c5\2\u030c\u0324")
        buf.write("\5\u018a\u00c6\2\u030d\u0324\5\u018c\u00c7\2\u030e\u0324")
        buf.write("\5\u018e\u00c8\2\u030f\u0324\5\u0190\u00c9\2\u0310\u0324")
        buf.write("\5\u0192\u00ca\2\u0311\u0324\5\u0194\u00cb\2\u0312\u0324")
        buf.write("\5\u01ac\u00d7\2\u0313\u0324\5\u01ae\u00d8\2\u0314\u0324")
        buf.write("\5\u01b0\u00d9\2\u0315\u0324\5\u01b2\u00da\2\u0316\u0324")
        buf.write("\5\u01b4\u00db\2\u0317\u0324\5\u01b8\u00dd\2\u0318\u0324")
        buf.write("\5\u01ba\u00de\2\u0319\u0324\5\u01bc\u00df\2\u031a\u0324")
        buf.write("\5\u01be\u00e0\2\u031b\u0324\5\u01c0\u00e1\2\u031c\u0324")
        buf.write("\5\u01ce\u00e8\2\u031d\u0324\5\u01d0\u00e9\2\u031e\u0324")
        buf.write("\5\u01d2\u00ea\2\u031f\u0324\5\u01d4\u00eb\2\u0320\u0324")
        buf.write("\5\u01d6\u00ec\2\u0321\u0324\5\u01d8\u00ed\2\u0322\u0324")
        buf.write("\5\u01da\u00ee\2\u0323\u030a\3\2\2\2\u0323\u030b\3\2\2")
        buf.write("\2\u0323\u030c\3\2\2\2\u0323\u030d\3\2\2\2\u0323\u030e")
        buf.write("\3\2\2\2\u0323\u030f\3\2\2\2\u0323\u0310\3\2\2\2\u0323")
        buf.write("\u0311\3\2\2\2\u0323\u0312\3\2\2\2\u0323\u0313\3\2\2\2")
        buf.write("\u0323\u0314\3\2\2\2\u0323\u0315\3\2\2\2\u0323\u0316\3")
        buf.write("\2\2\2\u0323\u0317\3\2\2\2\u0323\u0318\3\2\2\2\u0323\u0319")
        buf.write("\3\2\2\2\u0323\u031a\3\2\2\2\u0323\u031b\3\2\2\2\u0323")
        buf.write("\u031c\3\2\2\2\u0323\u031d\3\2\2\2\u0323\u031e\3\2\2\2")
        buf.write("\u0323\u031f\3\2\2\2\u0323\u0320\3\2\2\2\u0323\u0321\3")
        buf.write("\2\2\2\u0323\u0322\3\2\2\2\u0324\27\3\2\2\2\u0325\u032d")
        buf.write("\5\u01e4\u00f3\2\u0326\u032d\5\u01e6\u00f4\2\u0327\u032d")
        buf.write("\5\u01e8\u00f5\2\u0328\u032d\5\u01ea\u00f6\2\u0329\u032d")
        buf.write("\5\u01ec\u00f7\2\u032a\u032d\5\u01ee\u00f8\2\u032b\u032d")
        buf.write("\5\u01f2\u00fa\2\u032c\u0325\3\2\2\2\u032c\u0326\3\2\2")
        buf.write("\2\u032c\u0327\3\2\2\2\u032c\u0328\3\2\2\2\u032c\u0329")
        buf.write("\3\2\2\2\u032c\u032a\3\2\2\2\u032c\u032b\3\2\2\2\u032d")
        buf.write("\31\3\2\2\2\u032e\u032f\7\"\2\2\u032f\u0331\t\2\2\2\u0330")
        buf.write("\u0332\5\u024a\u0126\2\u0331\u0330\3\2\2\2\u0331\u0332")
        buf.write("\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0337\5\u0212\u010a")
        buf.write("\2\u0334\u0336\5\62\32\2\u0335\u0334\3\2\2\2\u0336\u0339")
        buf.write("\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338")
        buf.write("\33\3\2\2\2\u0339\u0337\3\2\2\2\u033a\u033c\7\"\2\2\u033b")
        buf.write("\u033d\5\64\33\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2\2")
        buf.write("\2\u033d\u033e\3\2\2\2\u033e\u0340\7\u0180\2\2\u033f\u0341")
        buf.write("\5\u024a\u0126\2\u0340\u033f\3\2\2\2\u0340\u0341\3\2\2")
        buf.write("\2\u0341\u0342\3\2\2\2\u0342\u0343\5\u01f8\u00fd\2\u0343")
        buf.write("\u0344\7o\2\2\u0344\u0345\7\u022b\2\2\u0345\u034c\5\66")
        buf.write("\34\2\u0346\u0347\7o\2\2\u0347\u0349\7\u0157\2\2\u0348")
        buf.write("\u034a\7k\2\2\u0349\u0348\3\2\2\2\u0349\u034a\3\2\2\2")
        buf.write("\u034a\u034b\3\2\2\2\u034b\u034d\7\u0203\2\2\u034c\u0346")
        buf.write("\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034f\3\2\2\2\u034e")
        buf.write("\u0350\5> \2\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u0353\3\2\2\2\u0351\u0352\7\u0154\2\2\u0352\u0354\7\u043a")
        buf.write("\2\2\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0356\7\u0172\2\2\u0356\u0357\5\u0160\u00b1")
        buf.write("\2\u0357\35\3\2\2\2\u0358\u035a\7\"\2\2\u0359\u035b\t")
        buf.write("\3\2\2\u035a\u0359\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035d")
        buf.write("\3\2\2\2\u035c\u035e\t\4\2\2\u035d\u035c\3\2\2\2\u035d")
        buf.write("\u035e\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\7M\2\2")
        buf.write("\u0360\u0362\5\u0212\u010a\2\u0361\u0363\5@!\2\u0362\u0361")
        buf.write("\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364\3\2\2\2\u0364")
        buf.write("\u0365\7o\2\2\u0365\u0366\5\u01fa\u00fe\2\u0366\u036a")
        buf.write("\5\u0236\u011c\2\u0367\u0369\5B\"\2\u0368\u0367\3\2\2")
        buf.write("\2\u0369\u036c\3\2\2\2\u036a\u0368\3\2\2\2\u036a\u036b")
        buf.write("\3\2\2\2\u036b\u0379\3\2\2\2\u036c\u036a\3\2\2\2\u036d")
        buf.write("\u036f\7\u0135\2\2\u036e\u0370\7\u0422\2\2\u036f\u036e")
        buf.write("\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0371\3\2\2\2\u0371")
        buf.write("\u0378\t\5\2\2\u0372\u0374\7b\2\2\u0373\u0375\7\u0422")
        buf.write("\2\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376")
        buf.write("\3\2\2\2\u0376\u0378\t\6\2\2\u0377\u036d\3\2\2\2\u0377")
        buf.write("\u0372\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377\3\2\2\2")
        buf.write("\u0379\u037a\3\2\2\2\u037a\37\3\2\2\2\u037b\u0379\3\2")
        buf.write("\2\2\u037c\u037d\7\"\2\2\u037d\u037e\7\u01b7\2\2\u037e")
        buf.write("\u037f\7G\2\2\u037f\u0380\5\u0212\u010a\2\u0380\u0381")
        buf.write("\7\t\2\2\u0381\u0382\7\u025f\2\2\u0382\u0388\7\u043a\2")
        buf.write("\2\u0383\u0385\7\u01a2\2\2\u0384\u0386\7\u0422\2\2\u0385")
        buf.write("\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387\3\2\2\2")
        buf.write("\u0387\u0389\5\u021a\u010e\2\u0388\u0383\3\2\2\2\u0388")
        buf.write("\u0389\3\2\2\2\u0389\u038f\3\2\2\2\u038a\u038c\7\u0260")
        buf.write("\2\2\u038b\u038d\7\u0422\2\2\u038c\u038b\3\2\2\2\u038c")
        buf.write("\u038d\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u0390\5\u021a")
        buf.write("\u010e\2\u038f\u038a\3\2\2\2\u038f\u0390\3\2\2\2\u0390")
        buf.write("\u0396\3\2\2\2\u0391\u0393\7\u020d\2\2\u0392\u0394\7\u0422")
        buf.write("\2\2\u0393\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395")
        buf.write("\3\2\2\2\u0395\u0397\5\u021a\u010e\2\u0396\u0391\3\2\2")
        buf.write("\2\u0396\u0397\3\2\2\2\u0397\u039d\3\2\2\2\u0398\u039a")
        buf.write("\7\u01e6\2\2\u0399\u039b\7\u0422\2\2\u039a\u0399\3\2\2")
        buf.write("\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e")
        buf.write("\5\u0212\u010a\2\u039d\u0398\3\2\2\2\u039d\u039e\3\2\2")
        buf.write("\2\u039e\u03a0\3\2\2\2\u039f\u03a1\7\u026e\2\2\u03a0\u039f")
        buf.write("\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a7\3\2\2\2\u03a2")
        buf.write("\u03a4\7\u0154\2\2\u03a3\u03a5\7\u0422\2\2\u03a4\u03a3")
        buf.write("\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6")
        buf.write("\u03a8\7\u043a\2\2\u03a7\u03a2\3\2\2\2\u03a7\u03a8\3\2")
        buf.write("\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03ab\7\u017a\2\2\u03aa")
        buf.write("\u03ac\7\u0422\2\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2")
        buf.write("\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\5\u0208\u0105\2\u03ae")
        buf.write("!\3\2\2\2\u03af\u03b1\7\"\2\2\u03b0\u03b2\5\64\33\2\u03b1")
        buf.write("\u03b0\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2")
        buf.write("\u03b3\u03b4\7z\2\2\u03b4\u03b5\5\u01f8\u00fd\2\u03b5")
        buf.write("\u03b7\7\u042b\2\2\u03b6\u03b8\5D#\2\u03b7\u03b6\3\2\2")
        buf.write("\2\u03b7\u03b8\3\2\2\2\u03b8\u03bd\3\2\2\2\u03b9\u03ba")
        buf.write("\7\u042d\2\2\u03ba\u03bc\5D#\2\u03bb\u03b9\3\2\2\2\u03bc")
        buf.write("\u03bf\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2")
        buf.write("\u03be\u03c0\3\2\2\2\u03bf\u03bd\3\2\2\2\u03c0\u03c4\7")
        buf.write("\u042c\2\2\u03c1\u03c3\5H%\2\u03c2\u03c1\3\2\2\2\u03c3")
        buf.write("\u03c6\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c4\u03c5\3\2\2\2")
        buf.write("\u03c5\u03c7\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c7\u03c8\5")
        buf.write("\u0160\u00b1\2\u03c8#\3\2\2\2\u03c9\u03cb\7\"\2\2\u03ca")
        buf.write("\u03cc\5\64\33\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc\3\2\2")
        buf.write("\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce\7\u0194\2\2\u03ce\u03cf")
        buf.write("\5\u01f8\u00fd\2\u03cf\u03d1\7\u042b\2\2\u03d0\u03d2\5")
        buf.write("F$\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d7")
        buf.write("\3\2\2\2\u03d3\u03d4\7\u042d\2\2\u03d4\u03d6\5F$\2\u03d5")
        buf.write("\u03d3\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5\3\2\2\2")
        buf.write("\u03d7\u03d8\3\2\2\2\u03d8\u03da\3\2\2\2\u03d9\u03d7\3")
        buf.write("\2\2\2\u03da\u03db\7\u042c\2\2\u03db\u03dc\7\u0222\2\2")
        buf.write("\u03dc\u03e0\5\u0226\u0114\2\u03dd\u03df\5H%\2\u03de\u03dd")
        buf.write("\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0")
        buf.write("\u03e1\3\2\2\2\u03e1\u03e5\3\2\2\2\u03e2\u03e0\3\2\2\2")
        buf.write("\u03e3\u03e6\5\u0160\u00b1\2\u03e4\u03e6\5\u0170\u00b9")
        buf.write("\2\u03e5\u03e3\3\2\2\2\u03e5\u03e4\3\2\2\2\u03e6%\3\2")
        buf.write("\2\2\u03e7\u03e8\7\"\2\2\u03e8\u03e9\7\u022d\2\2\u03e9")
        buf.write("\u03ea\5\u0212\u010a\2\u03ea\u03eb\7A\2\2\u03eb\u03ec")
        buf.write("\7\u0167\2\2\u03ec\u03ed\7\u0272\2\2\u03ed\u03ee\t\7\2")
        buf.write("\2\u03ee\u03ef\7\u01f3\2\2\u03ef\u03f0\7\u042b\2\2\u03f0")
        buf.write("\u03f5\5J&\2\u03f1\u03f2\7\u042d\2\2\u03f2\u03f4\5J&\2")
        buf.write("\u03f3\u03f1\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5\u03f3\3")
        buf.write("\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f8\3\2\2\2\u03f7\u03f5")
        buf.write("\3\2\2\2\u03f8\u03f9\7\u042c\2\2\u03f9\'\3\2\2\2\u03fa")
        buf.write("\u03fc\7\"\2\2\u03fb\u03fd\7\u0256\2\2\u03fc\u03fb\3\2")
        buf.write("\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u0400")
        buf.write("\7\u009f\2\2\u03ff\u0401\5\u024a\u0126\2\u0400\u03ff\3")
        buf.write("\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u040a")
        buf.write("\5\u01fa\u00fe\2\u0403\u0404\7]\2\2\u0404\u040b\5\u01fa")
        buf.write("\u00fe\2\u0405\u0406\7\u042b\2\2\u0406\u0407\7]\2\2\u0407")
        buf.write("\u0408\5\u01fa\u00fe\2\u0408\u0409\7\u042c\2\2\u0409\u040b")
        buf.write("\3\2\2\2\u040a\u0403\3\2\2\2\u040a\u0405\3\2\2\2\u040b")
        buf.write("\u0449\3\2\2\2\u040c\u040e\7\"\2\2\u040d\u040f\7\u0256")
        buf.write("\2\2\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410")
        buf.write("\3\2\2\2\u0410\u0412\7\u009f\2\2\u0411\u0413\5\u024a\u0126")
        buf.write("\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0414")
        buf.write("\3\2\2\2\u0414\u0416\5\u01fa\u00fe\2\u0415\u0417\5L\'")
        buf.write("\2\u0416\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0422")
        buf.write("\3\2\2\2\u0418\u041f\5^\60\2\u0419\u041b\7\u042d\2\2\u041a")
        buf.write("\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2\2")
        buf.write("\u041c\u041e\5^\60\2\u041d\u041a\3\2\2\2\u041e\u0421\3")
        buf.write("\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0423")
        buf.write("\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0418\3\2\2\2\u0422")
        buf.write("\u0423\3\2\2\2\u0423\u0425\3\2\2\2\u0424\u0426\5d\63\2")
        buf.write("\u0425\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0428\3")
        buf.write("\2\2\2\u0427\u0429\t\b\2\2\u0428\u0427\3\2\2\2\u0428\u0429")
        buf.write("\3\2\2\2\u0429\u042b\3\2\2\2\u042a\u042c\7\17\2\2\u042b")
        buf.write("\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d\3\2\2\2")
        buf.write("\u042d\u042e\5\u00b6\\\2\u042e\u0449\3\2\2\2\u042f\u0431")
        buf.write("\7\"\2\2\u0430\u0432\7\u0256\2\2\u0431\u0430\3\2\2\2\u0431")
        buf.write("\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0435\7\u009f")
        buf.write("\2\2\u0434\u0436\5\u024a\u0126\2\u0435\u0434\3\2\2\2\u0435")
        buf.write("\u0436\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0438\5\u01fa")
        buf.write("\u00fe\2\u0438\u0443\5L\'\2\u0439\u0440\5^\60\2\u043a")
        buf.write("\u043c\7\u042d\2\2\u043b\u043a\3\2\2\2\u043b\u043c\3\2")
        buf.write("\2\2\u043c\u043d\3\2\2\2\u043d\u043f\5^\60\2\u043e\u043b")
        buf.write("\3\2\2\2\u043f\u0442\3\2\2\2\u0440\u043e\3\2\2\2\u0440")
        buf.write("\u0441\3\2\2\2\u0441\u0444\3\2\2\2\u0442\u0440\3\2\2\2")
        buf.write("\u0443\u0439\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0446\3")
        buf.write("\2\2\2\u0445\u0447\5d\63\2\u0446\u0445\3\2\2\2\u0446\u0447")
        buf.write("\3\2\2\2\u0447\u0449\3\2\2\2\u0448\u03fa\3\2\2\2\u0448")
        buf.write("\u040c\3\2\2\2\u0448\u042f\3\2\2\2\u0449)\3\2\2\2\u044a")
        buf.write("\u044b\7\"\2\2\u044b\u044c\7\u0254\2\2\u044c\u044d\5\u0212")
        buf.write("\u010a\2\u044d\u044e\7\t\2\2\u044e\u044f\7\u0168\2\2\u044f")
        buf.write("\u0453\7\u043a\2\2\u0450\u0451\7\u018c\2\2\u0451\u0452")
        buf.write("\7\u0422\2\2\u0452\u0454\5\u021a\u010e\2\u0453\u0450\3")
        buf.write("\2\2\2\u0453\u0454\3\2\2\2\u0454\u045a\3\2\2\2\u0455\u0457")
        buf.write("\7\u017a\2\2\u0456\u0458\7\u0422\2\2\u0457\u0456\3\2\2")
        buf.write("\2\u0457\u0458\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045b")
        buf.write("\5\u0208\u0105\2\u045a\u0455\3\2\2\2\u045a\u045b\3\2\2")
        buf.write("\2\u045b+\3\2\2\2\u045c\u045d\7\"\2\2\u045d\u045e\7\u0254")
        buf.write("\2\2\u045e\u045f\5\u0212\u010a\2\u045f\u0460\7\t\2\2\u0460")
        buf.write("\u0461\7\u0168\2\2\u0461\u0462\7\u043a\2\2\u0462\u0463")
        buf.write("\7\u00ad\2\2\u0463\u0464\7\u01b7\2\2\u0464\u0465\7G\2")
        buf.write("\2\u0465\u046b\5\u0212\u010a\2\u0466\u0468\7\u0188\2\2")
        buf.write("\u0467\u0469\7\u0422\2\2\u0468\u0467\3\2\2\2\u0468\u0469")
        buf.write("\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046c\5\u021a\u010e")
        buf.write("\2\u046b\u0466\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u0472")
        buf.write("\3\2\2\2\u046d\u046f\7\u01a2\2\2\u046e\u0470\7\u0422\2")
        buf.write("\2\u046f\u046e\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u0471")
        buf.write("\3\2\2\2\u0471\u0473\5\u021a\u010e\2\u0472\u046d\3\2\2")
        buf.write("\2\u0472\u0473\3\2\2\2\u0473\u0479\3\2\2\2\u0474\u0476")
        buf.write("\7\u013a\2\2\u0475\u0477\7\u0422\2\2\u0476\u0475\3\2\2")
        buf.write("\2\u0476\u0477\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u047a")
        buf.write("\5\u021a\u010e\2\u0479\u0474\3\2\2\2\u0479\u047a\3\2\2")
        buf.write("\2\u047a\u0480\3\2\2\2\u047b\u047d\7\u01d1\2\2\u047c\u047e")
        buf.write("\7\u0422\2\2\u047d\u047c\3\2\2\2\u047d\u047e\3\2\2\2\u047e")
        buf.write("\u047f\3\2\2\2\u047f\u0481\5\u021a\u010e\2\u0480\u047b")
        buf.write("\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0487\3\2\2\2\u0482")
        buf.write("\u0484\7\u01e6\2\2\u0483\u0485\7\u0422\2\2\u0484\u0483")
        buf.write("\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486\3\2\2\2\u0486")
        buf.write("\u0488\5\u0212\u010a\2\u0487\u0482\3\2\2\2\u0487\u0488")
        buf.write("\3\2\2\2\u0488\u048a\3\2\2\2\u0489\u048b\7\u026e\2\2\u048a")
        buf.write("\u0489\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u0491\3\2\2\2")
        buf.write("\u048c\u048e\7\u0154\2\2\u048d\u048f\7\u0422\2\2\u048e")
        buf.write("\u048d\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0490\3\2\2\2")
        buf.write("\u0490\u0492\7\u043a\2\2\u0491\u048c\3\2\2\2\u0491\u0492")
        buf.write("\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495\7\u017a\2\2\u0494")
        buf.write("\u0496\7\u0422\2\2\u0495\u0494\3\2\2\2\u0495\u0496\3\2")
        buf.write("\2\2\u0496\u0497\3\2\2\2\u0497\u0498\5\u0208\u0105\2\u0498")
        buf.write("-\3\2\2\2\u0499\u049b\7\"\2\2\u049a\u049c\5\64\33\2\u049b")
        buf.write("\u049a\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049d\3\2\2\2")
        buf.write("\u049d\u049e\7\u00a4\2\2\u049e\u049f\5\u01f8\u00fd\2\u049f")
        buf.write("\u04a0\t\t\2\2\u04a0\u04a1\t\n\2\2\u04a1\u04a2\7o\2\2")
        buf.write("\u04a2\u04a3\5\u01fa\u00fe\2\u04a3\u04a4\7?\2\2\u04a4")
        buf.write("\u04a5\7\64\2\2\u04a5\u04a8\7\u0227\2\2\u04a6\u04a7\t")
        buf.write("\13\2\2\u04a7\u04a9\5\u01f8\u00fd\2\u04a8\u04a6\3\2\2")
        buf.write("\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab")
        buf.write("\5\u0160\u00b1\2\u04ab/\3\2\2\2\u04ac\u04af\7\"\2\2\u04ad")
        buf.write("\u04ae\7s\2\2\u04ae\u04b0\7\u0084\2\2\u04af\u04ad\3\2")
        buf.write("\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b4\3\2\2\2\u04b1\u04b2")
        buf.write("\7\u0135\2\2\u04b2\u04b3\7\u0422\2\2\u04b3\u04b5\t\f\2")
        buf.write("\2\u04b4\u04b1\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b7")
        buf.write("\3\2\2\2\u04b6\u04b8\5\64\33\2\u04b7\u04b6\3\2\2\2\u04b7")
        buf.write("\u04b8\3\2\2\2\u04b8\u04bc\3\2\2\2\u04b9\u04ba\7\u0094")
        buf.write("\2\2\u04ba\u04bb\7\u022c\2\2\u04bb\u04bd\t\r\2\2\u04bc")
        buf.write("\u04b9\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04be\3\2\2\2")
        buf.write("\u04be\u04bf\7\u026b\2\2\u04bf\u04c4\5\u01f8\u00fd\2\u04c0")
        buf.write("\u04c1\7\u042b\2\2\u04c1\u04c2\5\u0232\u011a\2\u04c2\u04c3")
        buf.write("\7\u042c\2\2\u04c3\u04c5\3\2\2\2\u04c4\u04c0\3\2\2\2\u04c4")
        buf.write("\u04c5\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c7\7\17\2")
        buf.write("\2\u04c7\u04ce\5\u00b6\\\2\u04c8\u04ca\7\u00b3\2\2\u04c9")
        buf.write("\u04cb\t\16\2\2\u04ca\u04c9\3\2\2\2\u04ca\u04cb\3\2\2")
        buf.write("\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd\7\33\2\2\u04cd\u04cf")
        buf.write("\7q\2\2\u04ce\u04c8\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf")
        buf.write("\61\3\2\2\2\u04d0\u04d2\7*\2\2\u04d1\u04d0\3\2\2\2\u04d1")
        buf.write("\u04d2\3\2\2\2\u04d2\u04d6\3\2\2\2\u04d3\u04d4\7\32\2")
        buf.write("\2\u04d4\u04d7\7\u008f\2\2\u04d5\u04d7\7\u030a\2\2\u04d6")
        buf.write("\u04d3\3\2\2\2\u04d6\u04d5\3\2\2\2\u04d7\u04d9\3\2\2\2")
        buf.write("\u04d8\u04da\7\u0422\2\2\u04d9\u04d8\3\2\2\2\u04d9\u04da")
        buf.write("\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04de\5\u0204\u0103")
        buf.write("\2\u04dc\u04de\7*\2\2\u04dd\u04db\3\2\2\2\u04dd\u04dc")
        buf.write("\3\2\2\2\u04de\u04e8\3\2\2\2\u04df\u04e1\7*\2\2\u04e0")
        buf.write("\u04df\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\3\2\2\2")
        buf.write("\u04e2\u04e4\7\34\2\2\u04e3\u04e5\7\u0422\2\2\u04e4\u04e3")
        buf.write("\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6")
        buf.write("\u04e8\5\u0206\u0104\2\u04e7\u04d1\3\2\2\2\u04e7\u04e0")
        buf.write("\3\2\2\2\u04e8\63\3\2\2\2\u04e9\u04ea\7\u016b\2\2\u04ea")
        buf.write("\u04f1\7\u0422\2\2\u04eb\u04f2\5\u0200\u0101\2\u04ec\u04ef")
        buf.write("\7%\2\2\u04ed\u04ee\7\u042b\2\2\u04ee\u04f0\7\u042c\2")
        buf.write("\2\u04ef\u04ed\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f2")
        buf.write("\3\2\2\2\u04f1\u04eb\3\2\2\2\u04f1\u04ec\3\2\2\2\u04f2")
        buf.write("\65\3\2\2\2\u04f3\u04f4\7\u0137\2\2\u04f4\u04f8\58\35")
        buf.write("\2\u04f5\u04f7\5:\36\2\u04f6\u04f5\3\2\2\2\u04f7\u04fa")
        buf.write("\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9")
        buf.write("\u0516\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fb\u04fe\7\u0182")
        buf.write("\2\2\u04fc\u04ff\5\u0218\u010d\2\u04fd\u04ff\5\u0260\u0131")
        buf.write("\2\u04fe\u04fc\3\2\2\2\u04fe\u04fd\3\2\2\2\u04ff\u0500")
        buf.write("\3\2\2\2\u0500\u0509\5<\37\2\u0501\u0502\7\u0243\2\2\u0502")
        buf.write("\u0506\58\35\2\u0503\u0505\5:\36\2\u0504\u0503\3\2\2\2")
        buf.write("\u0505\u0508\3\2\2\2\u0506\u0504\3\2\2\2\u0506\u0507\3")
        buf.write("\2\2\2\u0507\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0509\u0501")
        buf.write("\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u0513\3\2\2\2\u050b")
        buf.write("\u050c\7\u0179\2\2\u050c\u0510\58\35\2\u050d\u050f\5:")
        buf.write("\36\2\u050e\u050d\3\2\2\2\u050f\u0512\3\2\2\2\u0510\u050e")
        buf.write("\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0514\3\2\2\2\u0512")
        buf.write("\u0510\3\2\2\2\u0513\u050b\3\2\2\2\u0513\u0514\3\2\2\2")
        buf.write("\u0514\u0516\3\2\2\2\u0515\u04f3\3\2\2\2\u0515\u04fb\3")
        buf.write("\2\2\2\u0516\67\3\2\2\2\u0517\u051c\7\u0120\2\2\u0518")
        buf.write("\u051c\5\u021c\u010f\2\u0519\u051c\5\u0218\u010d\2\u051a")
        buf.write("\u051c\5\u0260\u0131\2\u051b\u0517\3\2\2\2\u051b\u0518")
        buf.write("\3\2\2\2\u051b\u0519\3\2\2\2\u051b\u051a\3\2\2\2\u051c")
        buf.write("9\3\2\2\2\u051d\u051e\7\u041d\2\2\u051e\u0521\7R\2\2\u051f")
        buf.write("\u0522\5\u0218\u010d\2\u0520\u0522\5\u0260\u0131\2\u0521")
        buf.write("\u051f\3\2\2\2\u0521\u0520\3\2\2\2\u0522\u0523\3\2\2\2")
        buf.write("\u0523\u0524\5<\37\2\u0524;\3\2\2\2\u0525\u0533\5\u0278")
        buf.write("\u013d\2\u0526\u0533\7\u00d0\2\2\u0527\u0533\7\u00e3\2")
        buf.write("\2\u0528\u0533\7\u00e4\2\2\u0529\u0533\7\u00e5\2\2\u052a")
        buf.write("\u0533\7\u00e6\2\2\u052b\u0533\7\u00e7\2\2\u052c\u0533")
        buf.write("\7\u00e8\2\2\u052d\u0533\7\u00e9\2\2\u052e\u0533\7\u00ea")
        buf.write("\2\2\u052f\u0533\7\u00eb\2\2\u0530\u0533\7\u00ec\2\2\u0531")
        buf.write("\u0533\7\u00ed\2\2\u0532\u0525\3\2\2\2\u0532\u0526\3\2")
        buf.write("\2\2\u0532\u0527\3\2\2\2\u0532\u0528\3\2\2\2\u0532\u0529")
        buf.write("\3\2\2\2\u0532\u052a\3\2\2\2\u0532\u052b\3\2\2\2\u0532")
        buf.write("\u052c\3\2\2\2\u0532\u052d\3\2\2\2\u0532\u052e\3\2\2\2")
        buf.write("\u0532\u052f\3\2\2\2\u0532\u0530\3\2\2\2\u0532\u0531\3")
        buf.write("\2\2\2\u0533=\3\2\2\2\u0534\u053a\7\u0176\2\2\u0535\u053a")
        buf.write("\7\u016f\2\2\u0536\u0537\7\u016f\2\2\u0537\u0538\7o\2")
        buf.write("\2\u0538\u053a\7\u0233\2\2\u0539\u0534\3\2\2\2\u0539\u0535")
        buf.write("\3\2\2\2\u0539\u0536\3\2\2\2\u053a?\3\2\2\2\u053b\u053c")
        buf.write("\7\u00ae\2\2\u053c\u053d\t\17\2\2\u053dA\3\2\2\2\u053e")
        buf.write("\u0540\7\u01af\2\2\u053f\u0541\7\u0422\2\2\u0540\u053f")
        buf.write("\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0542\3\2\2\2\u0542")
        buf.write("\u054c\5\u021a\u010e\2\u0543\u054c\5@!\2\u0544\u0545\7")
        buf.write("\u00b3\2\2\u0545\u0546\7\u01f7\2\2\u0546\u054c\5\u0212")
        buf.write("\u010a\2\u0547\u0548\7\u0154\2\2\u0548\u054c\7\u043a\2")
        buf.write("\2\u0549\u054c\7\u01a7\2\2\u054a\u054c\7\u026d\2\2\u054b")
        buf.write("\u053e\3\2\2\2\u054b\u0543\3\2\2\2\u054b\u0544\3\2\2\2")
        buf.write("\u054b\u0547\3\2\2\2\u054b\u0549\3\2\2\2\u054b\u054a\3")
        buf.write("\2\2\2\u054cC\3\2\2\2\u054d\u054f\t\20\2\2\u054e\u054d")
        buf.write("\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\3\2\2\2\u0550")
        buf.write("\u0551\5\u0212\u010a\2\u0551\u0552\5\u0226\u0114\2\u0552")
        buf.write("E\3\2\2\2\u0553\u0554\5\u0212\u010a\2\u0554\u0555\5\u0226")
        buf.write("\u0114\2\u0555G\3\2\2\2\u0556\u0557\7\u0154\2\2\u0557")
        buf.write("\u056e\7\u043a\2\2\u0558\u0559\7\u01b0\2\2\u0559\u056e")
        buf.write("\7\u0094\2\2\u055a\u055c\7k\2\2\u055b\u055a\3\2\2\2\u055b")
        buf.write("\u055c\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u056e\7/\2\2")
        buf.write("\u055e\u055f\7\u0161\2\2\u055f\u0569\7\u0094\2\2\u0560")
        buf.write("\u0561\7\u01e5\2\2\u0561\u0569\7\u0094\2\2\u0562\u0563")
        buf.write("\7~\2\2\u0563\u0564\7\u0094\2\2\u0564\u0569\7\u0167\2")
        buf.write("\2\u0565\u0566\7i\2\2\u0566\u0567\7\u0094\2\2\u0567\u0569")
        buf.write("\7\u0167\2\2\u0568\u055e\3\2\2\2\u0568\u0560\3\2\2\2\u0568")
        buf.write("\u0562\3\2\2\2\u0568\u0565\3\2\2\2\u0569\u056e\3\2\2\2")
        buf.write("\u056a\u056b\7\u0094\2\2\u056b\u056c\7\u022c\2\2\u056c")
        buf.write("\u056e\t\r\2\2\u056d\u0556\3\2\2\2\u056d\u0558\3\2\2\2")
        buf.write("\u056d\u055b\3\2\2\2\u056d\u0568\3\2\2\2\u056d\u056a\3")
        buf.write("\2\2\2\u056eI\3\2\2\2\u056f\u0570\7\u019c\2\2\u0570\u057e")
        buf.write("\7\u043a\2\2\u0571\u0572\7\'\2\2\u0572\u057e\7\u043a\2")
        buf.write("\2\u0573\u0574\7\u0265\2\2\u0574\u057e\7\u043a\2\2\u0575")
        buf.write("\u0576\7\u01fb\2\2\u0576\u057e\7\u043a\2\2\u0577\u0578")
        buf.write("\7\u0236\2\2\u0578\u057e\7\u043a\2\2\u0579\u057a\7\u01f4")
        buf.write("\2\2\u057a\u057e\7\u043a\2\2\u057b\u057c\7\u0200\2\2\u057c")
        buf.write("\u057e\5\u0218\u010d\2\u057d\u056f\3\2\2\2\u057d\u0571")
        buf.write("\3\2\2\2\u057d\u0573\3\2\2\2\u057d\u0575\3\2\2\2\u057d")
        buf.write("\u0577\3\2\2\2\u057d\u0579\3\2\2\2\u057d\u057b\3\2\2\2")
        buf.write("\u057eK\3\2\2\2\u057f\u0580\7\u042b\2\2\u0580\u0585\5")
        buf.write("N(\2\u0581\u0582\7\u042d\2\2\u0582\u0584\5N(\2\u0583\u0581")
        buf.write("\3\2\2\2\u0584\u0587\3\2\2\2\u0585\u0583\3\2\2\2\u0585")
        buf.write("\u0586\3\2\2\2\u0586\u0588\3\2\2\2\u0587\u0585\3\2\2\2")
        buf.write("\u0588\u0589\7\u042c\2\2\u0589M\3\2\2\2\u058a\u058b\5")
        buf.write("\u0212\u010a\2\u058b\u058c\5P)\2\u058c\u0590\3\2\2\2\u058d")
        buf.write("\u0590\5T+\2\u058e\u0590\5\\/\2\u058f\u058a\3\2\2\2\u058f")
        buf.write("\u058d\3\2\2\2\u058f\u058e\3\2\2\2\u0590O\3\2\2\2\u0591")
        buf.write("\u0595\5\u0226\u0114\2\u0592\u0594\5R*\2\u0593\u0592\3")
        buf.write("\2\2\2\u0594\u0597\3\2\2\2\u0595\u0593\3\2\2\2\u0595\u0596")
        buf.write("\3\2\2\2\u0596Q\3\2\2\2\u0597\u0595\3\2\2\2\u0598\u05ce")
        buf.write("\5\u0222\u0112\2\u0599\u059a\7*\2\2\u059a\u05ce\5\u0242")
        buf.write("\u0122\2\u059b\u05ce\7\u026d\2\2\u059c\u05ce\7\u01a7\2")
        buf.write("\2\u059d\u05a2\7\u013b\2\2\u059e\u059f\7o\2\2\u059f\u05a0")
        buf.write("\7\u00ab\2\2\u05a0\u05a2\5\u0244\u0123\2\u05a1\u059d\3")
        buf.write("\2\2\2\u05a1\u059e\3\2\2\2\u05a2\u05ce\3\2\2\2\u05a3\u05a5")
        buf.write("\7y\2\2\u05a4\u05a3\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5")
        buf.write("\u05a6\3\2\2\2\u05a6\u05ce\7W\2\2\u05a7\u05a9\7\u00a8")
        buf.write("\2\2\u05a8\u05aa\7W\2\2\u05a9\u05a8\3\2\2\2\u05a9\u05aa")
        buf.write("\3\2\2\2\u05aa\u05ce\3\2\2\2\u05ab\u05ac\7\u0154\2\2\u05ac")
        buf.write("\u05ce\7\u043a\2\2\u05ad\u05ae\7\u0152\2\2\u05ae\u05ce")
        buf.write("\t\21\2\2\u05af\u05b0\7\u0249\2\2\u05b0\u05ce\t\22\2\2")
        buf.write("\u05b1\u05ce\5V,\2\u05b2\u05b3\7\34\2\2\u05b3\u05ce\5")
        buf.write("\u0206\u0104\2\u05b4\u05b5\7D\2\2\u05b5\u05b7\7\f\2\2")
        buf.write("\u05b6\u05b4\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b8\3")
        buf.write("\2\2\2\u05b8\u05b9\7\17\2\2\u05b9\u05ba\7\u042b\2\2\u05ba")
        buf.write("\u05bb\5\u0260\u0131\2\u05bb\u05bd\7\u042c\2\2\u05bc\u05be")
        buf.write("\t\23\2\2\u05bd\u05bc\3\2\2\2\u05bd\u05be\3\2\2\2\u05be")
        buf.write("\u05ce\3\2\2\2\u05bf\u05c0\7\u00e2\2\2\u05c0\u05c1\7*")
        buf.write("\2\2\u05c1\u05ce\7\u0269\2\2\u05c2\u05c4\7\37\2\2\u05c3")
        buf.write("\u05c5\5\u0212\u010a\2\u05c4\u05c3\3\2\2\2\u05c4\u05c5")
        buf.write("\3\2\2\2\u05c5\u05c7\3\2\2\2\u05c6\u05c2\3\2\2\2\u05c6")
        buf.write("\u05c7\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05c9\7\33\2")
        buf.write("\2\u05c9\u05ca\7\u042b\2\2\u05ca\u05cb\5\u0260\u0131\2")
        buf.write("\u05cb\u05cc\7\u042c\2\2\u05cc\u05ce\3\2\2\2\u05cd\u0598")
        buf.write("\3\2\2\2\u05cd\u0599\3\2\2\2\u05cd\u059b\3\2\2\2\u05cd")
        buf.write("\u059c\3\2\2\2\u05cd\u05a1\3\2\2\2\u05cd\u05a4\3\2\2\2")
        buf.write("\u05cd\u05a7\3\2\2\2\u05cd\u05ab\3\2\2\2\u05cd\u05ad\3")
        buf.write("\2\2\2\u05cd\u05af\3\2\2\2\u05cd\u05b1\3\2\2\2\u05cd\u05b2")
        buf.write("\3\2\2\2\u05cd\u05b6\3\2\2\2\u05cd\u05bf\3\2\2\2\u05cd")
        buf.write("\u05c6\3\2\2\2\u05ceS\3\2\2\2\u05cf\u05d1\7\37\2\2\u05d0")
        buf.write("\u05d2\5\u0212\u010a\2\u05d1\u05d0\3\2\2\2\u05d1\u05d2")
        buf.write("\3\2\2\2\u05d2\u05d4\3\2\2\2\u05d3\u05cf\3\2\2\2\u05d3")
        buf.write("\u05d4\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d6\7y\2\2")
        buf.write("\u05d6\u05d8\7W\2\2\u05d7\u05d9\5\u0212\u010a\2\u05d8")
        buf.write("\u05d7\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05db\3\2\2\2")
        buf.write("\u05da\u05dc\5@!\2\u05db\u05da\3\2\2\2\u05db\u05dc\3\2")
        buf.write("\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05e1\5\u0236\u011c\2\u05de")
        buf.write("\u05e0\5B\"\2\u05df\u05de\3\2\2\2\u05e0\u05e3\3\2\2\2")
        buf.write("\u05e1\u05df\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u0615\3")
        buf.write("\2\2\2\u05e3\u05e1\3\2\2\2\u05e4\u05e6\7\37\2\2\u05e5")
        buf.write("\u05e7\5\u0212\u010a\2\u05e6\u05e5\3\2\2\2\u05e6\u05e7")
        buf.write("\3\2\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05e4\3\2\2\2\u05e8")
        buf.write("\u05e9\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ec\7\u00a8")
        buf.write("\2\2\u05eb\u05ed\t\24\2\2\u05ec\u05eb\3\2\2\2\u05ec\u05ed")
        buf.write("\3\2\2\2\u05ed\u05ef\3\2\2\2\u05ee\u05f0\5\u0212\u010a")
        buf.write("\2\u05ef\u05ee\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2")
        buf.write("\3\2\2\2\u05f1\u05f3\5@!\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3")
        buf.write("\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f8\5\u0236\u011c")
        buf.write("\2\u05f5\u05f7\5B\"\2\u05f6\u05f5\3\2\2\2\u05f7\u05fa")
        buf.write("\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9")
        buf.write("\u0615\3\2\2\2\u05fa\u05f8\3\2\2\2\u05fb\u05fd\7\37\2")
        buf.write("\2\u05fc\u05fe\5\u0212\u010a\2\u05fd\u05fc\3\2\2\2\u05fd")
        buf.write("\u05fe\3\2\2\2\u05fe\u0600\3\2\2\2\u05ff\u05fb\3\2\2\2")
        buf.write("\u05ff\u0600\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\7")
        buf.write("A\2\2\u0602\u0604\7W\2\2\u0603\u0605\5\u0212\u010a\2\u0604")
        buf.write("\u0603\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0606\3\2\2\2")
        buf.write("\u0606\u0607\5\u0236\u011c\2\u0607\u0608\5V,\2\u0608\u0615")
        buf.write("\3\2\2\2\u0609\u060b\7\37\2\2\u060a\u060c\5\u0212\u010a")
        buf.write("\2\u060b\u060a\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060e")
        buf.write("\3\2\2\2\u060d\u0609\3\2\2\2\u060d\u060e\3\2\2\2\u060e")
        buf.write("\u060f\3\2\2\2\u060f\u0610\7\33\2\2\u0610\u0611\7\u042b")
        buf.write("\2\2\u0611\u0612\5\u0260\u0131\2\u0612\u0613\7\u042c\2")
        buf.write("\2\u0613\u0615\3\2\2\2\u0614\u05d3\3\2\2\2\u0614\u05e8")
        buf.write("\3\2\2\2\u0614\u05ff\3\2\2\2\u0614\u060d\3\2\2\2\u0615")
        buf.write("U\3\2\2\2\u0616\u0617\7\177\2\2\u0617\u0619\5\u01fa\u00fe")
        buf.write("\2\u0618\u061a\5\u0236\u011c\2\u0619\u0618\3\2\2\2\u0619")
        buf.write("\u061a\3\2\2\2\u061a\u061d\3\2\2\2\u061b\u061c\7g\2\2")
        buf.write("\u061c\u061e\t\25\2\2\u061d\u061b\3\2\2\2\u061d\u061e")
        buf.write("\3\2\2\2\u061e\u0620\3\2\2\2\u061f\u0621\5X-\2\u0620\u061f")
        buf.write("\3\2\2\2\u0620\u0621\3\2\2\2\u0621W\3\2\2\2\u0622\u0623")
        buf.write("\7o\2\2\u0623\u0624\7,\2\2\u0624\u0628\5Z.\2\u0625\u0626")
        buf.write("\7o\2\2\u0626\u0627\7\u00ab\2\2\u0627\u0629\5Z.\2\u0628")
        buf.write("\u0625\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u0633\3\2\2\2")
        buf.write("\u062a\u062b\7o\2\2\u062b\u062c\7\u00ab\2\2\u062c\u0630")
        buf.write("\5Z.\2\u062d\u062e\7o\2\2\u062e\u062f\7,\2\2\u062f\u0631")
        buf.write("\5Z.\2\u0630\u062d\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0633")
        buf.write("\3\2\2\2\u0632\u0622\3\2\2\2\u0632\u062a\3\2\2\2\u0633")
        buf.write("Y\3\2\2\2\u0634\u063b\7\u0087\2\2\u0635\u063b\7\26\2\2")
        buf.write("\u0636\u0637\7\u008f\2\2\u0637\u063b\7m\2\2\u0638\u0639")
        buf.write("\7\u01e5\2\2\u0639\u063b\7\u0132\2\2\u063a\u0634\3\2\2")
        buf.write("\2\u063a\u0635\3\2\2\2\u063a\u0636\3\2\2\2\u063a\u0638")
        buf.write("\3\2\2\2\u063b[\3\2\2\2\u063c\u063e\t\24\2\2\u063d\u063f")
        buf.write("\5\u0212\u010a\2\u063e\u063d\3\2\2\2\u063e\u063f\3\2\2")
        buf.write("\2\u063f\u0641\3\2\2\2\u0640\u0642\5@!\2\u0641\u0640\3")
        buf.write("\2\2\2\u0641\u0642\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0647")
        buf.write("\5\u0236\u011c\2\u0644\u0646\5B\"\2\u0645\u0644\3\2\2")
        buf.write("\2\u0646\u0649\3\2\2\2\u0647\u0645\3\2\2\2\u0647\u0648")
        buf.write("\3\2\2\2\u0648\u0659\3\2\2\2\u0649\u0647\3\2\2\2\u064a")
        buf.write("\u064c\t\26\2\2\u064b\u064d\t\24\2\2\u064c\u064b\3\2\2")
        buf.write("\2\u064c\u064d\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u0650")
        buf.write("\5\u0212\u010a\2\u064f\u064e\3\2\2\2\u064f\u0650\3\2\2")
        buf.write("\2\u0650\u0651\3\2\2\2\u0651\u0655\5\u0236\u011c\2\u0652")
        buf.write("\u0654\5B\"\2\u0653\u0652\3\2\2\2\u0654\u0657\3\2\2\2")
        buf.write("\u0655\u0653\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u0659\3")
        buf.write("\2\2\2\u0657\u0655\3\2\2\2\u0658\u063c\3\2\2\2\u0658\u064a")
        buf.write("\3\2\2\2\u0659]\3\2\2\2\u065a\u065c\7\u017a\2\2\u065b")
        buf.write("\u065d\7\u0422\2\2\u065c\u065b\3\2\2\2\u065c\u065d\3\2")
        buf.write("\2\2\u065d\u065f\3\2\2\2\u065e\u0660\5\u0208\u0105\2\u065f")
        buf.write("\u065e\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u06f0\3\2\2\2")
        buf.write("\u0661\u0663\7\u013b\2\2\u0662\u0664\7\u0422\2\2\u0663")
        buf.write("\u0662\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0665\3\2\2\2")
        buf.write("\u0665\u06f0\5\u0218\u010d\2\u0666\u0668\7\u013c\2\2\u0667")
        buf.write("\u0669\7\u0422\2\2\u0668\u0667\3\2\2\2\u0668\u0669\3\2")
        buf.write("\2\2\u0669\u066a\3\2\2\2\u066a\u06f0\5\u0218\u010d\2\u066b")
        buf.write("\u066d\7*\2\2\u066c\u066b\3\2\2\2\u066c\u066d\3\2\2\2")
        buf.write("\u066d\u0671\3\2\2\2\u066e\u066f\7\32\2\2\u066f\u0672")
        buf.write("\7\u008f\2\2\u0670\u0672\7\u030a\2\2\u0671\u066e\3\2\2")
        buf.write("\2\u0671\u0670\3\2\2\2\u0672\u0674\3\2\2\2\u0673\u0675")
        buf.write("\7\u0422\2\2\u0674\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675")
        buf.write("\u0678\3\2\2\2\u0676\u0679\5\u0204\u0103\2\u0677\u0679")
        buf.write("\7*\2\2\u0678\u0676\3\2\2\2\u0678\u0677\3\2\2\2\u0679")
        buf.write("\u06f0\3\2\2\2\u067a\u067c\t\27\2\2\u067b\u067d\7\u0422")
        buf.write("\2\2\u067c\u067b\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067e")
        buf.write("\3\2\2\2\u067e\u06f0\t\30\2\2\u067f\u0681\7*\2\2\u0680")
        buf.write("\u067f\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0682\3\2\2\2")
        buf.write("\u0682\u0684\7\34\2\2\u0683\u0685\7\u0422\2\2\u0684\u0683")
        buf.write("\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0686\3\2\2\2\u0686")
        buf.write("\u06f0\5\u0206\u0104\2\u0687\u0689\7\u0154\2\2\u0688\u068a")
        buf.write("\7\u0422\2\2\u0689\u0688\3\2\2\2\u0689\u068a\3\2\2\2\u068a")
        buf.write("\u068b\3\2\2\2\u068b\u06f0\7\u043a\2\2\u068c\u068e\7\u0159")
        buf.write("\2\2\u068d\u068f\7\u0422\2\2\u068e\u068d\3\2\2\2\u068e")
        buf.write("\u068f\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u06f0\t\31\2")
        buf.write("\2\u0691\u0693\7\u015c\2\2\u0692\u0694\7\u0422\2\2\u0693")
        buf.write("\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0695\3\2\2\2")
        buf.write("\u0695\u06f0\7\u043a\2\2\u0696\u0697\7\u0167\2\2\u0697")
        buf.write("\u0699\7\u016e\2\2\u0698\u069a\7\u0422\2\2\u0699\u0698")
        buf.write("\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u069b\3\2\2\2\u069b")
        buf.write("\u06f0\7\u043a\2\2\u069c\u069e\7\u016c\2\2\u069d\u069f")
        buf.write("\7\u0422\2\2\u069e\u069d\3\2\2\2\u069e\u069f\3\2\2\2\u069f")
        buf.write("\u06a0\3\2\2\2\u06a0\u06f0\t\30\2\2\u06a1\u06a3\7\u0177")
        buf.write("\2\2\u06a2\u06a4\7\u0422\2\2\u06a3\u06a2\3\2\2\2\u06a3")
        buf.write("\u06a4\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06f0\7\u043a")
        buf.write("\2\2\u06a6\u06a7\7M\2\2\u06a7\u06a9\7\u016e\2\2\u06a8")
        buf.write("\u06aa\7\u0422\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2")
        buf.write("\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06f0\7\u043a\2\2\u06ac")
        buf.write("\u06ae\7\u01a4\2\2\u06ad\u06af\7\u0422\2\2\u06ae\u06ad")
        buf.write("\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0")
        buf.write("\u06f0\t\32\2\2\u06b1\u06b3\7\u01af\2\2\u06b2\u06b4\7")
        buf.write("\u0422\2\2\u06b3\u06b2\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4")
        buf.write("\u06b5\3\2\2\2\u06b5\u06f0\5\u021a\u010e\2\u06b6\u06b8")
        buf.write("\7\u01d0\2\2\u06b7\u06b9\7\u0422\2\2\u06b8\u06b7\3\2\2")
        buf.write("\2\u06b8\u06b9\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06f0")
        buf.write("\5\u0218\u010d\2\u06bb\u06bd\7\u01da\2\2\u06bc\u06be\7")
        buf.write("\u0422\2\2\u06bd\u06bc\3\2\2\2\u06bd\u06be\3\2\2\2\u06be")
        buf.write("\u06bf\3\2\2\2\u06bf\u06f0\5\u0218\u010d\2\u06c0\u06c2")
        buf.write("\7\u01f5\2\2\u06c1\u06c3\7\u0422\2\2\u06c2\u06c1\3\2\2")
        buf.write("\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06f0")
        buf.write("\t\33\2\2\u06c5\u06c7\7\u01fb\2\2\u06c6\u06c8\7\u0422")
        buf.write("\2\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06c9")
        buf.write("\3\2\2\2\u06c9\u06f0\7\u043a\2\2\u06ca\u06cc\7\u0229\2")
        buf.write("\2\u06cb\u06cd\7\u0422\2\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd")
        buf.write("\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06f0\t\34\2\2\u06cf")
        buf.write("\u06d1\7\u0244\2\2\u06d0\u06d2\7\u0422\2\2\u06d1\u06d0")
        buf.write("\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3")
        buf.write("\u06f0\t\33\2\2\u06d4\u06d6\7\u0245\2\2\u06d5\u06d7\7")
        buf.write("\u0422\2\2\u06d6\u06d5\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7")
        buf.write("\u06d8\3\2\2\2\u06d8\u06f0\t\33\2\2\u06d9\u06db\7\u0246")
        buf.write("\2\2\u06da\u06dc\7\u0422\2\2\u06db\u06da\3\2\2\2\u06db")
        buf.write("\u06dc\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06f0\5\u0218")
        buf.write("\u010d\2\u06de\u06df\7\u0254\2\2\u06df\u06e1\5\u0212\u010a")
        buf.write("\2\u06e0\u06e2\5b\62\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2")
        buf.write("\3\2\2\2\u06e2\u06f0\3\2\2\2\u06e3\u06e4\7\u0255\2\2\u06e4")
        buf.write("\u06e5\7\u0422\2\2\u06e5\u06f0\5`\61\2\u06e6\u06f0\5b")
        buf.write("\62\2\u06e7\u06e9\7\u00a7\2\2\u06e8\u06ea\7\u0422\2\2")
        buf.write("\u06e9\u06e8\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06eb\3")
        buf.write("\2\2\2\u06eb\u06ec\7\u042b\2\2\u06ec\u06ed\5\u0234\u011b")
        buf.write("\2\u06ed\u06ee\7\u042c\2\2\u06ee\u06f0\3\2\2\2\u06ef\u065a")
        buf.write("\3\2\2\2\u06ef\u0661\3\2\2\2\u06ef\u0666\3\2\2\2\u06ef")
        buf.write("\u066c\3\2\2\2\u06ef\u067a\3\2\2\2\u06ef\u0680\3\2\2\2")
        buf.write("\u06ef\u0687\3\2\2\2\u06ef\u068c\3\2\2\2\u06ef\u0691\3")
        buf.write("\2\2\2\u06ef\u0696\3\2\2\2\u06ef\u069c\3\2\2\2\u06ef\u06a1")
        buf.write("\3\2\2\2\u06ef\u06a6\3\2\2\2\u06ef\u06ac\3\2\2\2\u06ef")
        buf.write("\u06b1\3\2\2\2\u06ef\u06b6\3\2\2\2\u06ef\u06bb\3\2\2\2")
        buf.write("\u06ef\u06c0\3\2\2\2\u06ef\u06c5\3\2\2\2\u06ef\u06ca\3")
        buf.write("\2\2\2\u06ef\u06cf\3\2\2\2\u06ef\u06d4\3\2\2\2\u06ef\u06d9")
        buf.write("\3\2\2\2\u06ef\u06de\3\2\2\2\u06ef\u06e3\3\2\2\2\u06ef")
        buf.write("\u06e6\3\2\2\2\u06ef\u06e7\3\2\2\2\u06f0_\3\2\2\2\u06f1")
        buf.write("\u06f2\t\35\2\2\u06f2a\3\2\2\2\u06f3\u06f4\7\u0249\2\2")
        buf.write("\u06f4\u06f5\t\22\2\2\u06f5c\3\2\2\2\u06f6\u06f7\7x\2")
        buf.write("\2\u06f7\u06f8\7\24\2\2\u06f8\u06fb\5f\64\2\u06f9\u06fa")
        buf.write("\7\u01fa\2\2\u06fa\u06fc\5\u0218\u010d\2\u06fb\u06f9\3")
        buf.write("\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u0704\3\2\2\2\u06fd\u06fe")
        buf.write("\7\u024e\2\2\u06fe\u06ff\7\24\2\2\u06ff\u0702\5h\65\2")
        buf.write("\u0700\u0701\7\u024f\2\2\u0701\u0703\5\u0218\u010d\2\u0702")
        buf.write("\u0700\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0705\3\2\2\2")
        buf.write("\u0704\u06fd\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0711\3")
        buf.write("\2\2\2\u0706\u0707\7\u042b\2\2\u0707\u070c\5j\66\2\u0708")
        buf.write("\u0709\7\u042d\2\2\u0709\u070b\5j\66\2\u070a\u0708\3\2")
        buf.write("\2\2\u070b\u070e\3\2\2\2\u070c\u070a\3\2\2\2\u070c\u070d")
        buf.write("\3\2\2\2\u070d\u070f\3\2\2\2\u070e\u070c\3\2\2\2\u070f")
        buf.write("\u0710\7\u042c\2\2\u0710\u0712\3\2\2\2\u0711\u0706\3\2")
        buf.write("\2\2\u0711\u0712\3\2\2\2\u0712e\3\2\2\2\u0713\u0715\7")
        buf.write("_\2\2\u0714\u0713\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0716")
        buf.write("\3\2\2\2\u0716\u0717\7\u019a\2\2\u0717\u0718\7\u042b\2")
        buf.write("\2\u0718\u0719\5\u0260\u0131\2\u0719\u071a\7\u042c\2\2")
        buf.write("\u071a\u0741\3\2\2\2\u071b\u071d\7_\2\2\u071c\u071b\3")
        buf.write("\2\2\2\u071c\u071d\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u0722")
        buf.write("\7W\2\2\u071f\u0720\7\u0135\2\2\u0720\u0721\7\u0422\2")
        buf.write("\2\u0721\u0723\t\36\2\2\u0722\u071f\3\2\2\2\u0722\u0723")
        buf.write("\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0725\7\u042b\2\2\u0725")
        buf.write("\u0726\5\u0232\u011a\2\u0726\u0727\7\u042c\2\2\u0727\u0741")
        buf.write("\3\2\2\2\u0728\u0732\7|\2\2\u0729\u072a\7\u042b\2\2\u072a")
        buf.write("\u072b\5\u0260\u0131\2\u072b\u072c\7\u042c\2\2\u072c\u0733")
        buf.write("\3\2\2\2\u072d\u072e\7\u0151\2\2\u072e\u072f\7\u042b\2")
        buf.write("\2\u072f\u0730\5\u0232\u011a\2\u0730\u0731\7\u042c\2\2")
        buf.write("\u0731\u0733\3\2\2\2\u0732\u0729\3\2\2\2\u0732\u072d\3")
        buf.write("\2\2\2\u0733\u0741\3\2\2\2\u0734\u073e\7\u01b5\2\2\u0735")
        buf.write("\u0736\7\u042b\2\2\u0736\u0737\5\u0260\u0131\2\u0737\u0738")
        buf.write("\7\u042c\2\2\u0738\u073f\3\2\2\2\u0739\u073a\7\u0151\2")
        buf.write("\2\u073a\u073b\7\u042b\2\2\u073b\u073c\5\u0232\u011a\2")
        buf.write("\u073c\u073d\7\u042c\2\2\u073d\u073f\3\2\2\2\u073e\u0735")
        buf.write("\3\2\2\2\u073e\u0739\3\2\2\2\u073f\u0741\3\2\2\2\u0740")
        buf.write("\u0714\3\2\2\2\u0740\u071c\3\2\2\2\u0740\u0728\3\2\2\2")
        buf.write("\u0740\u0734\3\2\2\2\u0741g\3\2\2\2\u0742\u0744\7_\2\2")
        buf.write("\u0743\u0742\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0745\3")
        buf.write("\2\2\2\u0745\u0746\7\u019a\2\2\u0746\u0747\7\u042b\2\2")
        buf.write("\u0747\u0748\5\u0260\u0131\2\u0748\u0749\7\u042c\2\2\u0749")
        buf.write("\u0758\3\2\2\2\u074a\u074c\7_\2\2\u074b\u074a\3\2\2\2")
        buf.write("\u074b\u074c\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u0751\7")
        buf.write("W\2\2\u074e\u074f\7\u0135\2\2\u074f\u0750\7\u0422\2\2")
        buf.write("\u0750\u0752\t\36\2\2\u0751\u074e\3\2\2\2\u0751\u0752")
        buf.write("\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0754\7\u042b\2\2\u0754")
        buf.write("\u0755\5\u0232\u011a\2\u0755\u0756\7\u042c\2\2\u0756\u0758")
        buf.write("\3\2\2\2\u0757\u0743\3\2\2\2\u0757\u074b\3\2\2\2\u0758")
        buf.write("i\3\2\2\2\u0759\u075a\7x\2\2\u075a\u075b\5\u0212\u010a")
        buf.write("\2\u075b\u075c\7\u00af\2\2\u075c\u075d\7\u01b3\2\2\u075d")
        buf.write("\u075e\7\u0258\2\2\u075e\u075f\7\u042b\2\2\u075f\u0764")
        buf.write("\5l\67\2\u0760\u0761\7\u042d\2\2\u0761\u0763\5l\67\2\u0762")
        buf.write("\u0760\3\2\2\2\u0763\u0766\3\2\2\2\u0764\u0762\3\2\2\2")
        buf.write("\u0764\u0765\3\2\2\2\u0765\u0767\3\2\2\2\u0766\u0764\3")
        buf.write("\2\2\2\u0767\u076b\7\u042c\2\2\u0768\u076a\5r:\2\u0769")
        buf.write("\u0768\3\2\2\2\u076a\u076d\3\2\2\2\u076b\u0769\3\2\2\2")
        buf.write("\u076b\u076c\3\2\2\2\u076c\u0779\3\2\2\2\u076d\u076b\3")
        buf.write("\2\2\2\u076e\u076f\7\u042b\2\2\u076f\u0774\5p9\2\u0770")
        buf.write("\u0771\7\u042d\2\2\u0771\u0773\5p9\2\u0772\u0770\3\2\2")
        buf.write("\2\u0773\u0776\3\2\2\2\u0774\u0772\3\2\2\2\u0774\u0775")
        buf.write("\3\2\2\2\u0775\u0777\3\2\2\2\u0776\u0774\3\2\2\2\u0777")
        buf.write("\u0778\7\u042c\2\2\u0778\u077a\3\2\2\2\u0779\u076e\3\2")
        buf.write("\2\2\u0779\u077a\3\2\2\2\u077a\u07ec\3\2\2\2\u077b\u077c")
        buf.write("\7x\2\2\u077c\u077d\5\u0212\u010a\2\u077d\u077e\7\u00af")
        buf.write("\2\2\u077e\u077f\7\u01b3\2\2\u077f\u0780\7\u0258\2\2\u0780")
        buf.write("\u0784\5l\67\2\u0781\u0783\5r:\2\u0782\u0781\3\2\2\2\u0783")
        buf.write("\u0786\3\2\2\2\u0784\u0782\3\2\2\2\u0784\u0785\3\2\2\2")
        buf.write("\u0785\u0792\3\2\2\2\u0786\u0784\3\2\2\2\u0787\u0788\7")
        buf.write("\u042b\2\2\u0788\u078d\5p9\2\u0789\u078a\7\u042d\2\2\u078a")
        buf.write("\u078c\5p9\2\u078b\u0789\3\2\2\2\u078c\u078f\3\2\2\2\u078d")
        buf.write("\u078b\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0790\3\2\2\2")
        buf.write("\u078f\u078d\3\2\2\2\u0790\u0791\7\u042c\2\2\u0791\u0793")
        buf.write("\3\2\2\2\u0792\u0787\3\2\2\2\u0792\u0793\3\2\2\2\u0793")
        buf.write("\u07ec\3\2\2\2\u0794\u0795\7x\2\2\u0795\u0796\5\u0212")
        buf.write("\u010a\2\u0796\u0797\7\u00af\2\2\u0797\u0798\7L\2\2\u0798")
        buf.write("\u0799\7\u042b\2\2\u0799\u079e\5l\67\2\u079a\u079b\7\u042d")
        buf.write("\2\2\u079b\u079d\5l\67\2\u079c\u079a\3\2\2\2\u079d\u07a0")
        buf.write("\3\2\2\2\u079e\u079c\3\2\2\2\u079e\u079f\3\2\2\2\u079f")
        buf.write("\u07a1\3\2\2\2\u07a0\u079e\3\2\2\2\u07a1\u07a5\7\u042c")
        buf.write("\2\2\u07a2\u07a4\5r:\2\u07a3\u07a2\3\2\2\2\u07a4\u07a7")
        buf.write("\3\2\2\2\u07a5\u07a3\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6")
        buf.write("\u07b3\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a8\u07a9\7\u042b")
        buf.write("\2\2\u07a9\u07ae\5p9\2\u07aa\u07ab\7\u042d\2\2\u07ab\u07ad")
        buf.write("\5p9\2\u07ac\u07aa\3\2\2\2\u07ad\u07b0\3\2\2\2\u07ae\u07ac")
        buf.write("\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b1\3\2\2\2\u07b0")
        buf.write("\u07ae\3\2\2\2\u07b1\u07b2\7\u042c\2\2\u07b2\u07b4\3\2")
        buf.write("\2\2\u07b3\u07a8\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07ec")
        buf.write("\3\2\2\2\u07b5\u07b6\7x\2\2\u07b6\u07b7\5\u0212\u010a")
        buf.write("\2\u07b7\u07b8\7\u00af\2\2\u07b8\u07b9\7L\2\2\u07b9\u07ba")
        buf.write("\7\u042b\2\2\u07ba\u07bf\5n8\2\u07bb\u07bc\7\u042d\2\2")
        buf.write("\u07bc\u07be\5n8\2\u07bd\u07bb\3\2\2\2\u07be\u07c1\3\2")
        buf.write("\2\2\u07bf\u07bd\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c2")
        buf.write("\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c2\u07c6\7\u042c\2\2\u07c3")
        buf.write("\u07c5\5r:\2\u07c4\u07c3\3\2\2\2\u07c5\u07c8\3\2\2\2\u07c6")
        buf.write("\u07c4\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07d4\3\2\2\2")
        buf.write("\u07c8\u07c6\3\2\2\2\u07c9\u07ca\7\u042b\2\2\u07ca\u07cf")
        buf.write("\5p9\2\u07cb\u07cc\7\u042d\2\2\u07cc\u07ce\5p9\2\u07cd")
        buf.write("\u07cb\3\2\2\2\u07ce\u07d1\3\2\2\2\u07cf\u07cd\3\2\2\2")
        buf.write("\u07cf\u07d0\3\2\2\2\u07d0\u07d2\3\2\2\2\u07d1\u07cf\3")
        buf.write("\2\2\2\u07d2\u07d3\7\u042c\2\2\u07d3\u07d5\3\2\2\2\u07d4")
        buf.write("\u07c9\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07ec\3\2\2\2")
        buf.write("\u07d6\u07d7\7x\2\2\u07d7\u07db\5\u0212\u010a\2\u07d8")
        buf.write("\u07da\5r:\2\u07d9\u07d8\3\2\2\2\u07da\u07dd\3\2\2\2\u07db")
        buf.write("\u07d9\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07e9\3\2\2\2")
        buf.write("\u07dd\u07db\3\2\2\2\u07de\u07df\7\u042b\2\2\u07df\u07e4")
        buf.write("\5p9\2\u07e0\u07e1\7\u042d\2\2\u07e1\u07e3\5p9\2\u07e2")
        buf.write("\u07e0\3\2\2\2\u07e3\u07e6\3\2\2\2\u07e4\u07e2\3\2\2\2")
        buf.write("\u07e4\u07e5\3\2\2\2\u07e5\u07e7\3\2\2\2\u07e6\u07e4\3")
        buf.write("\2\2\2\u07e7\u07e8\7\u042c\2\2\u07e8\u07ea\3\2\2\2\u07e9")
        buf.write("\u07de\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec\3\2\2\2")
        buf.write("\u07eb\u0759\3\2\2\2\u07eb\u077b\3\2\2\2\u07eb\u0794\3")
        buf.write("\2\2\2\u07eb\u07b5\3\2\2\2\u07eb\u07d6\3\2\2\2\u07eck")
        buf.write("\3\2\2\2\u07ed\u07f1\5\u0224\u0113\2\u07ee\u07f1\5\u0260")
        buf.write("\u0131\2\u07ef\u07f1\7h\2\2\u07f0\u07ed\3\2\2\2\u07f0")
        buf.write("\u07ee\3\2\2\2\u07f0\u07ef\3\2\2\2\u07f1m\3\2\2\2\u07f2")
        buf.write("\u07f3\7\u042b\2\2\u07f3\u07f6\5l\67\2\u07f4\u07f5\7\u042d")
        buf.write("\2\2\u07f5\u07f7\5l\67\2\u07f6\u07f4\3\2\2\2\u07f7\u07f8")
        buf.write("\3\2\2\2\u07f8\u07f6\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9")
        buf.write("\u07fa\3\2\2\2\u07fa\u07fb\7\u042c\2\2\u07fbo\3\2\2\2")
        buf.write("\u07fc\u07fd\7\u024e\2\2\u07fd\u0801\5\u0212\u010a\2\u07fe")
        buf.write("\u0800\5r:\2\u07ff\u07fe\3\2\2\2\u0800\u0803\3\2\2\2\u0801")
        buf.write("\u07ff\3\2\2\2\u0801\u0802\3\2\2\2\u0802q\3\2\2\2\u0803")
        buf.write("\u0801\3\2\2\2\u0804\u0806\7*\2\2\u0805\u0804\3\2\2\2")
        buf.write("\u0805\u0806\3\2\2\2\u0806\u0808\3\2\2\2\u0807\u0809\7")
        buf.write("\u0249\2\2\u0808\u0807\3\2\2\2\u0808\u0809\3\2\2\2\u0809")
        buf.write("\u080a\3\2\2\2\u080a\u080c\7\u017a\2\2\u080b\u080d\7\u0422")
        buf.write("\2\2\u080c\u080b\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080e")
        buf.write("\3\2\2\2\u080e\u0835\5\u0208\u0105\2\u080f\u0811\7\u0154")
        buf.write("\2\2\u0810\u0812\7\u0422\2\2\u0811\u0810\3\2\2\2\u0811")
        buf.write("\u0812\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0835\7\u043a")
        buf.write("\2\2\u0814\u0815\7\u0167\2\2\u0815\u0817\7\u016e\2\2\u0816")
        buf.write("\u0818\7\u0422\2\2\u0817\u0816\3\2\2\2\u0817\u0818\3\2")
        buf.write("\2\2\u0818\u0819\3\2\2\2\u0819\u0835\7\u043a\2\2\u081a")
        buf.write("\u081b\7M\2\2\u081b\u081d\7\u016e\2\2\u081c\u081e\7\u0422")
        buf.write("\2\2\u081d\u081c\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f")
        buf.write("\3\2\2\2\u081f\u0835\7\u043a\2\2\u0820\u0822\7\u01d0\2")
        buf.write("\2\u0821\u0823\7\u0422\2\2\u0822\u0821\3\2\2\2\u0822\u0823")
        buf.write("\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u0835\5\u0218\u010d")
        buf.write("\2\u0825\u0827\7\u01da\2\2\u0826\u0828\7\u0422\2\2\u0827")
        buf.write("\u0826\3\2\2\2\u0827\u0828\3\2\2\2\u0828\u0829\3\2\2\2")
        buf.write("\u0829\u0835\5\u0218\u010d\2\u082a\u082c\7\u0254\2\2\u082b")
        buf.write("\u082d\7\u0422\2\2\u082c\u082b\3\2\2\2\u082c\u082d\3\2")
        buf.write("\2\2\u082d\u082e\3\2\2\2\u082e\u0835\5\u0212\u010a\2\u082f")
        buf.write("\u0831\7\u01e6\2\2\u0830\u0832\7\u0422\2\2\u0831\u0830")
        buf.write("\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0833\3\2\2\2\u0833")
        buf.write("\u0835\5\u0212\u010a\2\u0834\u0805\3\2\2\2\u0834\u080f")
        buf.write("\3\2\2\2\u0834\u0814\3\2\2\2\u0834\u081a\3\2\2\2\u0834")
        buf.write("\u0820\3\2\2\2\u0834\u0825\3\2\2\2\u0834\u082a\3\2\2\2")
        buf.write("\u0834\u082f\3\2\2\2\u0835s\3\2\2\2\u0836\u0837\7\13\2")
        buf.write("\2\u0837\u0839\t\2\2\2\u0838\u083a\5\u0212\u010a\2\u0839")
        buf.write("\u0838\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u083c\3\2\2\2")
        buf.write("\u083b\u083d\5\62\32\2\u083c\u083b\3\2\2\2\u083d\u083e")
        buf.write("\3\2\2\2\u083e\u083c\3\2\2\2\u083e\u083f\3\2\2\2\u083f")
        buf.write("\u0849\3\2\2\2\u0840\u0841\7\13\2\2\u0841\u0842\t\2\2")
        buf.write("\2\u0842\u0843\5\u0212\u010a\2\u0843\u0844\7\u0264\2\2")
        buf.write("\u0844\u0845\7\u0167\2\2\u0845\u0846\7\u016e\2\2\u0846")
        buf.write("\u0847\7\u01e0\2\2\u0847\u0849\3\2\2\2\u0848\u0836\3\2")
        buf.write("\2\2\u0848\u0840\3\2\2\2\u0849u\3\2\2\2\u084a\u084c\7")
        buf.write("\13\2\2\u084b\u084d\5\64\33\2\u084c\u084b\3\2\2\2\u084c")
        buf.write("\u084d\3\2\2\2\u084d\u084e\3\2\2\2\u084e\u084f\7\u0180")
        buf.write("\2\2\u084f\u0853\5\u01f8\u00fd\2\u0850\u0851\7o\2\2\u0851")
        buf.write("\u0852\7\u022b\2\2\u0852\u0854\5\66\34\2\u0853\u0850\3")
        buf.write("\2\2\2\u0853\u0854\3\2\2\2\u0854\u085b\3\2\2\2\u0855\u0856")
        buf.write("\7o\2\2\u0856\u0858\7\u0157\2\2\u0857\u0859\7k\2\2\u0858")
        buf.write("\u0857\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085a\3\2\2\2")
        buf.write("\u085a\u085c\7\u0203\2\2\u085b\u0855\3\2\2\2\u085b\u085c")
        buf.write("\3\2\2\2\u085c\u0860\3\2\2\2\u085d\u085e\7\u0082\2\2\u085e")
        buf.write("\u085f\7\u00a2\2\2\u085f\u0861\5\u01f8\u00fd\2\u0860\u085d")
        buf.write("\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u0863\3\2\2\2\u0862")
        buf.write("\u0864\5> \2\u0863\u0862\3\2\2\2\u0863\u0864\3\2\2\2\u0864")
        buf.write("\u0867\3\2\2\2\u0865\u0866\7\u0154\2\2\u0866\u0868\7\u043a")
        buf.write("\2\2\u0867\u0865\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u086b")
        buf.write("\3\2\2\2\u0869\u086a\7\u0172\2\2\u086a\u086c\5\u0160\u00b1")
        buf.write("\2\u086b\u0869\3\2\2\2\u086b\u086c\3\2\2\2\u086cw\3\2")
        buf.write("\2\2\u086d\u086e\7\13\2\2\u086e\u086f\7\u0194\2\2\u086f")
        buf.write("\u0873\5\u01f8\u00fd\2\u0870\u0872\5H%\2\u0871\u0870\3")
        buf.write("\2\2\2\u0872\u0875\3\2\2\2\u0873\u0871\3\2\2\2\u0873\u0874")
        buf.write("\3\2\2\2\u0874y\3\2\2\2\u0875\u0873\3\2\2\2\u0876\u0877")
        buf.write("\7\13\2\2\u0877\u0878\7\u01a6\2\2\u0878\u0879\7\u0226")
        buf.write("\2\2\u0879\u087a\7\u02d8\2\2\u087a\u087b\7\u01b9\2\2\u087b")
        buf.write("\u087c\7W\2\2\u087c{\3\2\2\2\u087d\u087e\7\13\2\2\u087e")
        buf.write("\u087f\7\u01b7\2\2\u087f\u0880\7G\2\2\u0880\u0881\5\u0212")
        buf.write("\u010a\2\u0881\u0882\7\t\2\2\u0882\u0883\7\u025f\2\2\u0883")
        buf.write("\u0889\7\u043a\2\2\u0884\u0886\7\u01a2\2\2\u0885\u0887")
        buf.write("\7\u0422\2\2\u0886\u0885\3\2\2\2\u0886\u0887\3\2\2\2\u0887")
        buf.write("\u0888\3\2\2\2\u0888\u088a\5\u021a\u010e\2\u0889\u0884")
        buf.write("\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088c\3\2\2\2\u088b")
        buf.write("\u088d\7\u026e\2\2\u088c\u088b\3\2\2\2\u088c\u088d\3\2")
        buf.write("\2\2\u088d\u088e\3\2\2\2\u088e\u0890\7\u017a\2\2\u088f")
        buf.write("\u0891\7\u0422\2\2\u0890\u088f\3\2\2\2\u0890\u0891\3\2")
        buf.write("\2\2\u0891\u0892\3\2\2\2\u0892\u0893\5\u0208\u0105\2\u0893")
        buf.write("}\3\2\2\2\u0894\u0895\7\13\2\2\u0895\u0896\7z\2\2\u0896")
        buf.write("\u089a\5\u01f8\u00fd\2\u0897\u0899\5H%\2\u0898\u0897\3")
        buf.write("\2\2\2\u0899\u089c\3\2\2\2\u089a\u0898\3\2\2\2\u089a\u089b")
        buf.write("\3\2\2\2\u089b\177\3\2\2\2\u089c\u089a\3\2\2\2\u089d\u089e")
        buf.write("\7\13\2\2\u089e\u089f\7\u022d\2\2\u089f\u08a0\5\u0212")
        buf.write("\u010a\2\u08a0\u08a1\7\u01f3\2\2\u08a1\u08a2\7\u042b\2")
        buf.write("\2\u08a2\u08a7\5J&\2\u08a3\u08a4\7\u042d\2\2\u08a4\u08a6")
        buf.write("\5J&\2\u08a5\u08a3\3\2\2\2\u08a6\u08a9\3\2\2\2\u08a7\u08a5")
        buf.write("\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08aa\3\2\2\2\u08a9")
        buf.write("\u08a7\3\2\2\2\u08aa\u08ab\7\u042c\2\2\u08ab\u0081\3\2")
        buf.write("\2\2\u08ac\u08ae\7\13\2\2\u08ad\u08af\t\3\2\2\u08ae\u08ad")
        buf.write("\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b1\3\2\2\2\u08b0")
        buf.write("\u08b2\7K\2\2\u08b1\u08b0\3\2\2\2\u08b1\u08b2\3\2\2\2")
        buf.write("\u08b2\u08b3\3\2\2\2\u08b3\u08b4\7\u009f\2\2\u08b4\u08bd")
        buf.write("\5\u01fa\u00fe\2\u08b5\u08ba\5\u0088E\2\u08b6\u08b7\7")
        buf.write("\u042d\2\2\u08b7\u08b9\5\u0088E\2\u08b8\u08b6\3\2\2\2")
        buf.write("\u08b9\u08bc\3\2\2\2\u08ba\u08b8\3\2\2\2\u08ba\u08bb\3")
        buf.write("\2\2\2\u08bb\u08be\3\2\2\2\u08bc\u08ba\3\2\2\2\u08bd\u08b5")
        buf.write("\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u08c0\3\2\2\2\u08bf")
        buf.write("\u08c1\5d\63\2\u08c0\u08bf\3\2\2\2\u08c0\u08c1\3\2\2\2")
        buf.write("\u08c1\u0083\3\2\2\2\u08c2\u08c3\7\13\2\2\u08c3\u08c4")
        buf.write("\7\u0254\2\2\u08c4\u08c5\5\u0212\u010a\2\u08c5\u08c6\t")
        buf.write("\37\2\2\u08c6\u08c7\7\u0168\2\2\u08c7\u08cb\7\u043a\2")
        buf.write("\2\u08c8\u08c9\7\u01a2\2\2\u08c9\u08ca\7\u0422\2\2\u08ca")
        buf.write("\u08cc\5\u021a\u010e\2\u08cb\u08c8\3\2\2\2\u08cb\u08cc")
        buf.write("\3\2\2\2\u08cc\u08ce\3\2\2\2\u08cd\u08cf\7\u026e\2\2\u08ce")
        buf.write("\u08cd\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d0\3\2\2\2")
        buf.write("\u08d0\u08d2\7\u017a\2\2\u08d1\u08d3\7\u0422\2\2\u08d2")
        buf.write("\u08d1\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d4\3\2\2\2")
        buf.write("\u08d4\u08d5\5\u0208\u0105\2\u08d5\u0085\3\2\2\2\u08d6")
        buf.write("\u08da\7\13\2\2\u08d7\u08d8\7\u0135\2\2\u08d8\u08d9\7")
        buf.write("\u0422\2\2\u08d9\u08db\t\f\2\2\u08da\u08d7\3\2\2\2\u08da")
        buf.write("\u08db\3\2\2\2\u08db\u08dd\3\2\2\2\u08dc\u08de\5\64\33")
        buf.write("\2\u08dd\u08dc\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08e2")
        buf.write("\3\2\2\2\u08df\u08e0\7\u0094\2\2\u08e0\u08e1\7\u022c\2")
        buf.write("\2\u08e1\u08e3\t\r\2\2\u08e2\u08df\3\2\2\2\u08e2\u08e3")
        buf.write("\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e5\7\u026b\2\2\u08e5")
        buf.write("\u08ea\5\u01f8\u00fd\2\u08e6\u08e7\7\u042b\2\2\u08e7\u08e8")
        buf.write("\5\u0232\u011a\2\u08e8\u08e9\7\u042c\2\2\u08e9\u08eb\3")
        buf.write("\2\2\2\u08ea\u08e6\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ec")
        buf.write("\3\2\2\2\u08ec\u08ed\7\17\2\2\u08ed\u08f4\5\u00b6\\\2")
        buf.write("\u08ee\u08f0\7\u00b3\2\2\u08ef\u08f1\t\16\2\2\u08f0\u08ef")
        buf.write("\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2")
        buf.write("\u08f3\7\33\2\2\u08f3\u08f5\7q\2\2\u08f4\u08ee\3\2\2\2")
        buf.write("\u08f4\u08f5\3\2\2\2\u08f5\u0087\3\2\2\2\u08f6\u08fd\5")
        buf.write("^\60\2\u08f7\u08f9\7\u042d\2\2\u08f8\u08f7\3\2\2\2\u08f8")
        buf.write("\u08f9\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fc\5^\60\2")
        buf.write("\u08fb\u08f8\3\2\2\2\u08fc\u08ff\3\2\2\2\u08fd\u08fb\3")
        buf.write("\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u0a65\3\2\2\2\u08ff\u08fd")
        buf.write("\3\2\2\2\u0900\u0902\7\t\2\2\u0901\u0903\7\35\2\2\u0902")
        buf.write("\u0901\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u0904\3\2\2\2")
        buf.write("\u0904\u0905\5\u0212\u010a\2\u0905\u0909\5P)\2\u0906\u090a")
        buf.write("\7\u018e\2\2\u0907\u0908\7\u0133\2\2\u0908\u090a\5\u0212")
        buf.write("\u010a\2\u0909\u0906\3\2\2\2\u0909\u0907\3\2\2\2\u0909")
        buf.write("\u090a\3\2\2\2\u090a\u0a65\3\2\2\2\u090b\u090d\7\t\2\2")
        buf.write("\u090c\u090e\7\35\2\2\u090d\u090c\3\2\2\2\u090d\u090e")
        buf.write("\3\2\2\2\u090e\u090f\3\2\2\2\u090f\u0910\7\u042b\2\2\u0910")
        buf.write("\u0911\5\u0212\u010a\2\u0911\u0918\5P)\2\u0912\u0913\7")
        buf.write("\u042d\2\2\u0913\u0914\5\u0212\u010a\2\u0914\u0915\5P")
        buf.write(")\2\u0915\u0917\3\2\2\2\u0916\u0912\3\2\2\2\u0917\u091a")
        buf.write("\3\2\2\2\u0918\u0916\3\2\2\2\u0918\u0919\3\2\2\2\u0919")
        buf.write("\u091b\3\2\2\2\u091a\u0918\3\2\2\2\u091b\u091c\7\u042c")
        buf.write("\2\2\u091c\u0a65\3\2\2\2\u091d\u091e\7\t\2\2\u091e\u0920")
        buf.write("\t\24\2\2\u091f\u0921\5\u0212\u010a\2\u0920\u091f\3\2")
        buf.write("\2\2\u0920\u0921\3\2\2\2\u0921\u0923\3\2\2\2\u0922\u0924")
        buf.write("\5@!\2\u0923\u0922\3\2\2\2\u0923\u0924\3\2\2\2\u0924\u0925")
        buf.write("\3\2\2\2\u0925\u0929\5\u0236\u011c\2\u0926\u0928\5B\"")
        buf.write("\2\u0927\u0926\3\2\2\2\u0928\u092b\3\2\2\2\u0929\u0927")
        buf.write("\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u0a65\3\2\2\2\u092b")
        buf.write("\u0929\3\2\2\2\u092c\u0931\7\t\2\2\u092d\u092f\7\37\2")
        buf.write("\2\u092e\u0930\5\u0212\u010a\2\u092f\u092e\3\2\2\2\u092f")
        buf.write("\u0930\3\2\2\2\u0930\u0932\3\2\2\2\u0931\u092d\3\2\2\2")
        buf.write("\u0931\u0932\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u0934\7")
        buf.write("y\2\2\u0934\u0936\7W\2\2\u0935\u0937\5\u0212\u010a\2\u0936")
        buf.write("\u0935\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u0939\3\2\2\2")
        buf.write("\u0938\u093a\5@!\2\u0939\u0938\3\2\2\2\u0939\u093a\3\2")
        buf.write("\2\2\u093a\u093b\3\2\2\2\u093b\u093f\5\u0236\u011c\2\u093c")
        buf.write("\u093e\5B\"\2\u093d\u093c\3\2\2\2\u093e\u0941\3\2\2\2")
        buf.write("\u093f\u093d\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0a65\3")
        buf.write("\2\2\2\u0941\u093f\3\2\2\2\u0942\u0947\7\t\2\2\u0943\u0945")
        buf.write("\7\37\2\2\u0944\u0946\5\u0212\u010a\2\u0945\u0944\3\2")
        buf.write("\2\2\u0945\u0946\3\2\2\2\u0946\u0948\3\2\2\2\u0947\u0943")
        buf.write("\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u0949\3\2\2\2\u0949")
        buf.write("\u094b\7\u00a8\2\2\u094a\u094c\t\24\2\2\u094b\u094a\3")
        buf.write("\2\2\2\u094b\u094c\3\2\2\2\u094c\u094e\3\2\2\2\u094d\u094f")
        buf.write("\5\u0212\u010a\2\u094e\u094d\3\2\2\2\u094e\u094f\3\2\2")
        buf.write("\2\u094f\u0951\3\2\2\2\u0950\u0952\5@!\2\u0951\u0950\3")
        buf.write("\2\2\2\u0951\u0952\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u0957")
        buf.write("\5\u0236\u011c\2\u0954\u0956\5B\"\2\u0955\u0954\3\2\2")
        buf.write("\2\u0956\u0959\3\2\2\2\u0957\u0955\3\2\2\2\u0957\u0958")
        buf.write("\3\2\2\2\u0958\u0a65\3\2\2\2\u0959\u0957\3\2\2\2\u095a")
        buf.write("\u095b\7\t\2\2\u095b\u095d\t\26\2\2\u095c\u095e\t\24\2")
        buf.write("\2\u095d\u095c\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u0960")
        buf.write("\3\2\2\2\u095f\u0961\5\u0212\u010a\2\u0960\u095f\3\2\2")
        buf.write("\2\u0960\u0961\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0966")
        buf.write("\5\u0236\u011c\2\u0963\u0965\5B\"\2\u0964\u0963\3\2\2")
        buf.write("\2\u0965\u0968\3\2\2\2\u0966\u0964\3\2\2\2\u0966\u0967")
        buf.write("\3\2\2\2\u0967\u0a65\3\2\2\2\u0968\u0966\3\2\2\2\u0969")
        buf.write("\u096e\7\t\2\2\u096a\u096c\7\37\2\2\u096b\u096d\5\u0212")
        buf.write("\u010a\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2\2\2\u096d")
        buf.write("\u096f\3\2\2\2\u096e\u096a\3\2\2\2\u096e\u096f\3\2\2\2")
        buf.write("\u096f\u0970\3\2\2\2\u0970\u0971\7A\2\2\u0971\u0973\7")
        buf.write("W\2\2\u0972\u0974\5\u0212\u010a\2\u0973\u0972\3\2\2\2")
        buf.write("\u0973\u0974\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u0976\5")
        buf.write("\u0236\u011c\2\u0976\u0977\5V,\2\u0977\u0a65\3\2\2\2\u0978")
        buf.write("\u097d\7\t\2\2\u0979\u097b\7\37\2\2\u097a\u097c\5\u0212")
        buf.write("\u010a\2\u097b\u097a\3\2\2\2\u097b\u097c\3\2\2\2\u097c")
        buf.write("\u097e\3\2\2\2\u097d\u0979\3\2\2\2\u097d\u097e\3\2\2\2")
        buf.write("\u097e\u097f\3\2\2\2\u097f\u0980\7\33\2\2\u0980\u0981")
        buf.write("\7\u042b\2\2\u0981\u0982\5\u0260\u0131\2\u0982\u0983\7")
        buf.write("\u042c\2\2\u0983\u0a65\3\2\2\2\u0984\u0986\7\u0135\2\2")
        buf.write("\u0985\u0987\7\u0422\2\2\u0986\u0985\3\2\2\2\u0986\u0987")
        buf.write("\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u0a65\t\5\2\2\u0989")
        buf.write("\u098b\7\13\2\2\u098a\u098c\7\35\2\2\u098b\u098a\3\2\2")
        buf.write("\2\u098b\u098c\3\2\2\2\u098c\u098d\3\2\2\2\u098d\u0993")
        buf.write("\5\u0212\u010a\2\u098e\u098f\7\u008f\2\2\u098f\u0990\7")
        buf.write("*\2\2\u0990\u0994\5\u0242\u0122\2\u0991\u0992\7\63\2\2")
        buf.write("\u0992\u0994\7*\2\2\u0993\u098e\3\2\2\2\u0993\u0991\3")
        buf.write("\2\2\2\u0994\u0a65\3\2\2\2\u0995\u0997\7\31\2\2\u0996")
        buf.write("\u0998\7\35\2\2\u0997\u0996\3\2\2\2\u0997\u0998\3\2\2")
        buf.write("\2\u0998\u0999\3\2\2\2\u0999\u099a\5\u0212\u010a\2\u099a")
        buf.write("\u099b\5\u0212\u010a\2\u099b\u099f\5P)\2\u099c\u09a0\7")
        buf.write("\u018e\2\2\u099d\u099e\7\u0133\2\2\u099e\u09a0\5\u0212")
        buf.write("\u010a\2\u099f\u099c\3\2\2\2\u099f\u099d\3\2\2\2\u099f")
        buf.write("\u09a0\3\2\2\2\u09a0\u0a65\3\2\2\2\u09a1\u09a2\7\u0082")
        buf.write("\2\2\u09a2\u09a3\7\35\2\2\u09a3\u09a4\5\u0212\u010a\2")
        buf.write("\u09a4\u09a5\7\u00a2\2\2\u09a5\u09a6\5\u0212\u010a\2\u09a6")
        buf.write("\u0a65\3\2\2\2\u09a7\u09a9\7b\2\2\u09a8\u09aa\7\u0422")
        buf.write("\2\2\u09a9\u09a8\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa\u09ab")
        buf.write("\3\2\2\2\u09ab\u0a65\t\6\2\2\u09ac\u09ae\7\u01dc\2\2\u09ad")
        buf.write("\u09af\7\35\2\2\u09ae\u09ad\3\2\2\2\u09ae\u09af\3\2\2")
        buf.write("\2\u09af\u09b0\3\2\2\2\u09b0\u09b1\5\u0212\u010a\2\u09b1")
        buf.write("\u09b5\5P)\2\u09b2\u09b6\7\u018e\2\2\u09b3\u09b4\7\u0133")
        buf.write("\2\2\u09b4\u09b6\5\u0212\u010a\2\u09b5\u09b2\3\2\2\2\u09b5")
        buf.write("\u09b3\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u0a65\3\2\2\2")
        buf.write("\u09b7\u09b9\7\63\2\2\u09b8\u09ba\7\35\2\2\u09b9\u09b8")
        buf.write("\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb")
        buf.write("\u09bd\5\u0212\u010a\2\u09bc\u09be\7\u0087\2\2\u09bd\u09bc")
        buf.write("\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u0a65\3\2\2\2\u09bf")
        buf.write("\u09c0\7\63\2\2\u09c0\u09c1\t \2\2\u09c1\u0a65\5\u0212")
        buf.write("\u010a\2\u09c2\u09c3\7\63\2\2\u09c3\u09c4\7y\2\2\u09c4")
        buf.write("\u0a65\7W\2\2\u09c5\u09c6\7\u0082\2\2\u09c6\u09c7\t\24")
        buf.write("\2\2\u09c7\u09c8\5\u0212\u010a\2\u09c8\u09c9\7\u00a2\2")
        buf.write("\2\u09c9\u09ca\5\u0212\u010a\2\u09ca\u0a65\3\2\2\2\u09cb")
        buf.write("\u09cc\7\13\2\2\u09cc\u09cd\7M\2\2\u09cd\u09ce\5\u0212")
        buf.write("\u010a\2\u09ce\u09cf\t!\2\2\u09cf\u0a65\3\2\2\2\u09d0")
        buf.write("\u09d1\7\63\2\2\u09d1\u09d2\t\24\2\2\u09d2\u0a65\5\u0212")
        buf.write("\u010a\2\u09d3\u09d4\7\63\2\2\u09d4\u09d5\7A\2\2\u09d5")
        buf.write("\u09d6\7W\2\2\u09d6\u0a65\5\u0212\u010a\2\u09d7\u09d8")
        buf.write("\7\u016f\2\2\u09d8\u0a65\7X\2\2\u09d9\u09da\7\u0176\2")
        buf.write("\2\u09da\u0a65\7X\2\2\u09db\u09dd\7\u0082\2\2\u09dc\u09de")
        buf.write("\t\"\2\2\u09dd\u09dc\3\2\2\2\u09dd\u09de\3\2\2\2\u09de")
        buf.write("\u09e1\3\2\2\2\u09df\u09e2\5\u0212\u010a\2\u09e0\u09e2")
        buf.write("\5\u01f8\u00fd\2\u09e1\u09df\3\2\2\2\u09e1\u09e0\3\2\2")
        buf.write("\2\u09e2\u0a65\3\2\2\2\u09e3\u09e4\7t\2\2\u09e4\u09e5")
        buf.write("\7\24\2\2\u09e5\u0a65\5\u0232\u011a\2\u09e6\u09e7\7!\2")
        buf.write("\2\u09e7\u09e8\7\u00a2\2\2\u09e8\u09e9\7\32\2\2\u09e9")
        buf.write("\u09ea\7\u008f\2\2\u09ea\u09ed\5\u0204\u0103\2\u09eb\u09ec")
        buf.write("\7\34\2\2\u09ec\u09ee\5\u0206\u0104\2\u09ed\u09eb\3\2")
        buf.write("\2\2\u09ed\u09ee\3\2\2\2\u09ee\u0a65\3\2\2\2\u09ef\u09f1")
        buf.write("\7*\2\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1\3\2\2\2\u09f1")
        buf.write("\u09f2\3\2\2\2\u09f2\u09f3\7\32\2\2\u09f3\u09f4\7\u008f")
        buf.write("\2\2\u09f4\u09f5\7\u0422\2\2\u09f5\u09f9\5\u0204\u0103")
        buf.write("\2\u09f6\u09f7\7\34\2\2\u09f7\u09f8\7\u0422\2\2\u09f8")
        buf.write("\u09fa\5\u0206\u0104\2\u09f9\u09f6\3\2\2\2\u09f9\u09fa")
        buf.write("\3\2\2\2\u09fa\u0a65\3\2\2\2\u09fb\u09fc\7\u0170\2\2\u09fc")
        buf.write("\u0a65\7\u0254\2\2\u09fd\u09fe\7\u01a0\2\2\u09fe\u0a65")
        buf.write("\7\u0254\2\2\u09ff\u0a65\7@\2\2\u0a00\u0a01\t#\2\2\u0a01")
        buf.write("\u0a65\7\u0268\2\2\u0a02\u0a03\7\t\2\2\u0a03\u0a04\7x")
        buf.write("\2\2\u0a04\u0a05\7\u042b\2\2\u0a05\u0a0a\5j\66\2\u0a06")
        buf.write("\u0a07\7\u042d\2\2\u0a07\u0a09\5j\66\2\u0a08\u0a06\3\2")
        buf.write("\2\2\u0a09\u0a0c\3\2\2\2\u0a0a\u0a08\3\2\2\2\u0a0a\u0a0b")
        buf.write("\3\2\2\2\u0a0b\u0a0d\3\2\2\2\u0a0c\u0a0a\3\2\2\2\u0a0d")
        buf.write("\u0a0e\7\u042c\2\2\u0a0e\u0a65\3\2\2\2\u0a0f\u0a10\7\63")
        buf.write("\2\2\u0a10\u0a11\7x\2\2\u0a11\u0a65\5\u0232\u011a\2\u0a12")
        buf.write("\u0a13\7\u0170\2\2\u0a13\u0a16\7x\2\2\u0a14\u0a17\5\u0232")
        buf.write("\u011a\2\u0a15\u0a17\7\n\2\2\u0a16\u0a14\3\2\2\2\u0a16")
        buf.write("\u0a15\3\2\2\2\u0a17\u0a18\3\2\2\2\u0a18\u0a65\7\u0254")
        buf.write("\2\2\u0a19\u0a1a\7\u01a0\2\2\u0a1a\u0a1d\7x\2\2\u0a1b")
        buf.write("\u0a1e\5\u0232\u011a\2\u0a1c\u0a1e\7\n\2\2\u0a1d\u0a1b")
        buf.write("\3\2\2\2\u0a1d\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f")
        buf.write("\u0a65\7\u0254\2\2\u0a20\u0a21\7\u025d\2\2\u0a21\u0a24")
        buf.write("\7x\2\2\u0a22\u0a25\5\u0232\u011a\2\u0a23\u0a25\7\n\2")
        buf.write("\2\u0a24\u0a22\3\2\2\2\u0a24\u0a23\3\2\2\2\u0a25\u0a65")
        buf.write("\3\2\2\2\u0a26\u0a27\7\u014f\2\2\u0a27\u0a28\7x\2\2\u0a28")
        buf.write("\u0a65\5\u0218\u010d\2\u0a29\u0a2a\7\u0214\2\2\u0a2a\u0a2b")
        buf.write("\7x\2\2\u0a2b\u0a2c\5\u0232\u011a\2\u0a2c\u0a2d\7S\2\2")
        buf.write("\u0a2d\u0a2e\7\u042b\2\2\u0a2e\u0a33\5j\66\2\u0a2f\u0a30")
        buf.write("\7\u042d\2\2\u0a30\u0a32\5j\66\2\u0a31\u0a2f\3\2\2\2\u0a32")
        buf.write("\u0a35\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a33\u0a34\3\2\2\2")
        buf.write("\u0a34\u0a36\3\2\2\2\u0a35\u0a33\3\2\2\2\u0a36\u0a37\7")
        buf.write("\u042c\2\2\u0a37\u0a65\3\2\2\2\u0a38\u0a39\7\u0183\2\2")
        buf.write("\u0a39\u0a3a\7x\2\2\u0a3a\u0a3b\5\u0212\u010a\2\u0a3b")
        buf.write("\u0a3c\7\u00b3\2\2\u0a3c\u0a3d\7\u009f\2\2\u0a3d\u0a40")
        buf.write("\5\u01fa\u00fe\2\u0a3e\u0a3f\t#\2\2\u0a3f\u0a41\7\u0268")
        buf.write("\2\2\u0a40\u0a3e\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a65")
        buf.write("\3\2\2\2\u0a42\u0a43\7\r\2\2\u0a43\u0a46\7x\2\2\u0a44")
        buf.write("\u0a47\5\u0232\u011a\2\u0a45\u0a47\7\n\2\2\u0a46\u0a44")
        buf.write("\3\2\2\2\u0a46\u0a45\3\2\2\2\u0a47\u0a65\3\2\2\2\u0a48")
        buf.write("\u0a49\7\33\2\2\u0a49\u0a4c\7x\2\2\u0a4a\u0a4d\5\u0232")
        buf.write("\u011a\2\u0a4b\u0a4d\7\n\2\2\u0a4c\u0a4a\3\2\2\2\u0a4c")
        buf.write("\u0a4b\3\2\2\2\u0a4d\u0a65\3\2\2\2\u0a4e\u0a4f\7p\2\2")
        buf.write("\u0a4f\u0a52\7x\2\2\u0a50\u0a53\5\u0232\u011a\2\u0a51")
        buf.write("\u0a53\7\n\2\2\u0a52\u0a50\3\2\2\2\u0a52\u0a51\3\2\2\2")
        buf.write("\u0a53\u0a65\3\2\2\2\u0a54\u0a55\7\u020b\2\2\u0a55\u0a58")
        buf.write("\7x\2\2\u0a56\u0a59\5\u0232\u011a\2\u0a57\u0a59\7\n\2")
        buf.write("\2\u0a58\u0a56\3\2\2\2\u0a58\u0a57\3\2\2\2\u0a59\u0a65")
        buf.write("\3\2\2\2\u0a5a\u0a5b\7\u0215\2\2\u0a5b\u0a5e\7x\2\2\u0a5c")
        buf.write("\u0a5f\5\u0232\u011a\2\u0a5d\u0a5f\7\n\2\2\u0a5e\u0a5c")
        buf.write("\3\2\2\2\u0a5e\u0a5d\3\2\2\2\u0a5f\u0a65\3\2\2\2\u0a60")
        buf.write("\u0a61\7\u0213\2\2\u0a61\u0a65\7\u01f9\2\2\u0a62\u0a63")
        buf.write("\7\u0264\2\2\u0a63\u0a65\7\u01f9\2\2\u0a64\u08f6\3\2\2")
        buf.write("\2\u0a64\u0900\3\2\2\2\u0a64\u090b\3\2\2\2\u0a64\u091d")
        buf.write("\3\2\2\2\u0a64\u092c\3\2\2\2\u0a64\u0942\3\2\2\2\u0a64")
        buf.write("\u095a\3\2\2\2\u0a64\u0969\3\2\2\2\u0a64\u0978\3\2\2\2")
        buf.write("\u0a64\u0984\3\2\2\2\u0a64\u0989\3\2\2\2\u0a64\u0995\3")
        buf.write("\2\2\2\u0a64\u09a1\3\2\2\2\u0a64\u09a7\3\2\2\2\u0a64\u09ac")
        buf.write("\3\2\2\2\u0a64\u09b7\3\2\2\2\u0a64\u09bf\3\2\2\2\u0a64")
        buf.write("\u09c2\3\2\2\2\u0a64\u09c5\3\2\2\2\u0a64\u09cb\3\2\2\2")
        buf.write("\u0a64\u09d0\3\2\2\2\u0a64\u09d3\3\2\2\2\u0a64\u09d7\3")
        buf.write("\2\2\2\u0a64\u09d9\3\2\2\2\u0a64\u09db\3\2\2\2\u0a64\u09e3")
        buf.write("\3\2\2\2\u0a64\u09e6\3\2\2\2\u0a64\u09f0\3\2\2\2\u0a64")
        buf.write("\u09fb\3\2\2\2\u0a64\u09fd\3\2\2\2\u0a64\u09ff\3\2\2\2")
        buf.write("\u0a64\u0a00\3\2\2\2\u0a64\u0a02\3\2\2\2\u0a64\u0a0f\3")
        buf.write("\2\2\2\u0a64\u0a12\3\2\2\2\u0a64\u0a19\3\2\2\2\u0a64\u0a20")
        buf.write("\3\2\2\2\u0a64\u0a26\3\2\2\2\u0a64\u0a29\3\2\2\2\u0a64")
        buf.write("\u0a38\3\2\2\2\u0a64\u0a42\3\2\2\2\u0a64\u0a48\3\2\2\2")
        buf.write("\u0a64\u0a4e\3\2\2\2\u0a64\u0a54\3\2\2\2\u0a64\u0a5a\3")
        buf.write("\2\2\2\u0a64\u0a60\3\2\2\2\u0a64\u0a62\3\2\2\2\u0a65\u0089")
        buf.write("\3\2\2\2\u0a66\u0a67\7\63\2\2\u0a67\u0a69\t\2\2\2\u0a68")
        buf.write("\u0a6a\5\u0248\u0125\2\u0a69\u0a68\3\2\2\2\u0a69\u0a6a")
        buf.write("\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a6c\5\u0212\u010a")
        buf.write("\2\u0a6c\u008b\3\2\2\2\u0a6d\u0a6e\7\63\2\2\u0a6e\u0a70")
        buf.write("\7\u0180\2\2\u0a6f\u0a71\5\u0248\u0125\2\u0a70\u0a6f\3")
        buf.write("\2\2\2\u0a70\u0a71\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72\u0a73")
        buf.write("\5\u01f8\u00fd\2\u0a73\u008d\3\2\2\2\u0a74\u0a75\7\63")
        buf.write("\2\2\u0a75\u0a77\7M\2\2\u0a76\u0a78\t\3\2\2\u0a77\u0a76")
        buf.write("\3\2\2\2\u0a77\u0a78\3\2\2\2\u0a78\u0a79\3\2\2\2\u0a79")
        buf.write("\u0a7a\5\u0212\u010a\2\u0a7a\u0a7b\7o\2\2\u0a7b\u0a88")
        buf.write("\5\u01fa\u00fe\2\u0a7c\u0a7e\7\u0135\2\2\u0a7d\u0a7f\7")
        buf.write("\u0422\2\2\u0a7e\u0a7d\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f")
        buf.write("\u0a80\3\2\2\2\u0a80\u0a87\t\5\2\2\u0a81\u0a83\7b\2\2")
        buf.write("\u0a82\u0a84\7\u0422\2\2\u0a83\u0a82\3\2\2\2\u0a83\u0a84")
        buf.write("\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u0a87\t\6\2\2\u0a86")
        buf.write("\u0a7c\3\2\2\2\u0a86\u0a81\3\2\2\2\u0a87\u0a8a\3\2\2\2")
        buf.write("\u0a88\u0a86\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89\u008f\3")
        buf.write("\2\2\2\u0a8a\u0a88\3\2\2\2\u0a8b\u0a8c\7\63\2\2\u0a8c")
        buf.write("\u0a8d\7\u01b7\2\2\u0a8d\u0a8e\7G\2\2\u0a8e\u0a8f\5\u0212")
        buf.write("\u010a\2\u0a8f\u0a90\7\u017a\2\2\u0a90\u0a91\7\u0422\2")
        buf.write("\2\u0a91\u0a92\5\u0208\u0105\2\u0a92\u0091\3\2\2\2\u0a93")
        buf.write("\u0a94\7\63\2\2\u0a94\u0a96\7z\2\2\u0a95\u0a97\5\u0248")
        buf.write("\u0125\2\u0a96\u0a95\3\2\2\2\u0a96\u0a97\3\2\2\2\u0a97")
        buf.write("\u0a98\3\2\2\2\u0a98\u0a99\5\u01f8\u00fd\2\u0a99\u0093")
        buf.write("\3\2\2\2\u0a9a\u0a9b\7\63\2\2\u0a9b\u0a9d\7\u0194\2\2")
        buf.write("\u0a9c\u0a9e\5\u0248\u0125\2\u0a9d\u0a9c\3\2\2\2\u0a9d")
        buf.write("\u0a9e\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa0\5\u01f8")
        buf.write("\u00fd\2\u0aa0\u0095\3\2\2\2\u0aa1\u0aa2\7\63\2\2\u0aa2")
        buf.write("\u0aa4\7\u022d\2\2\u0aa3\u0aa5\5\u0248\u0125\2\u0aa4\u0aa3")
        buf.write("\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6")
        buf.write("\u0aa7\5\u0212\u010a\2\u0aa7\u0097\3\2\2\2\u0aa8\u0aaa")
        buf.write("\7\63\2\2\u0aa9\u0aab\7\u0256\2\2\u0aaa\u0aa9\3\2\2\2")
        buf.write("\u0aaa\u0aab\3\2\2\2\u0aab\u0aac\3\2\2\2\u0aac\u0aae\7")
        buf.write("\u009f\2\2\u0aad\u0aaf\5\u0248\u0125\2\u0aae\u0aad\3\2")
        buf.write("\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab2")
        buf.write("\5\u0234\u011b\2\u0ab1\u0ab3\t$\2\2\u0ab2\u0ab1\3\2\2")
        buf.write("\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0099\3\2\2\2\u0ab4\u0ab5")
        buf.write("\7\63\2\2\u0ab5\u0ab6\7\u0254\2\2\u0ab6\u0abc\5\u0212")
        buf.write("\u010a\2\u0ab7\u0ab9\7\u017a\2\2\u0ab8\u0aba\7\u0422\2")
        buf.write("\2\u0ab9\u0ab8\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u0abb")
        buf.write("\3\2\2\2\u0abb\u0abd\5\u0208\u0105\2\u0abc\u0ab7\3\2\2")
        buf.write("\2\u0abc\u0abd\3\2\2\2\u0abd\u009b\3\2\2\2\u0abe\u0abf")
        buf.write("\7\63\2\2\u0abf\u0ac1\7\u00a4\2\2\u0ac0\u0ac2\5\u0248")
        buf.write("\u0125\2\u0ac1\u0ac0\3\2\2\2\u0ac1\u0ac2\3\2\2\2\u0ac2")
        buf.write("\u0ac3\3\2\2\2\u0ac3\u0ac4\5\u01f8\u00fd\2\u0ac4\u009d")
        buf.write("\3\2\2\2\u0ac5\u0ac6\7\63\2\2\u0ac6\u0ac8\7\u026b\2\2")
        buf.write("\u0ac7\u0ac9\5\u0248\u0125\2\u0ac8\u0ac7\3\2\2\2\u0ac8")
        buf.write("\u0ac9\3\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca\u0acf\5\u01f8")
        buf.write("\u00fd\2\u0acb\u0acc\7\u042d\2\2\u0acc\u0ace\5\u01f8\u00fd")
        buf.write("\2\u0acd\u0acb\3\2\2\2\u0ace\u0ad1\3\2\2\2\u0acf\u0acd")
        buf.write("\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0\u0ad3\3\2\2\2\u0ad1")
        buf.write("\u0acf\3\2\2\2\u0ad2\u0ad4\t$\2\2\u0ad3\u0ad2\3\2\2\2")
        buf.write("\u0ad3\u0ad4\3\2\2\2\u0ad4\u009f\3\2\2\2\u0ad5\u0ad6\7")
        buf.write("\u0082\2\2\u0ad6\u0ad7\7\u009f\2\2\u0ad7\u0adc\5\u00a2")
        buf.write("R\2\u0ad8\u0ad9\7\u042d\2\2\u0ad9\u0adb\5\u00a2R\2\u0ada")
        buf.write("\u0ad8\3\2\2\2\u0adb\u0ade\3\2\2\2\u0adc\u0ada\3\2\2\2")
        buf.write("\u0adc\u0add\3\2\2\2\u0add\u00a1\3\2\2\2\u0ade\u0adc\3")
        buf.write("\2\2\2\u0adf\u0ae0\5\u01fa\u00fe\2\u0ae0\u0ae1\7\u00a2")
        buf.write("\2\2\u0ae1\u0ae2\5\u01fa\u00fe\2\u0ae2\u00a3\3\2\2\2\u0ae3")
        buf.write("\u0ae5\7\u025d\2\2\u0ae4\u0ae6\7\u009f\2\2\u0ae5\u0ae4")
        buf.write("\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7")
        buf.write("\u0ae8\5\u01fa\u00fe\2\u0ae8\u00a5\3\2\2\2\u0ae9\u0aea")
        buf.write("\7\25\2\2\u0aea\u0af1\5\u01f8\u00fd\2\u0aeb\u0aee\7\u042b")
        buf.write("\2\2\u0aec\u0aef\5\u023c\u011f\2\u0aed\u0aef\5\u0238\u011d")
        buf.write("\2\u0aee\u0aec\3\2\2\2\u0aee\u0aed\3\2\2\2\u0aee\u0aef")
        buf.write("\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0af2\7\u042c\2\2\u0af1")
        buf.write("\u0aeb\3\2\2\2\u0af1\u0af2\3\2\2\2\u0af2\u00a7\3\2\2\2")
        buf.write("\u0af3\u0af6\5\u00c2b\2\u0af4\u0af6\5\u00c4c\2\u0af5\u0af3")
        buf.write("\3\2\2\2\u0af5\u0af4\3\2\2\2\u0af6\u00a9\3\2\2\2\u0af7")
        buf.write("\u0af8\7\u0172\2\2\u0af8\u0af9\5\u0238\u011d\2\u0af9\u00ab")
        buf.write("\3\2\2\2\u0afa\u0aff\5\u00c6d\2\u0afb\u0aff\5\u00c8e\2")
        buf.write("\u0afc\u0aff\5\u00caf\2\u0afd\u0aff\5\u00ccg\2\u0afe\u0afa")
        buf.write("\3\2\2\2\u0afe\u0afb\3\2\2\2\u0afe\u0afc\3\2\2\2\u0afe")
        buf.write("\u0afd\3\2\2\2\u0aff\u00ad\3\2\2\2\u0b00\u0b02\7Q\2\2")
        buf.write("\u0b01\u0b03\t%\2\2\u0b02\u0b01\3\2\2\2\u0b02\u0b03\3")
        buf.write("\2\2\2\u0b03\u0b05\3\2\2\2\u0b04\u0b06\7K\2\2\u0b05\u0b04")
        buf.write("\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b08\3\2\2\2\u0b07")
        buf.write("\u0b09\7S\2\2\u0b08\u0b07\3\2\2\2\u0b08\u0b09\3\2\2\2")
        buf.write("\u0b09\u0b0a\3\2\2\2\u0b0a\u0b11\5\u01fa\u00fe\2\u0b0b")
        buf.write("\u0b0c\7x\2\2\u0b0c\u0b0e\7\u042b\2\2\u0b0d\u0b0f\5\u0232")
        buf.write("\u011a\2\u0b0e\u0b0d\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f")
        buf.write("\u0b10\3\2\2\2\u0b10\u0b12\7\u042c\2\2\u0b11\u0b0b\3\2")
        buf.write("\2\2\u0b11\u0b12\3\2\2\2\u0b12\u0b23\3\2\2\2\u0b13\u0b14")
        buf.write("\7\u042b\2\2\u0b14\u0b15\5\u0232\u011a\2\u0b15\u0b16\7")
        buf.write("\u042c\2\2\u0b16\u0b18\3\2\2\2\u0b17\u0b13\3\2\2\2\u0b17")
        buf.write("\u0b18\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b24\5\u00ba")
        buf.write("^\2\u0b1a\u0b1b\7\u008f\2\2\u0b1b\u0b20\5\u00bc_\2\u0b1c")
        buf.write("\u0b1d\7\u042d\2\2\u0b1d\u0b1f\5\u00bc_\2\u0b1e\u0b1c")
        buf.write("\3\2\2\2\u0b1f\u0b22\3\2\2\2\u0b20\u0b1e\3\2\2\2\u0b20")
        buf.write("\u0b21\3\2\2\2\u0b21\u0b24\3\2\2\2\u0b22\u0b20\3\2\2\2")
        buf.write("\u0b23\u0b17\3\2\2\2\u0b23\u0b1a\3\2\2\2\u0b24\u0b31\3")
        buf.write("\2\2\2\u0b25\u0b26\7o\2\2\u0b26\u0b27\7\u0174\2\2\u0b27")
        buf.write("\u0b28\7W\2\2\u0b28\u0b29\7\u00ab\2\2\u0b29\u0b2e\5\u00bc")
        buf.write("_\2\u0b2a\u0b2b\7\u042d\2\2\u0b2b\u0b2d\5\u00bc_\2\u0b2c")
        buf.write("\u0b2a\3\2\2\2\u0b2d\u0b30\3\2\2\2\u0b2e\u0b2c\3\2\2\2")
        buf.write("\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b32\3\2\2\2\u0b30\u0b2e\3")
        buf.write("\2\2\2\u0b31\u0b25\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32\u00af")
        buf.write("\3\2\2\2\u0b33\u0b34\7a\2\2\u0b34\u0b36\7\u0167\2\2\u0b35")
        buf.write("\u0b37\t&\2\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37\3\2\2\2")
        buf.write("\u0b37\u0b39\3\2\2\2\u0b38\u0b3a\7\u01b6\2\2\u0b39\u0b38")
        buf.write("\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b")
        buf.write("\u0b3c\7N\2\2\u0b3c\u0b3e\7\u043a\2\2\u0b3d\u0b3f\t\b")
        buf.write("\2\2\u0b3e\u0b3d\3\2\2\2\u0b3e\u0b3f\3\2\2\2\u0b3f\u0b40")
        buf.write("\3\2\2\2\u0b40\u0b41\7S\2\2\u0b41\u0b42\7\u009f\2\2\u0b42")
        buf.write("\u0b48\5\u01fa\u00fe\2\u0b43\u0b44\7x\2\2\u0b44\u0b45")
        buf.write("\7\u042b\2\2\u0b45\u0b46\5\u0232\u011a\2\u0b46\u0b47\7")
        buf.write("\u042c\2\2\u0b47\u0b49\3\2\2\2\u0b48\u0b43\3\2\2\2\u0b48")
        buf.write("\u0b49\3\2\2\2\u0b49\u0b4d\3\2\2\2\u0b4a\u0b4b\7\32\2")
        buf.write("\2\u0b4b\u0b4c\7\u008f\2\2\u0b4c\u0b4e\5\u0204\u0103\2")
        buf.write("\u0b4d\u0b4a\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b55\3")
        buf.write("\2\2\2\u0b4f\u0b51\t\'\2\2\u0b50\u0b52\5\u00f6|\2\u0b51")
        buf.write("\u0b50\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b51\3\2\2\2")
        buf.write("\u0b53\u0b54\3\2\2\2\u0b54\u0b56\3\2\2\2\u0b55\u0b4f\3")
        buf.write("\2\2\2\u0b55\u0b56\3\2\2\2\u0b56\u0b5d\3\2\2\2\u0b57\u0b59")
        buf.write("\7`\2\2\u0b58\u0b5a\5\u00f8}\2\u0b59\u0b58\3\2\2\2\u0b5a")
        buf.write("\u0b5b\3\2\2\2\u0b5b\u0b59\3\2\2\2\u0b5b\u0b5c\3\2\2\2")
        buf.write("\u0b5c\u0b5e\3\2\2\2\u0b5d\u0b57\3\2\2\2\u0b5d\u0b5e\3")
        buf.write("\2\2\2\u0b5e\u0b63\3\2\2\2\u0b5f\u0b60\7K\2\2\u0b60\u0b61")
        buf.write("\5\u0218\u010d\2\u0b61\u0b62\t(\2\2\u0b62\u0b64\3\2\2")
        buf.write("\2\u0b63\u0b5f\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64\u0b70")
        buf.write("\3\2\2\2\u0b65\u0b66\7\u042b\2\2\u0b66\u0b6b\5\u00be`")
        buf.write("\2\u0b67\u0b68\7\u042d\2\2\u0b68\u0b6a\5\u00be`\2\u0b69")
        buf.write("\u0b67\3\2\2\2\u0b6a\u0b6d\3\2\2\2\u0b6b\u0b69\3\2\2\2")
        buf.write("\u0b6b\u0b6c\3\2\2\2\u0b6c\u0b6e\3\2\2\2\u0b6d\u0b6b\3")
        buf.write("\2\2\2\u0b6e\u0b6f\7\u042c\2\2\u0b6f\u0b71\3\2\2\2\u0b70")
        buf.write("\u0b65\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0b7b\3\2\2\2")
        buf.write("\u0b72\u0b73\7\u008f\2\2\u0b73\u0b78\5\u00bc_\2\u0b74")
        buf.write("\u0b75\7\u042d\2\2\u0b75\u0b77\5\u00bc_\2\u0b76\u0b74")
        buf.write("\3\2\2\2\u0b77\u0b7a\3\2\2\2\u0b78\u0b76\3\2\2\2\u0b78")
        buf.write("\u0b79\3\2\2\2\u0b79\u0b7c\3\2\2\2\u0b7a\u0b78\3\2\2\2")
        buf.write("\u0b7b\u0b72\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u00b1\3")
        buf.write("\2\2\2\u0b7d\u0b7e\7a\2\2\u0b7e\u0b80\7\u0275\2\2\u0b7f")
        buf.write("\u0b81\t&\2\2\u0b80\u0b7f\3\2\2\2\u0b80\u0b81\3\2\2\2")
        buf.write("\u0b81\u0b83\3\2\2\2\u0b82\u0b84\7\u01b6\2\2\u0b83\u0b82")
        buf.write("\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85")
        buf.write("\u0b86\7N\2\2\u0b86\u0b88\7\u043a\2\2\u0b87\u0b89\t\b")
        buf.write("\2\2\u0b88\u0b87\3\2\2\2\u0b88\u0b89\3\2\2\2\u0b89\u0b8a")
        buf.write("\3\2\2\2\u0b8a\u0b8b\7S\2\2\u0b8b\u0b8c\7\u009f\2\2\u0b8c")
        buf.write("\u0b90\5\u01fa\u00fe\2\u0b8d\u0b8e\7\32\2\2\u0b8e\u0b8f")
        buf.write("\7\u008f\2\2\u0b8f\u0b91\5\u0204\u0103\2\u0b90\u0b8d\3")
        buf.write("\2\2\2\u0b90\u0b91\3\2\2\2\u0b91\u0b98\3\2\2\2\u0b92\u0b93")
        buf.write("\7\u0228\2\2\u0b93\u0b94\7\u019e\2\2\u0b94\u0b95\7\24")
        buf.write("\2\2\u0b95\u0b96\7\u0424\2\2\u0b96\u0b97\7\u043a\2\2\u0b97")
        buf.write("\u0b99\7\u0423\2\2\u0b98\u0b92\3\2\2\2\u0b98\u0b99\3\2")
        buf.write("\2\2\u0b99\u0b9e\3\2\2\2\u0b9a\u0b9b\7K\2\2\u0b9b\u0b9c")
        buf.write("\5\u0218\u010d\2\u0b9c\u0b9d\t(\2\2\u0b9d\u0b9f\3\2\2")
        buf.write("\2\u0b9e\u0b9a\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0bab")
        buf.write("\3\2\2\2\u0ba0\u0ba1\7\u042b\2\2\u0ba1\u0ba6\5\u00be`")
        buf.write("\2\u0ba2\u0ba3\7\u042d\2\2\u0ba3\u0ba5\5\u00be`\2\u0ba4")
        buf.write("\u0ba2\3\2\2\2\u0ba5\u0ba8\3\2\2\2\u0ba6\u0ba4\3\2\2\2")
        buf.write("\u0ba6\u0ba7\3\2\2\2\u0ba7\u0ba9\3\2\2\2\u0ba8\u0ba6\3")
        buf.write("\2\2\2\u0ba9\u0baa\7\u042c\2\2\u0baa\u0bac\3\2\2\2\u0bab")
        buf.write("\u0ba0\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bb6\3\2\2\2")
        buf.write("\u0bad\u0bae\7\u008f\2\2\u0bae\u0bb3\5\u00bc_\2\u0baf")
        buf.write("\u0bb0\7\u042d\2\2\u0bb0\u0bb2\5\u00bc_\2\u0bb1\u0baf")
        buf.write("\3\2\2\2\u0bb2\u0bb5\3\2\2\2\u0bb3\u0bb1\3\2\2\2\u0bb3")
        buf.write("\u0bb4\3\2\2\2\u0bb4\u0bb7\3\2\2\2\u0bb5\u0bb3\3\2\2\2")
        buf.write("\u0bb6\u0bad\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u00b3\3")
        buf.write("\2\2\2\u0bb8\u0bba\7\u0084\2\2\u0bb9\u0bbb\t)\2\2\u0bba")
        buf.write("\u0bb9\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0bbd\3\2\2\2")
        buf.write("\u0bbc\u0bbe\7S\2\2\u0bbd\u0bbc\3\2\2\2\u0bbd\u0bbe\3")
        buf.write("\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0bc5\5\u01fa\u00fe\2")
        buf.write("\u0bc0\u0bc1\7x\2\2\u0bc1\u0bc2\7\u042b\2\2\u0bc2\u0bc3")
        buf.write("\5\u0232\u011a\2\u0bc3\u0bc4\7\u042c\2\2\u0bc4\u0bc6\3")
        buf.write("\2\2\2\u0bc5\u0bc0\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bd7")
        buf.write("\3\2\2\2\u0bc7\u0bc8\7\u042b\2\2\u0bc8\u0bc9\5\u0232\u011a")
        buf.write("\2\u0bc9\u0bca\7\u042c\2\2\u0bca\u0bcc\3\2\2\2\u0bcb\u0bc7")
        buf.write("\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd")
        buf.write("\u0bd8\5\u00ba^\2\u0bce\u0bcf\7\u008f\2\2\u0bcf\u0bd4")
        buf.write("\5\u00bc_\2\u0bd0\u0bd1\7\u042d\2\2\u0bd1\u0bd3\5\u00bc")
        buf.write("_\2\u0bd2\u0bd0\3\2\2\2\u0bd3\u0bd6\3\2\2\2\u0bd4\u0bd2")
        buf.write("\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bd8\3\2\2\2\u0bd6")
        buf.write("\u0bd4\3\2\2\2\u0bd7\u0bcb\3\2\2\2\u0bd7\u0bce\3\2\2\2")
        buf.write("\u0bd8\u00b5\3\2\2\2\u0bd9\u0bdb\5\u00e6t\2\u0bda\u0bdc")
        buf.write("\5\u00c0a\2\u0bdb\u0bda\3\2\2\2\u0bdb\u0bdc\3\2\2\2\u0bdc")
        buf.write("\u0c11\3\2\2\2\u0bdd\u0bdf\5\u00e2r\2\u0bde\u0be0\5\u00c0")
        buf.write("a\2\u0bdf\u0bde\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0c11")
        buf.write("\3\2\2\2\u0be1\u0be3\5\u00e8u\2\u0be2\u0be4\5\u00ecw\2")
        buf.write("\u0be3\u0be2\3\2\2\2\u0be4\u0be5\3\2\2\2\u0be5\u0be3\3")
        buf.write("\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0bef\3\2\2\2\u0be7\u0be9")
        buf.write("\7\u00a7\2\2\u0be8\u0bea\t*\2\2\u0be9\u0be8\3\2\2\2\u0be9")
        buf.write("\u0bea\3\2\2\2\u0bea\u0bed\3\2\2\2\u0beb\u0bee\5\u00e6")
        buf.write("t\2\u0bec\u0bee\5\u00e2r\2\u0bed\u0beb\3\2\2\2\u0bed\u0bec")
        buf.write("\3\2\2\2\u0bee\u0bf0\3\2\2\2\u0bef\u0be7\3\2\2\2\u0bef")
        buf.write("\u0bf0\3\2\2\2\u0bf0\u0bf2\3\2\2\2\u0bf1\u0bf3\5\u00d2")
        buf.write("j\2\u0bf2\u0bf1\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf5")
        buf.write("\3\2\2\2\u0bf4\u0bf6\5\u0102\u0082\2\u0bf5\u0bf4\3\2\2")
        buf.write("\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0bf8\3\2\2\2\u0bf7\u0bf9")
        buf.write("\5\u00c0a\2\u0bf8\u0bf7\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9")
        buf.write("\u0c11\3\2\2\2\u0bfa\u0bfc\5\u00e4s\2\u0bfb\u0bfd\5\u00ea")
        buf.write("v\2\u0bfc\u0bfb\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0bfc")
        buf.write("\3\2\2\2\u0bfe\u0bff\3\2\2\2\u0bff\u0c05\3\2\2\2\u0c00")
        buf.write("\u0c02\7\u00a7\2\2\u0c01\u0c03\t*\2\2\u0c02\u0c01\3\2")
        buf.write("\2\2\u0c02\u0c03\3\2\2\2\u0c03\u0c04\3\2\2\2\u0c04\u0c06")
        buf.write("\5\u00e2r\2\u0c05\u0c00\3\2\2\2\u0c05\u0c06\3\2\2\2\u0c06")
        buf.write("\u0c08\3\2\2\2\u0c07\u0c09\5\u00d2j\2\u0c08\u0c07\3\2")
        buf.write("\2\2\u0c08\u0c09\3\2\2\2\u0c09\u0c0b\3\2\2\2\u0c0a\u0c0c")
        buf.write("\5\u0102\u0082\2\u0c0b\u0c0a\3\2\2\2\u0c0b\u0c0c\3\2\2")
        buf.write("\2\u0c0c\u0c0e\3\2\2\2\u0c0d\u0c0f\5\u00c0a\2\u0c0e\u0c0d")
        buf.write("\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u0c11\3\2\2\2\u0c10")
        buf.write("\u0bd9\3\2\2\2\u0c10\u0bdd\3\2\2\2\u0c10\u0be1\3\2\2\2")
        buf.write("\u0c10\u0bfa\3\2\2\2\u0c11\u00b7\3\2\2\2\u0c12\u0c15\5")
        buf.write("\u00ceh\2\u0c13\u0c15\5\u00d0i\2\u0c14\u0c12\3\2\2\2\u0c14")
        buf.write("\u0c13\3\2\2\2\u0c15\u00b9\3\2\2\2\u0c16\u0c29\5\u00b6")
        buf.write("\\\2\u0c17\u0c18\t+\2\2\u0c18\u0c1a\7\u042b\2\2\u0c19")
        buf.write("\u0c1b\5\u023a\u011e\2\u0c1a\u0c19\3\2\2\2\u0c1a\u0c1b")
        buf.write("\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c25\7\u042c\2\2\u0c1d")
        buf.write("\u0c1e\7\u042d\2\2\u0c1e\u0c20\7\u042b\2\2\u0c1f\u0c21")
        buf.write("\5\u023a\u011e\2\u0c20\u0c1f\3\2\2\2\u0c20\u0c21\3\2\2")
        buf.write("\2\u0c21\u0c22\3\2\2\2\u0c22\u0c24\7\u042c\2\2\u0c23\u0c1d")
        buf.write("\3\2\2\2\u0c24\u0c27\3\2\2\2\u0c25\u0c23\3\2\2\2\u0c25")
        buf.write("\u0c26\3\2\2\2\u0c26\u0c29\3\2\2\2\u0c27\u0c25\3\2\2\2")
        buf.write("\u0c28\u0c16\3\2\2\2\u0c28\u0c17\3\2\2\2\u0c29\u00bb\3")
        buf.write("\2\2\2\u0c2a\u0c2b\5\u01fc\u00ff\2\u0c2b\u0c2e\7\u0422")
        buf.write("\2\2\u0c2c\u0c2f\5\u0260\u0131\2\u0c2d\u0c2f\7*\2\2\u0c2e")
        buf.write("\u0c2c\3\2\2\2\u0c2e\u0c2d\3\2\2\2\u0c2f\u00bd\3\2\2\2")
        buf.write("\u0c30\u0c33\5\u0212\u010a\2\u0c31\u0c33\7\u0446\2\2\u0c32")
        buf.write("\u0c30\3\2\2\2\u0c32\u0c31\3\2\2\2\u0c33\u00bf\3\2\2\2")
        buf.write("\u0c34\u0c35\7?\2\2\u0c35\u0c3b\7\u00ab\2\2\u0c36\u0c37")
        buf.write("\7b\2\2\u0c37\u0c38\7L\2\2\u0c38\u0c39\7\u022f\2\2\u0c39")
        buf.write("\u0c3b\7\u01db\2\2\u0c3a\u0c34\3\2\2\2\u0c3a\u0c36\3\2")
        buf.write("\2\2\u0c3b\u00c1\3\2\2\2\u0c3c\u0c3e\7,\2\2\u0c3d\u0c3f")
        buf.write("\7d\2\2\u0c3e\u0c3d\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f")
        buf.write("\u0c41\3\2\2\2\u0c40\u0c42\7\u020a\2\2\u0c41\u0c40\3\2")
        buf.write("\2\2\u0c41\u0c42\3\2\2\2\u0c42\u0c44\3\2\2\2\u0c43\u0c45")
        buf.write("\7K\2\2\u0c44\u0c43\3\2\2\2\u0c44\u0c45\3\2\2\2\u0c45")
        buf.write("\u0c46\3\2\2\2\u0c46\u0c47\7B\2\2\u0c47\u0c4d\5\u01fa")
        buf.write("\u00fe\2\u0c48\u0c49\7x\2\2\u0c49\u0c4a\7\u042b\2\2\u0c4a")
        buf.write("\u0c4b\5\u0232\u011a\2\u0c4b\u0c4c\7\u042c\2\2\u0c4c\u0c4e")
        buf.write("\3\2\2\2\u0c4d\u0c48\3\2\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e")
        buf.write("\u0c51\3\2\2\2\u0c4f\u0c50\7\u00b1\2\2\u0c50\u0c52\5\u0260")
        buf.write("\u0131\2\u0c51\u0c4f\3\2\2\2\u0c51\u0c52\3\2\2\2\u0c52")
        buf.write("\u0c54\3\2\2\2\u0c53\u0c55\5\u00d2j\2\u0c54\u0c53\3\2")
        buf.write("\2\2\u0c54\u0c55\3\2\2\2\u0c55\u0c58\3\2\2\2\u0c56\u0c57")
        buf.write("\7^\2\2\u0c57\u0c59\5\u0104\u0083\2\u0c58\u0c56\3\2\2")
        buf.write("\2\u0c58\u0c59\3\2\2\2\u0c59\u00c3\3\2\2\2\u0c5a\u0c5c")
        buf.write("\7,\2\2\u0c5b\u0c5d\7d\2\2\u0c5c\u0c5b\3\2\2\2\u0c5c\u0c5d")
        buf.write("\3\2\2\2\u0c5d\u0c5f\3\2\2\2\u0c5e\u0c60\7\u020a\2\2\u0c5f")
        buf.write("\u0c5e\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c62\3\2\2\2")
        buf.write("\u0c61\u0c63\7K\2\2\u0c62\u0c61\3\2\2\2\u0c62\u0c63\3")
        buf.write("\2\2\2\u0c63\u0c8b\3\2\2\2\u0c64\u0c67\5\u01fa\u00fe\2")
        buf.write("\u0c65\u0c66\7\u042a\2\2\u0c66\u0c68\7\u041a\2\2\u0c67")
        buf.write("\u0c65\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c71\3\2\2\2")
        buf.write("\u0c69\u0c6a\7\u042d\2\2\u0c6a\u0c6d\5\u01fa\u00fe\2\u0c6b")
        buf.write("\u0c6c\7\u042a\2\2\u0c6c\u0c6e\7\u041a\2\2\u0c6d\u0c6b")
        buf.write("\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c70\3\2\2\2\u0c6f")
        buf.write("\u0c69\3\2\2\2\u0c70\u0c73\3\2\2\2\u0c71\u0c6f\3\2\2\2")
        buf.write("\u0c71\u0c72\3\2\2\2\u0c72\u0c74\3\2\2\2\u0c73\u0c71\3")
        buf.write("\2\2\2\u0c74\u0c75\7B\2\2\u0c75\u0c76\5\u00d6l\2\u0c76")
        buf.write("\u0c8c\3\2\2\2\u0c77\u0c78\7B\2\2\u0c78\u0c7b\5\u01fa")
        buf.write("\u00fe\2\u0c79\u0c7a\7\u042a\2\2\u0c7a\u0c7c\7\u041a\2")
        buf.write("\2\u0c7b\u0c79\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0c85")
        buf.write("\3\2\2\2\u0c7d\u0c7e\7\u042d\2\2\u0c7e\u0c81\5\u01fa\u00fe")
        buf.write("\2\u0c7f\u0c80\7\u042a\2\2\u0c80\u0c82\7\u041a\2\2\u0c81")
        buf.write("\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c84\3\2\2\2")
        buf.write("\u0c83\u0c7d\3\2\2\2\u0c84\u0c87\3\2\2\2\u0c85\u0c83\3")
        buf.write("\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c88\3\2\2\2\u0c87\u0c85")
        buf.write("\3\2\2\2\u0c88\u0c89\7\u00ae\2\2\u0c89\u0c8a\5\u00d6l")
        buf.write("\2\u0c8a\u0c8c\3\2\2\2\u0c8b\u0c64\3\2\2\2\u0c8b\u0c77")
        buf.write("\3\2\2\2\u0c8c\u0c8f\3\2\2\2\u0c8d\u0c8e\7\u00b1\2\2\u0c8e")
        buf.write("\u0c90\5\u0260\u0131\2\u0c8f\u0c8d\3\2\2\2\u0c8f\u0c90")
        buf.write("\3\2\2\2\u0c90\u00c5\3\2\2\2\u0c91\u0c92\7\u0199\2\2\u0c92")
        buf.write("\u0c93\5\u01fa\u00fe\2\u0c93\u0c98\7\u01f1\2\2\u0c94\u0c96")
        buf.write("\7\17\2\2\u0c95\u0c94\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96")
        buf.write("\u0c97\3\2\2\2\u0c97\u0c99\5\u0212\u010a\2\u0c98\u0c95")
        buf.write("\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u00c7\3\2\2\2\u0c9a")
        buf.write("\u0c9b\7\u0199\2\2\u0c9b\u0c9c\5\u01fa\u00fe\2\u0c9c\u0c9d")
        buf.write("\7}\2\2\u0c9d\u0ca4\5\u0212\u010a\2\u0c9e\u0c9f\5\u0268")
        buf.write("\u0135\2\u0c9f\u0ca0\7\u042b\2\2\u0ca0\u0ca1\5\u023c\u011f")
        buf.write("\2\u0ca1\u0ca2\7\u042c\2\2\u0ca2\u0ca5\3\2\2\2\u0ca3\u0ca5")
        buf.write("\t,\2\2\u0ca4\u0c9e\3\2\2\2\u0ca4\u0ca3\3\2\2\2\u0ca5")
        buf.write("\u0ca8\3\2\2\2\u0ca6\u0ca7\7\u00b1\2\2\u0ca7\u0ca9\5\u0260")
        buf.write("\u0131\2\u0ca8\u0ca6\3\2\2\2\u0ca8\u0ca9\3\2\2\2\u0ca9")
        buf.write("\u0cac\3\2\2\2\u0caa\u0cab\7^\2\2\u0cab\u0cad\5\u0104")
        buf.write("\u0083\2\u0cac\u0caa\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad")
        buf.write("\u00c9\3\2\2\2\u0cae\u0caf\7\u0199\2\2\u0caf\u0cb0\5\u01fa")
        buf.write("\u00fe\2\u0cb0\u0cb1\7}\2\2\u0cb1\u0cb4\t-\2\2\u0cb2\u0cb3")
        buf.write("\7\u00b1\2\2\u0cb3\u0cb5\5\u0260\u0131\2\u0cb4\u0cb2\3")
        buf.write("\2\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cb8\3\2\2\2\u0cb6\u0cb7")
        buf.write("\7^\2\2\u0cb7\u0cb9\5\u0104\u0083\2\u0cb8\u0cb6\3\2\2")
        buf.write("\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u00cb\3\2\2\2\u0cba\u0cbb")
        buf.write("\7\u0199\2\2\u0cbb\u0cbc\5\u01fa\u00fe\2\u0cbc\u0cbd\7")
        buf.write("\u014e\2\2\u0cbd\u00cd\3\2\2\2\u0cbe\u0cc0\7\u00ab\2\2")
        buf.write("\u0cbf\u0cc1\7d\2\2\u0cc0\u0cbf\3\2\2\2\u0cc0\u0cc1\3")
        buf.write("\2\2\2\u0cc1\u0cc3\3\2\2\2\u0cc2\u0cc4\7K\2\2\u0cc3\u0cc2")
        buf.write("\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5")
        buf.write("\u0cca\5\u01fa\u00fe\2\u0cc6\u0cc8\7\17\2\2\u0cc7\u0cc6")
        buf.write("\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9")
        buf.write("\u0ccb\5\u0212\u010a\2\u0cca\u0cc7\3\2\2\2\u0cca\u0ccb")
        buf.write("\3\2\2\2\u0ccb\u0ccc\3\2\2\2\u0ccc\u0ccd\7\u008f\2\2\u0ccd")
        buf.write("\u0cd2\5\u00bc_\2\u0cce\u0ccf\7\u042d\2\2\u0ccf\u0cd1")
        buf.write("\5\u00bc_\2\u0cd0\u0cce\3\2\2\2\u0cd1\u0cd4\3\2\2\2\u0cd2")
        buf.write("\u0cd0\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3\u0cd7\3\2\2\2")
        buf.write("\u0cd4\u0cd2\3\2\2\2\u0cd5\u0cd6\7\u00b1\2\2\u0cd6\u0cd8")
        buf.write("\5\u0260\u0131\2\u0cd7\u0cd5\3\2\2\2\u0cd7\u0cd8\3\2\2")
        buf.write("\2\u0cd8\u0cda\3\2\2\2\u0cd9\u0cdb\5\u00d2j\2\u0cda\u0cd9")
        buf.write("\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0cdd\3\2\2\2\u0cdc")
        buf.write("\u0cde\5\u0102\u0082\2\u0cdd\u0cdc\3\2\2\2\u0cdd\u0cde")
        buf.write("\3\2\2\2\u0cde\u00cf\3\2\2\2\u0cdf\u0ce1\7\u00ab\2\2\u0ce0")
        buf.write("\u0ce2\7d\2\2\u0ce1\u0ce0\3\2\2\2\u0ce1\u0ce2\3\2\2\2")
        buf.write("\u0ce2\u0ce4\3\2\2\2\u0ce3\u0ce5\7K\2\2\u0ce4\u0ce3\3")
        buf.write("\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6\u0ce7")
        buf.write("\5\u00d6l\2\u0ce7\u0ce8\7\u008f\2\2\u0ce8\u0ced\5\u00bc")
        buf.write("_\2\u0ce9\u0cea\7\u042d\2\2\u0cea\u0cec\5\u00bc_\2\u0ceb")
        buf.write("\u0ce9\3\2\2\2\u0cec\u0cef\3\2\2\2\u0ced\u0ceb\3\2\2\2")
        buf.write("\u0ced\u0cee\3\2\2\2\u0cee\u0cf2\3\2\2\2\u0cef\u0ced\3")
        buf.write("\2\2\2\u0cf0\u0cf1\7\u00b1\2\2\u0cf1\u0cf3\5\u0260\u0131")
        buf.write("\2\u0cf2\u0cf0\3\2\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3\u00d1")
        buf.write("\3\2\2\2\u0cf4\u0cf5\7t\2\2\u0cf5\u0cf6\7\24\2\2\u0cf6")
        buf.write("\u0cfb\5\u00d4k\2\u0cf7\u0cf8\7\u042d\2\2\u0cf8\u0cfa")
        buf.write("\5\u00d4k\2\u0cf9\u0cf7\3\2\2\2\u0cfa\u0cfd\3\2\2\2\u0cfb")
        buf.write("\u0cf9\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u00d3\3\2\2\2")
        buf.write("\u0cfd\u0cfb\3\2\2\2\u0cfe\u0d00\5\u0260\u0131\2\u0cff")
        buf.write("\u0d01\t.\2\2\u0d00\u0cff\3\2\2\2\u0d00\u0d01\3\2\2\2")
        buf.write("\u0d01\u00d5\3\2\2\2\u0d02\u0d07\5\u00d8m\2\u0d03\u0d04")
        buf.write("\7\u042d\2\2\u0d04\u0d06\5\u00d8m\2\u0d05\u0d03\3\2\2")
        buf.write("\2\u0d06\u0d09\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d07\u0d08")
        buf.write("\3\2\2\2\u0d08\u00d7\3\2\2\2\u0d09\u0d07\3\2\2\2\u0d0a")
        buf.write("\u0d0e\5\u00dan\2\u0d0b\u0d0d\5\u00e0q\2\u0d0c\u0d0b\3")
        buf.write("\2\2\2\u0d0d\u0d10\3\2\2\2\u0d0e\u0d0c\3\2\2\2\u0d0e\u0d0f")
        buf.write("\3\2\2\2\u0d0f\u0d1c\3\2\2\2\u0d10\u0d0e\3\2\2\2\u0d11")
        buf.write("\u0d12\7\u042b\2\2\u0d12\u0d16\5\u00dan\2\u0d13\u0d15")
        buf.write("\5\u00e0q\2\u0d14\u0d13\3\2\2\2\u0d15\u0d18\3\2\2\2\u0d16")
        buf.write("\u0d14\3\2\2\2\u0d16\u0d17\3\2\2\2\u0d17\u0d19\3\2\2\2")
        buf.write("\u0d18\u0d16\3\2\2\2\u0d19\u0d1a\7\u042c\2\2\u0d1a\u0d1c")
        buf.write("\3\2\2\2\u0d1b\u0d0a\3\2\2\2\u0d1b\u0d11\3\2\2\2\u0d1c")
        buf.write("\u00d9\3\2\2\2\u0d1d\u0d23\5\u01fa\u00fe\2\u0d1e\u0d1f")
        buf.write("\7x\2\2\u0d1f\u0d20\7\u042b\2\2\u0d20\u0d21\5\u0232\u011a")
        buf.write("\2\u0d21\u0d22\7\u042c\2\2\u0d22\u0d24\3\2\2\2\u0d23\u0d1e")
        buf.write("\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24\u0d29\3\2\2\2\u0d25")
        buf.write("\u0d27\7\17\2\2\u0d26\u0d25\3\2\2\2\u0d26\u0d27\3\2\2")
        buf.write("\2\u0d27\u0d28\3\2\2\2\u0d28\u0d2a\5\u0212\u010a\2\u0d29")
        buf.write("\u0d26\3\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u0d33\3\2\2\2")
        buf.write("\u0d2b\u0d30\5\u00dco\2\u0d2c\u0d2d\7\u042d\2\2\u0d2d")
        buf.write("\u0d2f\5\u00dco\2\u0d2e\u0d2c\3\2\2\2\u0d2f\u0d32\3\2")
        buf.write("\2\2\u0d30\u0d2e\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31\u0d34")
        buf.write("\3\2\2\2\u0d32\u0d30\3\2\2\2\u0d33\u0d2b\3\2\2\2\u0d33")
        buf.write("\u0d34\3\2\2\2\u0d34\u0d46\3\2\2\2\u0d35\u0d3b\5\u00b6")
        buf.write("\\\2\u0d36\u0d37\7\u042b\2\2\u0d37\u0d38\5\u00b6\\\2\u0d38")
        buf.write("\u0d39\7\u042c\2\2\u0d39\u0d3b\3\2\2\2\u0d3a\u0d35\3\2")
        buf.write("\2\2\u0d3a\u0d36\3\2\2\2\u0d3b\u0d3d\3\2\2\2\u0d3c\u0d3e")
        buf.write("\7\17\2\2\u0d3d\u0d3c\3\2\2\2\u0d3d\u0d3e\3\2\2\2\u0d3e")
        buf.write("\u0d3f\3\2\2\2\u0d3f\u0d40\5\u0212\u010a\2\u0d40\u0d46")
        buf.write("\3\2\2\2\u0d41\u0d42\7\u042b\2\2\u0d42\u0d43\5\u00d6l")
        buf.write("\2\u0d43\u0d44\7\u042c\2\2\u0d44\u0d46\3\2\2\2\u0d45\u0d1d")
        buf.write("\3\2\2\2\u0d45\u0d3a\3\2\2\2\u0d45\u0d41\3\2\2\2\u0d46")
        buf.write("\u00db\3\2\2\2\u0d47\u0d48\t/\2\2\u0d48\u0d4b\t\24\2\2")
        buf.write("\u0d49\u0d4a\7?\2\2\u0d4a\u0d4c\5\u00dep\2\u0d4b\u0d49")
        buf.write("\3\2\2\2\u0d4b\u0d4c\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d")
        buf.write("\u0d4e\7\u042b\2\2\u0d4e\u0d4f\5\u0232\u011a\2\u0d4f\u0d50")
        buf.write("\7\u042c\2\2\u0d50\u00dd\3\2\2\2\u0d51\u0d57\7V\2\2\u0d52")
        buf.write("\u0d53\7t\2\2\u0d53\u0d57\7\24\2\2\u0d54\u0d55\7G\2\2")
        buf.write("\u0d55\u0d57\7\24\2\2\u0d56\u0d51\3\2\2\2\u0d56\u0d52")
        buf.write("\3\2\2\2\u0d56\u0d54\3\2\2\2\u0d57\u00df\3\2\2\2\u0d58")
        buf.write("\u0d5a\t\60\2\2\u0d59\u0d58\3\2\2\2\u0d59\u0d5a\3\2\2")
        buf.write("\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5c\7V\2\2\u0d5c\u0d64")
        buf.write("\5\u00dan\2\u0d5d\u0d5e\7o\2\2\u0d5e\u0d65\5\u0260\u0131")
        buf.write("\2\u0d5f\u0d60\7\u00ae\2\2\u0d60\u0d61\7\u042b\2\2\u0d61")
        buf.write("\u0d62\5\u0232\u011a\2\u0d62\u0d63\7\u042c\2\2\u0d63\u0d65")
        buf.write("\3\2\2\2\u0d64\u0d5d\3\2\2\2\u0d64\u0d5f\3\2\2\2\u0d64")
        buf.write("\u0d65\3\2\2\2\u0d65\u0d85\3\2\2\2\u0d66\u0d67\7\u009e")
        buf.write("\2\2\u0d67\u0d6a\5\u00dan\2\u0d68\u0d69\7o\2\2\u0d69\u0d6b")
        buf.write("\5\u0260\u0131\2\u0d6a\u0d68\3\2\2\2\u0d6a\u0d6b\3\2\2")
        buf.write("\2\u0d6b\u0d85\3\2\2\2\u0d6c\u0d6e\t\61\2\2\u0d6d\u0d6f")
        buf.write("\7v\2\2\u0d6e\u0d6d\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f")
        buf.write("\u0d70\3\2\2\2\u0d70\u0d71\7V\2\2\u0d71\u0d79\5\u00da")
        buf.write("n\2\u0d72\u0d73\7o\2\2\u0d73\u0d7a\5\u0260\u0131\2\u0d74")
        buf.write("\u0d75\7\u00ae\2\2\u0d75\u0d76\7\u042b\2\2\u0d76\u0d77")
        buf.write("\5\u0232\u011a\2\u0d77\u0d78\7\u042c\2\2\u0d78\u0d7a\3")
        buf.write("\2\2\2\u0d79\u0d72\3\2\2\2\u0d79\u0d74\3\2\2\2\u0d7a\u0d85")
        buf.write("\3\2\2\2\u0d7b\u0d80\7j\2\2\u0d7c\u0d7e\t\61\2\2\u0d7d")
        buf.write("\u0d7f\7v\2\2\u0d7e\u0d7d\3\2\2\2\u0d7e\u0d7f\3\2\2\2")
        buf.write("\u0d7f\u0d81\3\2\2\2\u0d80\u0d7c\3\2\2\2\u0d80\u0d81\3")
        buf.write("\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d83\7V\2\2\u0d83\u0d85")
        buf.write("\5\u00dan\2\u0d84\u0d59\3\2\2\2\u0d84\u0d66\3\2\2\2\u0d84")
        buf.write("\u0d6c\3\2\2\2\u0d84\u0d7b\3\2\2\2\u0d85\u00e1\3\2\2\2")
        buf.write("\u0d86\u0d87\7\u042b\2\2\u0d87\u0d88\5\u00e6t\2\u0d88")
        buf.write("\u0d89\7\u042c\2\2\u0d89\u0d8f\3\2\2\2\u0d8a\u0d8b\7\u042b")
        buf.write("\2\2\u0d8b\u0d8c\5\u00e2r\2\u0d8c\u0d8d\7\u042c\2\2\u0d8d")
        buf.write("\u0d8f\3\2\2\2\u0d8e\u0d86\3\2\2\2\u0d8e\u0d8a\3\2\2\2")
        buf.write("\u0d8f\u00e3\3\2\2\2\u0d90\u0d91\7\u042b\2\2\u0d91\u0d92")
        buf.write("\5\u00e8u\2\u0d92\u0d93\7\u042c\2\2\u0d93\u0d99\3\2\2")
        buf.write("\2\u0d94\u0d95\7\u042b\2\2\u0d95\u0d96\5\u00e4s\2\u0d96")
        buf.write("\u0d97\7\u042c\2\2\u0d97\u0d99\3\2\2\2\u0d98\u0d90\3\2")
        buf.write("\2\2\u0d98\u0d94\3\2\2\2\u0d99\u00e5\3\2\2\2\u0d9a\u0d9e")
        buf.write("\7\u008e\2\2\u0d9b\u0d9d\5\u00eex\2\u0d9c\u0d9b\3\2\2")
        buf.write("\2\u0d9d\u0da0\3\2\2\2\u0d9e\u0d9c\3\2\2\2\u0d9e\u0d9f")
        buf.write("\3\2\2\2\u0d9f\u0da1\3\2\2\2\u0da0\u0d9e\3\2\2\2\u0da1")
        buf.write("\u0da3\5\u00f0y\2\u0da2\u0da4\5\u00f4{\2\u0da3\u0da2\3")
        buf.write("\2\2\2\u0da3\u0da4\3\2\2\2\u0da4\u0da6\3\2\2\2\u0da5\u0da7")
        buf.write("\5\u00fa~\2\u0da6\u0da5\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7")
        buf.write("\u0da9\3\2\2\2\u0da8\u0daa\5\u00fc\177\2\u0da9\u0da8\3")
        buf.write("\2\2\2\u0da9\u0daa\3\2\2\2\u0daa\u0dac\3\2\2\2\u0dab\u0dad")
        buf.write("\5\u00fe\u0080\2\u0dac\u0dab\3\2\2\2\u0dac\u0dad\3\2\2")
        buf.write("\2\u0dad\u0daf\3\2\2\2\u0dae\u0db0\5\u00d2j\2\u0daf\u0dae")
        buf.write("\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db2\3\2\2\2\u0db1")
        buf.write("\u0db3\5\u0102\u0082\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3")
        buf.write("\3\2\2\2\u0db3\u0dcf\3\2\2\2\u0db4\u0db8\7\u008e\2\2\u0db5")
        buf.write("\u0db7\5\u00eex\2\u0db6\u0db5\3\2\2\2\u0db7\u0dba\3\2")
        buf.write("\2\2\u0db8\u0db6\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dbb")
        buf.write("\3\2\2\2\u0dba\u0db8\3\2\2\2\u0dbb\u0dbd\5\u00f0y\2\u0dbc")
        buf.write("\u0dbe\5\u00fa~\2\u0dbd\u0dbc\3\2\2\2\u0dbd\u0dbe\3\2")
        buf.write("\2\2\u0dbe\u0dc0\3\2\2\2\u0dbf\u0dc1\5\u00fc\177\2\u0dc0")
        buf.write("\u0dbf\3\2\2\2\u0dc0\u0dc1\3\2\2\2\u0dc1\u0dc3\3\2\2\2")
        buf.write("\u0dc2\u0dc4\5\u00fe\u0080\2\u0dc3\u0dc2\3\2\2\2\u0dc3")
        buf.write("\u0dc4\3\2\2\2\u0dc4\u0dc6\3\2\2\2\u0dc5\u0dc7\5\u00d2")
        buf.write("j\2\u0dc6\u0dc5\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0dc9")
        buf.write("\3\2\2\2\u0dc8\u0dca\5\u0102\u0082\2\u0dc9\u0dc8\3\2\2")
        buf.write("\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dcc\3\2\2\2\u0dcb\u0dcd")
        buf.write("\5\u00f4{\2\u0dcc\u0dcb\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd")
        buf.write("\u0dcf\3\2\2\2\u0dce\u0d9a\3\2\2\2\u0dce\u0db4\3\2\2\2")
        buf.write("\u0dcf\u00e7\3\2\2\2\u0dd0\u0dd4\7\u008e\2\2\u0dd1\u0dd3")
        buf.write("\5\u00eex\2\u0dd2\u0dd1\3\2\2\2\u0dd3\u0dd6\3\2\2\2\u0dd4")
        buf.write("\u0dd2\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0dd7\3\2\2\2")
        buf.write("\u0dd6\u0dd4\3\2\2\2\u0dd7\u0dd9\5\u00f0y\2\u0dd8\u0dda")
        buf.write("\5\u00fa~\2\u0dd9\u0dd8\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda")
        buf.write("\u0ddc\3\2\2\2\u0ddb\u0ddd\5\u00fc\177\2\u0ddc\u0ddb\3")
        buf.write("\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u0ddf\3\2\2\2\u0dde\u0de0")
        buf.write("\5\u00fe\u0080\2\u0ddf\u0dde\3\2\2\2\u0ddf\u0de0\3\2\2")
        buf.write("\2\u0de0\u0de2\3\2\2\2\u0de1\u0de3\5\u00d2j\2\u0de2\u0de1")
        buf.write("\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3\u0de5\3\2\2\2\u0de4")
        buf.write("\u0de6\5\u0102\u0082\2\u0de5\u0de4\3\2\2\2\u0de5\u0de6")
        buf.write("\3\2\2\2\u0de6\u00e9\3\2\2\2\u0de7\u0de9\7\u00a7\2\2\u0de8")
        buf.write("\u0dea\t*\2\2\u0de9\u0de8\3\2\2\2\u0de9\u0dea\3\2\2\2")
        buf.write("\u0dea\u0deb\3\2\2\2\u0deb\u0dec\5\u00e4s\2\u0dec\u00eb")
        buf.write("\3\2\2\2\u0ded\u0def\7\u00a7\2\2\u0dee\u0df0\t*\2\2\u0def")
        buf.write("\u0dee\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df3\3\2\2\2")
        buf.write("\u0df1\u0df4\5\u00e8u\2\u0df2\u0df4\5\u00e4s\2\u0df3\u0df1")
        buf.write("\3\2\2\2\u0df3\u0df2\3\2\2\2\u0df4\u00ed\3\2\2\2\u0df5")
        buf.write("\u0dfe\t\62\2\2\u0df6\u0dfe\7I\2\2\u0df7\u0dfe\7\u009e")
        buf.write("\2\2\u0df8\u0dfe\7\u009a\2\2\u0df9\u0dfe\7\u0098\2\2\u0dfa")
        buf.write("\u0dfe\7\u023e\2\2\u0dfb\u0dfe\t\63\2\2\u0dfc\u0dfe\7")
        buf.write("\u0099\2\2\u0dfd\u0df5\3\2\2\2\u0dfd\u0df6\3\2\2\2\u0dfd")
        buf.write("\u0df7\3\2\2\2\u0dfd\u0df8\3\2\2\2\u0dfd\u0df9\3\2\2\2")
        buf.write("\u0dfd\u0dfa\3\2\2\2\u0dfd\u0dfb\3\2\2\2\u0dfd\u0dfc\3")
        buf.write("\2\2\2\u0dfe\u00ef\3\2\2\2\u0dff\u0e02\7\u041a\2\2\u0e00")
        buf.write("\u0e02\5\u00f2z\2\u0e01\u0dff\3\2\2\2\u0e01\u0e00\3\2")
        buf.write("\2\2\u0e02\u0e07\3\2\2\2\u0e03\u0e04\7\u042d\2\2\u0e04")
        buf.write("\u0e06\5\u00f2z\2\u0e05\u0e03\3\2\2\2\u0e06\u0e09\3\2")
        buf.write("\2\2\u0e07\u0e05\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u00f1")
        buf.write("\3\2\2\2\u0e09\u0e07\3\2\2\2\u0e0a\u0e0b\5\u01f8\u00fd")
        buf.write("\2\u0e0b\u0e0c\7\u042a\2\2\u0e0c\u0e0d\7\u041a\2\2\u0e0d")
        buf.write("\u0e28\3\2\2\2\u0e0e\u0e13\5\u01fc\u00ff\2\u0e0f\u0e11")
        buf.write("\7\17\2\2\u0e10\u0e0f\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11")
        buf.write("\u0e12\3\2\2\2\u0e12\u0e14\5\u0212\u010a\2\u0e13\u0e10")
        buf.write("\3\2\2\2\u0e13\u0e14\3\2\2\2\u0e14\u0e28\3\2\2\2\u0e15")
        buf.write("\u0e1a\5\u024c\u0127\2\u0e16\u0e18\7\17\2\2\u0e17\u0e16")
        buf.write("\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18\u0e19\3\2\2\2\u0e19")
        buf.write("\u0e1b\5\u0212\u010a\2\u0e1a\u0e17\3\2\2\2\u0e1a\u0e1b")
        buf.write("\3\2\2\2\u0e1b\u0e28\3\2\2\2\u0e1c\u0e1d\7\u0446\2\2\u0e1d")
        buf.write("\u0e1f\7\u0411\2\2\u0e1e\u0e1c\3\2\2\2\u0e1e\u0e1f\3\2")
        buf.write("\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e25\5\u0260\u0131\2\u0e21")
        buf.write("\u0e23\7\17\2\2\u0e22\u0e21\3\2\2\2\u0e22\u0e23\3\2\2")
        buf.write("\2\u0e23\u0e24\3\2\2\2\u0e24\u0e26\5\u0212\u010a\2\u0e25")
        buf.write("\u0e22\3\2\2\2\u0e25\u0e26\3\2\2\2\u0e26\u0e28\3\2\2\2")
        buf.write("\u0e27\u0e0a\3\2\2\2\u0e27\u0e0e\3\2\2\2\u0e27\u0e15\3")
        buf.write("\2\2\2\u0e27\u0e1e\3\2\2\2\u0e28\u00f3\3\2\2\2\u0e29\u0e2a")
        buf.write("\7S\2\2\u0e2a\u0e2f\5\u00be`\2\u0e2b\u0e2c\7\u042d\2\2")
        buf.write("\u0e2c\u0e2e\5\u00be`\2\u0e2d\u0e2b\3\2\2\2\u0e2e\u0e31")
        buf.write("\3\2\2\2\u0e2f\u0e2d\3\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30")
        buf.write("\u0e4e\3\2\2\2\u0e31\u0e2f\3\2\2\2\u0e32\u0e33\7S\2\2")
        buf.write("\u0e33\u0e34\7\u0173\2\2\u0e34\u0e4e\7\u043a\2\2\u0e35")
        buf.write("\u0e36\7S\2\2\u0e36\u0e37\7w\2\2\u0e37\u0e3b\7\u043a\2")
        buf.write("\2\u0e38\u0e39\7\32\2\2\u0e39\u0e3a\7\u008f\2\2\u0e3a")
        buf.write("\u0e3c\5\u0204\u0103\2\u0e3b\u0e38\3\2\2\2\u0e3b\u0e3c")
        buf.write("\3\2\2\2\u0e3c\u0e43\3\2\2\2\u0e3d\u0e3f\t\'\2\2\u0e3e")
        buf.write("\u0e40\5\u00f6|\2\u0e3f\u0e3e\3\2\2\2\u0e40\u0e41\3\2")
        buf.write("\2\2\u0e41\u0e3f\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e44")
        buf.write("\3\2\2\2\u0e43\u0e3d\3\2\2\2\u0e43\u0e44\3\2\2\2\u0e44")
        buf.write("\u0e4b\3\2\2\2\u0e45\u0e47\7`\2\2\u0e46\u0e48\5\u00f8")
        buf.write("}\2\u0e47\u0e46\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e47")
        buf.write("\3\2\2\2\u0e49\u0e4a\3\2\2\2\u0e4a\u0e4c\3\2\2\2\u0e4b")
        buf.write("\u0e45\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c\u0e4e\3\2\2\2")
        buf.write("\u0e4d\u0e29\3\2\2\2\u0e4d\u0e32\3\2\2\2\u0e4d\u0e35\3")
        buf.write("\2\2\2\u0e4e\u00f5\3\2\2\2\u0e4f\u0e50\7\u00a0\2\2\u0e50")
        buf.write("\u0e51\7\24\2\2\u0e51\u0e5c\7\u043a\2\2\u0e52\u0e54\7")
        buf.write("r\2\2\u0e53\u0e52\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e55")
        buf.write("\3\2\2\2\u0e55\u0e56\78\2\2\u0e56\u0e57\7\24\2\2\u0e57")
        buf.write("\u0e5c\7\u043a\2\2\u0e58\u0e59\79\2\2\u0e59\u0e5a\7\24")
        buf.write("\2\2\u0e5a\u0e5c\7\u043a\2\2\u0e5b\u0e4f\3\2\2\2\u0e5b")
        buf.write("\u0e53\3\2\2\2\u0e5b\u0e58\3\2\2\2\u0e5c\u00f7\3\2\2\2")
        buf.write("\u0e5d\u0e5e\7\u009d\2\2\u0e5e\u0e5f\7\24\2\2\u0e5f\u0e64")
        buf.write("\7\u043a\2\2\u0e60\u0e61\7\u00a0\2\2\u0e61\u0e62\7\24")
        buf.write("\2\2\u0e62\u0e64\7\u043a\2\2\u0e63\u0e5d\3\2\2\2\u0e63")
        buf.write("\u0e60\3\2\2\2\u0e64\u00f9\3\2\2\2\u0e65\u0e66\7B\2\2")
        buf.write("\u0e66\u0e69\5\u00d6l\2\u0e67\u0e68\7\u00b1\2\2\u0e68")
        buf.write("\u0e6a\5\u0260\u0131\2\u0e69\u0e67\3\2\2\2\u0e69\u0e6a")
        buf.write("\3\2\2\2\u0e6a\u00fb\3\2\2\2\u0e6b\u0e6c\7G\2\2\u0e6c")
        buf.write("\u0e6d\7\24\2\2\u0e6d\u0e72\5\u0100\u0081\2\u0e6e\u0e6f")
        buf.write("\7\u042d\2\2\u0e6f\u0e71\5\u0100\u0081\2\u0e70\u0e6e\3")
        buf.write("\2\2\2\u0e71\u0e74\3\2\2\2\u0e72\u0e70\3\2\2\2\u0e72\u0e73")
        buf.write("\3\2\2\2\u0e73\u0e77\3\2\2\2\u0e74\u0e72\3\2\2\2\u0e75")
        buf.write("\u0e76\7\u00b3\2\2\u0e76\u0e78\7\u0225\2\2\u0e77\u0e75")
        buf.write("\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u00fd\3\2\2\2\u0e79")
        buf.write("\u0e7a\7H\2\2\u0e7a\u0e7b\5\u0260\u0131\2\u0e7b\u00ff")
        buf.write("\3\2\2\2\u0e7c\u0e7e\5\u0260\u0131\2\u0e7d\u0e7f\t.\2")
        buf.write("\2\u0e7e\u0e7d\3\2\2\2\u0e7e\u0e7f\3\2\2\2\u0e7f\u0101")
        buf.write("\3\2\2\2\u0e80\u0e8b\7^\2\2\u0e81\u0e82\5\u0104\u0083")
        buf.write("\2\u0e82\u0e83\7\u042d\2\2\u0e83\u0e85\3\2\2\2\u0e84\u0e81")
        buf.write("\3\2\2\2\u0e84\u0e85\3\2\2\2\u0e85\u0e86\3\2\2\2\u0e86")
        buf.write("\u0e8c\5\u0104\u0083\2\u0e87\u0e88\5\u0104\u0083\2\u0e88")
        buf.write("\u0e89\7\u01ea\2\2\u0e89\u0e8a\5\u0104\u0083\2\u0e8a\u0e8c")
        buf.write("\3\2\2\2\u0e8b\u0e84\3\2\2\2\u0e8b\u0e87\3\2\2\2\u0e8c")
        buf.write("\u0103\3\2\2\2\u0e8d\u0e91\5\u0218\u010d\2\u0e8e\u0e91")
        buf.write("\5\u0202\u0102\2\u0e8f\u0e91\5\u0214\u010b\2\u0e90\u0e8d")
        buf.write("\3\2\2\2\u0e90\u0e8e\3\2\2\2\u0e90\u0e8f\3\2\2\2\u0e91")
        buf.write("\u0105\3\2\2\2\u0e92\u0e93\7\u0242\2\2\u0e93\u0e9c\7\u025a")
        buf.write("\2\2\u0e94\u0e99\5\u011c\u008f\2\u0e95\u0e96\7\u042d\2")
        buf.write("\2\u0e96\u0e98\5\u011c\u008f\2\u0e97\u0e95\3\2\2\2\u0e98")
        buf.write("\u0e9b\3\2\2\2\u0e99\u0e97\3\2\2\2\u0e99\u0e9a\3\2\2\2")
        buf.write("\u0e9a\u0e9d\3\2\2\2\u0e9b\u0e99\3\2\2\2\u0e9c\u0e94\3")
        buf.write("\2\2\2\u0e9c\u0e9d\3\2\2\2\u0e9d\u0107\3\2\2\2\u0e9e\u0ea0")
        buf.write("\7\u013d\2\2\u0e9f\u0ea1\7\u0271\2\2\u0ea0\u0e9f\3\2\2")
        buf.write("\2\u0ea0\u0ea1\3\2\2\2\u0ea1\u0109\3\2\2\2\u0ea2\u0ea4")
        buf.write("\7\u0155\2\2\u0ea3\u0ea5\7\u0271\2\2\u0ea4\u0ea3\3\2\2")
        buf.write("\2\u0ea4\u0ea5\3\2\2\2\u0ea5\u0eab\3\2\2\2\u0ea6\u0ea8")
        buf.write("\7\16\2\2\u0ea7\u0ea9\7\u01e5\2\2\u0ea8\u0ea7\3\2\2\2")
        buf.write("\u0ea8\u0ea9\3\2\2\2\u0ea9\u0eaa\3\2\2\2\u0eaa\u0eac\7")
        buf.write("\u0146\2\2\u0eab\u0ea6\3\2\2\2\u0eab\u0eac\3\2\2\2\u0eac")
        buf.write("\u0eb1\3\2\2\2\u0ead\u0eaf\7\u01e5\2\2\u0eae\u0ead\3\2")
        buf.write("\2\2\u0eae\u0eaf\3\2\2\2\u0eaf\u0eb0\3\2\2\2\u0eb0\u0eb2")
        buf.write("\7\u0081\2\2\u0eb1\u0eae\3\2\2\2\u0eb1\u0eb2\3\2\2\2\u0eb2")
        buf.write("\u010b\3\2\2\2\u0eb3\u0eb5\7\u0224\2\2\u0eb4\u0eb6\7\u0271")
        buf.write("\2\2\u0eb5\u0eb4\3\2\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0ebc")
        buf.write("\3\2\2\2\u0eb7\u0eb9\7\16\2\2\u0eb8\u0eba\7\u01e5\2\2")
        buf.write("\u0eb9\u0eb8\3\2\2\2\u0eb9\u0eba\3\2\2\2\u0eba\u0ebb\3")
        buf.write("\2\2\2\u0ebb\u0ebd\7\u0146\2\2\u0ebc\u0eb7\3\2\2\2\u0ebc")
        buf.write("\u0ebd\3\2\2\2\u0ebd\u0ec2\3\2\2\2\u0ebe\u0ec0\7\u01e5")
        buf.write("\2\2\u0ebf\u0ebe\3\2\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0\u0ec1")
        buf.write("\3\2\2\2\u0ec1\u0ec3\7\u0081\2\2\u0ec2\u0ebf\3\2\2\2\u0ec2")
        buf.write("\u0ec3\3\2\2\2\u0ec3\u010d\3\2\2\2\u0ec4\u0ec5\7\u022a")
        buf.write("\2\2\u0ec5\u0ec6\5\u0212\u010a\2\u0ec6\u010f\3\2\2\2\u0ec7")
        buf.write("\u0ec9\7\u0224\2\2\u0ec8\u0eca\7\u0271\2\2\u0ec9\u0ec8")
        buf.write("\3\2\2\2\u0ec9\u0eca\3\2\2\2\u0eca\u0ecb\3\2\2\2\u0ecb")
        buf.write("\u0ecd\7\u00a2\2\2\u0ecc\u0ece\7\u022a\2\2\u0ecd\u0ecc")
        buf.write("\3\2\2\2\u0ecd\u0ece\3\2\2\2\u0ece\u0ecf\3\2\2\2\u0ecf")
        buf.write("\u0ed0\5\u0212\u010a\2\u0ed0\u0111\3\2\2\2\u0ed1\u0ed2")
        buf.write("\7\u0081\2\2\u0ed2\u0ed3\7\u022a\2\2\u0ed3\u0ed4\5\u0212")
        buf.write("\u010a\2\u0ed4\u0113\3\2\2\2\u0ed5\u0ed6\7b\2\2\u0ed6")
        buf.write("\u0ed7\7\u0283\2\2\u0ed7\u0edc\5\u011e\u0090\2\u0ed8\u0ed9")
        buf.write("\7\u042d\2\2\u0ed9\u0edb\5\u011e\u0090\2\u0eda\u0ed8\3")
        buf.write("\2\2\2\u0edb\u0ede\3\2\2\2\u0edc\u0eda\3\2\2\2\u0edc\u0edd")
        buf.write("\3\2\2\2\u0edd\u0115\3\2\2\2\u0ede\u0edc\3\2\2\2\u0edf")
        buf.write("\u0ee0\7\u00a9\2\2\u0ee0\u0ee1\7\u0283\2\2\u0ee1\u0117")
        buf.write("\3\2\2\2\u0ee2\u0ee3\7\u008f\2\2\u0ee3\u0ee4\7\u0139\2")
        buf.write("\2\u0ee4\u0ee5\7\u0422\2\2\u0ee5\u0ee6\t\30\2\2\u0ee6")
        buf.write("\u0119\3\2\2\2\u0ee7\u0ee9\7\u008f\2\2\u0ee8\u0eea\t\64")
        buf.write("\2\2\u0ee9\u0ee8\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eeb")
        buf.write("\3\2\2\2\u0eeb\u0eec\7\u025a\2\2\u0eec\u0ef1\5\u0122\u0092")
        buf.write("\2\u0eed\u0eee\7\u042d\2\2\u0eee\u0ef0\5\u0122\u0092\2")
        buf.write("\u0eef\u0eed\3\2\2\2\u0ef0\u0ef3\3\2\2\2\u0ef1\u0eef\3")
        buf.write("\2\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u011b\3\2\2\2\u0ef3\u0ef1")
        buf.write("\3\2\2\2\u0ef4\u0ef5\7\u00b3\2\2\u0ef5\u0ef6\7\u015d\2")
        buf.write("\2\u0ef6\u0efc\7\u0235\2\2\u0ef7\u0ef8\7}\2\2\u0ef8\u0efc")
        buf.write("\7\u00b4\2\2\u0ef9\u0efa\7}\2\2\u0efa\u0efc\7\u01f0\2")
        buf.write("\2\u0efb\u0ef4\3\2\2\2\u0efb\u0ef7\3\2\2\2\u0efb\u0ef9")
        buf.write("\3\2\2\2\u0efc\u011d\3\2\2\2\u0efd\u0f02\5\u01fa\u00fe")
        buf.write("\2\u0efe\u0f00\7\17\2\2\u0eff\u0efe\3\2\2\2\u0eff\u0f00")
        buf.write("\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01\u0f03\5\u0212\u010a")
        buf.write("\2\u0f02\u0eff\3\2\2\2\u0f02\u0f03\3\2\2\2\u0f03\u0f04")
        buf.write("\3\2\2\2\u0f04\u0f05\5\u0120\u0091\2\u0f05\u011f\3\2\2")
        buf.write("\2\u0f06\u0f08\7}\2\2\u0f07\u0f09\7\u01b6\2\2\u0f08\u0f07")
        buf.write("\3\2\2\2\u0f08\u0f09\3\2\2\2\u0f09\u0f0f\3\2\2\2\u0f0a")
        buf.write("\u0f0c\7d\2\2\u0f0b\u0f0a\3\2\2\2\u0f0b\u0f0c\3\2\2\2")
        buf.write("\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f0f\7\u00b4\2\2\u0f0e\u0f06")
        buf.write("\3\2\2\2\u0f0e\u0f0b\3\2\2\2\u0f0f\u0121\3\2\2\2\u0f10")
        buf.write("\u0f11\7\u01ac\2\2\u0f11\u0f12\7\u01b4\2\2\u0f12\u0f18")
        buf.write("\5\u0124\u0093\2\u0f13\u0f14\7}\2\2\u0f14\u0f18\7\u00b4")
        buf.write("\2\2\u0f15\u0f16\7}\2\2\u0f16\u0f18\7\u01f0\2\2\u0f17")
        buf.write("\u0f10\3\2\2\2\u0f17\u0f13\3\2\2\2\u0f17\u0f15\3\2\2\2")
        buf.write("\u0f18\u0123\3\2\2\2\u0f19\u0f1a\7\u02e0\2\2\u0f1a\u0f21")
        buf.write("\7}\2\2\u0f1b\u0f1c\7}\2\2\u0f1c\u0f21\7\u02e1\2\2\u0f1d")
        buf.write("\u0f1e\7}\2\2\u0f1e\u0f21\7\u02e2\2\2\u0f1f\u0f21\7\u02e3")
        buf.write("\2\2\u0f20\u0f19\3\2\2\2\u0f20\u0f1b\3\2\2\2\u0f20\u0f1d")
        buf.write("\3\2\2\2\u0f20\u0f1f\3\2\2\2\u0f21\u0125\3\2\2\2\u0f22")
        buf.write("\u0f23\7\31\2\2\u0f23\u0f24\7\u01b9\2\2\u0f24\u0f25\7")
        buf.write("\u00a2\2\2\u0f25\u0f2a\5\u0138\u009d\2\u0f26\u0f27\7\u042d")
        buf.write("\2\2\u0f27\u0f29\5\u0138\u009d\2\u0f28\u0f26\3\2\2\2\u0f29")
        buf.write("\u0f2c\3\2\2\2\u0f2a\u0f28\3\2\2\2\u0f2a\u0f2b\3\2\2\2")
        buf.write("\u0f2b\u0f2e\3\2\2\2\u0f2c\u0f2a\3\2\2\2\u0f2d\u0f2f\5")
        buf.write("\u0140\u00a1\2\u0f2e\u0f2d\3\2\2\2\u0f2e\u0f2f\3\2\2\2")
        buf.write("\u0f2f\u0127\3\2\2\2\u0f30\u0f31\7\31\2\2\u0f31\u0f32")
        buf.write("\7\u021d\2\2\u0f32\u0f33\7\u018d\2\2\u0f33\u0f38\5\u0142")
        buf.write("\u00a2\2\u0f34\u0f35\7\u042d\2\2\u0f35\u0f37\5\u0142\u00a2")
        buf.write("\2\u0f36\u0f34\3\2\2\2\u0f37\u0f3a\3\2\2\2\u0f38\u0f36")
        buf.write("\3\2\2\2\u0f38\u0f39\3\2\2\2\u0f39\u0129\3\2\2\2\u0f3a")
        buf.write("\u0f38\3\2\2\2\u0f3b\u0f3c\7{\2\2\u0f3c\u0f3d\t\65\2\2")
        buf.write("\u0f3d\u0f42\7\u01b8\2\2\u0f3e\u0f3f\7\u00a2\2\2\u0f3f")
        buf.write("\u0f43\7\u043a\2\2\u0f40\u0f41\7\21\2\2\u0f41\u0f43\7")
        buf.write("\u043a\2\2\u0f42\u0f3e\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f43")
        buf.write("\u012b\3\2\2\2\u0f44\u0f45\7\u021e\2\2\u0f45\u0f46\7\u01b9")
        buf.write("\2\2\u0f46\u012d\3\2\2\2\u0f47\u0f48\7\u021e\2\2\u0f48")
        buf.write("\u0f4a\7\u0233\2\2\u0f49\u0f4b\7\n\2\2\u0f4a\u0f49\3\2")
        buf.write("\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u0f4d\3\2\2\2\u0f4c\u0f4e")
        buf.write("\5\u0140\u00a1\2\u0f4d\u0f4c\3\2\2\2\u0f4d\u0f4e\3\2\2")
        buf.write("\2\u0f4e\u012f\3\2\2\2\u0f4f\u0f50\7\u0242\2\2\u0f50\u0f59")
        buf.write("\7\u0233\2\2\u0f51\u0f56\5\u0146\u00a4\2\u0f52\u0f53\7")
        buf.write("\u042d\2\2\u0f53\u0f55\5\u0146\u00a4\2\u0f54\u0f52\3\2")
        buf.write("\2\2\u0f55\u0f58\3\2\2\2\u0f56\u0f54\3\2\2\2\u0f56\u0f57")
        buf.write("\3\2\2\2\u0f57\u0f5a\3\2\2\2\u0f58\u0f56\3\2\2\2\u0f59")
        buf.write("\u0f51\3\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0f5d\3\2\2\2")
        buf.write("\u0f5b\u0f5c\7\u0263\2\2\u0f5c\u0f5e\5\u0148\u00a5\2\u0f5d")
        buf.write("\u0f5b\3\2\2\2\u0f5d\u0f5e\3\2\2\2\u0f5e\u0f62\3\2\2\2")
        buf.write("\u0f5f\u0f61\5\u014a\u00a6\2\u0f60\u0f5f\3\2\2\2\u0f61")
        buf.write("\u0f64\3\2\2\2\u0f62\u0f60\3\2\2\2\u0f62\u0f63\3\2\2\2")
        buf.write("\u0f63\u0f66\3\2\2\2\u0f64\u0f62\3\2\2\2\u0f65\u0f67\5")
        buf.write("\u0140\u00a1\2\u0f66\u0f65\3\2\2\2\u0f66\u0f67\3\2\2\2")
        buf.write("\u0f67\u0131\3\2\2\2\u0f68\u0f69\7\u0248\2\2\u0f69\u0f72")
        buf.write("\7\u0233\2\2\u0f6a\u0f6f\5\u0146\u00a4\2\u0f6b\u0f6c\7")
        buf.write("\u042d\2\2\u0f6c\u0f6e\5\u0146\u00a4\2\u0f6d\u0f6b\3\2")
        buf.write("\2\2\u0f6e\u0f71\3\2\2\2\u0f6f\u0f6d\3\2\2\2\u0f6f\u0f70")
        buf.write("\3\2\2\2\u0f70\u0f73\3\2\2\2\u0f71\u0f6f\3\2\2\2\u0f72")
        buf.write("\u0f6a\3\2\2\2\u0f72\u0f73\3\2\2\2\u0f73\u0133\3\2\2\2")
        buf.write("\u0f74\u0f75\7\u0242\2\2\u0f75\u0f76\7\u0198\2\2\u0f76")
        buf.write("\u0135\3\2\2\2\u0f77\u0f78\7\u0248\2\2\u0f78\u0f79\7\u0198")
        buf.write("\2\2\u0f79\u0137\3\2\2\2\u0f7a\u0f7b\5\u013a\u009e\2\u0f7b")
        buf.write("\u0f7c\7\u0422\2\2\u0f7c\u0f7d\7\u043a\2\2\u0f7d\u0f98")
        buf.write("\3\2\2\2\u0f7e\u0f7f\5\u013c\u009f\2\u0f7f\u0f80\7\u0422")
        buf.write("\2\2\u0f80\u0f81\5\u0218\u010d\2\u0f81\u0f98\3\2\2\2\u0f82")
        buf.write("\u0f83\5\u013e\u00a0\2\u0f83\u0f84\7\u0422\2\2\u0f84\u0f85")
        buf.write("\t\30\2\2\u0f85\u0f98\3\2\2\2\u0f86\u0f87\7\u01bd\2\2")
        buf.write("\u0f87\u0f88\7\u0422\2\2\u0f88\u0f98\7\u043d\2\2\u0f89")
        buf.write("\u0f8a\7\u019f\2\2\u0f8a\u0f8b\7\u0422\2\2\u0f8b\u0f94")
        buf.write("\7\u042b\2\2\u0f8c\u0f91\5\u0212\u010a\2\u0f8d\u0f8e\7")
        buf.write("\u042d\2\2\u0f8e\u0f90\5\u0212\u010a\2\u0f8f\u0f8d\3\2")
        buf.write("\2\2\u0f90\u0f93\3\2\2\2\u0f91\u0f8f\3\2\2\2\u0f91\u0f92")
        buf.write("\3\2\2\2\u0f92\u0f95\3\2\2\2\u0f93\u0f91\3\2\2\2\u0f94")
        buf.write("\u0f8c\3\2\2\2\u0f94\u0f95\3\2\2\2\u0f95\u0f96\3\2\2\2")
        buf.write("\u0f96\u0f98\7\u042c\2\2\u0f97\u0f7a\3\2\2\2\u0f97\u0f7e")
        buf.write("\3\2\2\2\u0f97\u0f82\3\2\2\2\u0f97\u0f86\3\2\2\2\u0f97")
        buf.write("\u0f89\3\2\2\2\u0f98\u0139\3\2\2\2\u0f99\u0f9a\t\66\2")
        buf.write("\2\u0f9a\u013b\3\2\2\2\u0f9b\u0f9c\t\67\2\2\u0f9c\u013d")
        buf.write("\3\2\2\2\u0f9d\u0f9e\t8\2\2\u0f9e\u013f\3\2\2\2\u0f9f")
        buf.write("\u0fa0\7?\2\2\u0fa0\u0fa1\7\u0148\2\2\u0fa1\u0fa2\7\u043a")
        buf.write("\2\2\u0fa2\u0141\3\2\2\2\u0fa3\u0fa4\7\u0216\2\2\u0fa4")
        buf.write("\u0fa5\7\u0422\2\2\u0fa5\u0fa6\7\u042b\2\2\u0fa6\u0fa7")
        buf.write("\5\u0232\u011a\2\u0fa7\u0fa8\7\u042c\2\2\u0fa8\u0fd5\3")
        buf.write("\2\2\2\u0fa9\u0faa\7\u0218\2\2\u0faa\u0fab\7\u0422\2\2")
        buf.write("\u0fab\u0fac\7\u042b\2\2\u0fac\u0fad\5\u0232\u011a\2\u0fad")
        buf.write("\u0fae\7\u042c\2\2\u0fae\u0fd5\3\2\2\2\u0faf\u0fb0\7\u0217")
        buf.write("\2\2\u0fb0\u0fb1\7\u0422\2\2\u0fb1\u0fb2\7\u042b\2\2\u0fb2")
        buf.write("\u0fb3\5\u0234\u011b\2\u0fb3\u0fb4\7\u042c\2\2\u0fb4\u0fd5")
        buf.write("\3\2\2\2\u0fb5\u0fb6\7\u0219\2\2\u0fb6\u0fb7\7\u0422\2")
        buf.write("\2\u0fb7\u0fb8\7\u042b\2\2\u0fb8\u0fb9\5\u0234\u011b\2")
        buf.write("\u0fb9\u0fba\7\u042c\2\2\u0fba\u0fd5\3\2\2\2\u0fbb\u0fbc")
        buf.write("\7\u021b\2\2\u0fbc\u0fbd\7\u0422\2\2\u0fbd\u0fbe\7\u042b")
        buf.write("\2\2\u0fbe\u0fbf\5\u023e\u0120\2\u0fbf\u0fc0\7\u042c\2")
        buf.write("\2\u0fc0\u0fd5\3\2\2\2\u0fc1\u0fc2\7\u021c\2\2\u0fc2\u0fc3")
        buf.write("\7\u0422\2\2\u0fc3\u0fc4\7\u042b\2\2\u0fc4\u0fc5\5\u023e")
        buf.write("\u0120\2\u0fc5\u0fc6\7\u042c\2\2\u0fc6\u0fd5\3\2\2\2\u0fc7")
        buf.write("\u0fc8\7\u021a\2\2\u0fc8\u0fc9\7\u0422\2\2\u0fc9\u0fca")
        buf.write("\7\u042b\2\2\u0fca\u0fcf\5\u0144\u00a3\2\u0fcb\u0fcc\7")
        buf.write("\u042d\2\2\u0fcc\u0fce\5\u0144\u00a3\2\u0fcd\u0fcb\3\2")
        buf.write("\2\2\u0fce\u0fd1\3\2\2\2\u0fcf\u0fcd\3\2\2\2\u0fcf\u0fd0")
        buf.write("\3\2\2\2\u0fd0\u0fd2\3\2\2\2\u0fd1\u0fcf\3\2\2\2\u0fd2")
        buf.write("\u0fd3\7\u042c\2\2\u0fd3\u0fd5\3\2\2\2\u0fd4\u0fa3\3\2")
        buf.write("\2\2\u0fd4\u0fa9\3\2\2\2\u0fd4\u0faf\3\2\2\2\u0fd4\u0fb5")
        buf.write("\3\2\2\2\u0fd4\u0fbb\3\2\2\2\u0fd4\u0fc1\3\2\2\2\u0fd4")
        buf.write("\u0fc7\3\2\2\2\u0fd5\u0143\3\2\2\2\u0fd6\u0fd7\7\u042b")
        buf.write("\2\2\u0fd7\u0fd8\5\u01fa\u00fe\2\u0fd8\u0fd9\7\u042d\2")
        buf.write("\2\u0fd9\u0fda\5\u01fa\u00fe\2\u0fda\u0fdb\7\u042c\2\2")
        buf.write("\u0fdb\u0145\3\2\2\2\u0fdc\u0fdd\t9\2\2\u0fdd\u0147\3")
        buf.write("\2\2\2\u0fde\u0fdf\t:\2\2\u0fdf\u0fe0\7\u0422\2\2\u0fe0")
        buf.write("\u0ff1\5\u014c\u00a7\2\u0fe1\u0fe2\7\u01bf\2\2\u0fe2\u0fe3")
        buf.write("\7\u0422\2\2\u0fe3\u0fe4\7\u043a\2\2\u0fe4\u0fe5\7\u042d")
        buf.write("\2\2\u0fe5\u0fe6\7\u01c0\2\2\u0fe6\u0fe7\7\u0422\2\2\u0fe7")
        buf.write("\u0ff1\5\u0218\u010d\2\u0fe8\u0fe9\7\u0210\2\2\u0fe9\u0fea")
        buf.write("\7\u0422\2\2\u0fea\u0feb\7\u043a\2\2\u0feb\u0fec\7\u042d")
        buf.write("\2\2\u0fec\u0fed\7\u0211\2\2\u0fed\u0fee\7\u0422\2\2\u0fee")
        buf.write("\u0ff1\5\u0218\u010d\2\u0fef\u0ff1\7\u023c\2\2\u0ff0\u0fde")
        buf.write("\3\2\2\2\u0ff0\u0fe1\3\2\2\2\u0ff0\u0fe8\3\2\2\2\u0ff0")
        buf.write("\u0fef\3\2\2\2\u0ff1\u0149\3\2\2\2\u0ff2\u0ff3\7\u0265")
        buf.write("\2\2\u0ff3\u0ff4\7\u0422\2\2\u0ff4\u0fff\7\u043a\2\2\u0ff5")
        buf.write("\u0ff6\7\u01fb\2\2\u0ff6\u0ff7\7\u0422\2\2\u0ff7\u0fff")
        buf.write("\7\u043a\2\2\u0ff8\u0ff9\7\u016a\2\2\u0ff9\u0ffa\7\u0422")
        buf.write("\2\2\u0ffa\u0fff\7\u043a\2\2\u0ffb\u0ffc\7\u01fe\2\2\u0ffc")
        buf.write("\u0ffd\7\u0422\2\2\u0ffd\u0fff\7\u043a\2\2\u0ffe\u0ff2")
        buf.write("\3\2\2\2\u0ffe\u0ff5\3\2\2\2\u0ffe\u0ff8\3\2\2\2\u0ffe")
        buf.write("\u0ffb\3\2\2\2\u0fff\u014b\3\2\2\2\u1000\u1005\5\u020a")
        buf.write("\u0106\2\u1001\u1002\7\u042d\2\2\u1002\u1004\5\u020a\u0106")
        buf.write("\2\u1003\u1001\3\2\2\2\u1004\u1007\3\2\2\2\u1005\u1003")
        buf.write("\3\2\2\2\u1005\u1006\3\2\2\2\u1006\u100a\3\2\2\2\u1007")
        buf.write("\u1005\3\2\2\2\u1008\u100a\7\u043a\2\2\u1009\u1000\3\2")
        buf.write("\2\2\u1009\u1008\3\2\2\2\u100a\u014d\3\2\2\2\u100b\u100c")
        buf.write("\7\u0274\2\2\u100c\u100d\t;\2\2\u100d\u100f\5\u020c\u0107")
        buf.write("\2\u100e\u1010\t<\2\2\u100f\u100e\3\2\2\2\u100f\u1010")
        buf.write("\3\2\2\2\u1010\u014f\3\2\2\2\u1011\u1012\7\u0274\2\2\u1012")
        buf.write("\u1013\7\u0178\2\2\u1013\u1019\5\u020c\u0107\2\u1014\u1017")
        buf.write("\7\u0250\2\2\u1015\u1016\7?\2\2\u1016\u1018\7\u01d9\2")
        buf.write("\2\u1017\u1015\3\2\2\2\u1017\u1018\3\2\2\2\u1018\u101a")
        buf.write("\3\2\2\2\u1019\u1014\3\2\2\2\u1019\u101a\3\2\2\2\u101a")
        buf.write("\u0151\3\2\2\2\u101b\u101c\7\u0274\2\2\u101c\u101d\7\u0202")
        buf.write("\2\2\u101d\u101e\5\u020c\u0107\2\u101e\u0153\3\2\2\2\u101f")
        buf.write("\u1020\7\u0274\2\2\u1020\u1021\7\u0155\2\2\u1021\u1024")
        buf.write("\5\u020c\u0107\2\u1022\u1023\7\u01ee\2\2\u1023\u1025\7")
        buf.write("\u01fc\2\2\u1024\u1022\3\2\2\2\u1024\u1025\3\2\2\2\u1025")
        buf.write("\u0155\3\2\2\2\u1026\u1027\7\u0274\2\2\u1027\u1028\7\u0224")
        buf.write("\2\2\u1028\u1029\5\u020c\u0107\2\u1029\u0157\3\2\2\2\u102a")
        buf.write("\u102b\7\u0274\2\2\u102b\u102e\7\u020c\2\2\u102c\u102d")
        buf.write("\7!\2\2\u102d\u102f\5\u020c\u0107\2\u102e\u102c\3\2\2")
        buf.write("\2\u102e\u102f\3\2\2\2\u102f\u0159\3\2\2\2\u1030\u1031")
        buf.write("\7\u0202\2\2\u1031\u1032\5\u0212\u010a\2\u1032\u1035\7")
        buf.write("B\2\2\u1033\u1036\7\u043a\2\2\u1034\u1036\7\u0446\2\2")
        buf.write("\u1035\u1033\3\2\2\2\u1035\u1034\3\2\2\2\u1036\u015b\3")
        buf.write("\2\2\2\u1037\u1038\7\u0285\2\2\u1038\u103b\5\u0212\u010a")
        buf.write("\2\u1039\u103a\7\u00ae\2\2\u103a\u103c\5\u0240\u0121\2")
        buf.write("\u103b\u1039\3\2\2\2\u103b\u103c\3\2\2\2\u103c\u015d\3")
        buf.write("\2\2\2\u103d\u103e\t=\2\2\u103e\u103f\7\u0202\2\2\u103f")
        buf.write("\u1040\5\u0212\u010a\2\u1040\u015f\3\2\2\2\u1041\u1044")
        buf.write("\5\u0162\u00b2\2\u1042\u1044\5\6\4\2\u1043\u1041\3\2\2")
        buf.write("\2\u1043\u1042\3\2\2\2\u1044\u0161\3\2\2\2\u1045\u1046")
        buf.write("\5\u0212\u010a\2\u1046\u1047\7\u0436\2\2\u1047\u1049\3")
        buf.write("\2\2\2\u1048\u1045\3\2\2\2\u1048\u1049\3\2\2\2\u1049\u104a")
        buf.write("\3\2\2\2\u104a\u1071\7\u013d\2\2\u104b\u104c\5\u0176\u00bc")
        buf.write("\2\u104c\u104d\7\u042e\2\2\u104d\u104f\3\2\2\2\u104e\u104b")
        buf.write("\3\2\2\2\u104f\u1052\3\2\2\2\u1050\u104e\3\2\2\2\u1050")
        buf.write("\u1051\3\2\2\2\u1051\u1058\3\2\2\2\u1052\u1050\3\2\2\2")
        buf.write("\u1053\u1054\5\u0178\u00bd\2\u1054\u1055\7\u042e\2\2\u1055")
        buf.write("\u1057\3\2\2\2\u1056\u1053\3\2\2\2\u1057\u105a\3\2\2\2")
        buf.write("\u1058\u1056\3\2\2\2\u1058\u1059\3\2\2\2\u1059\u1060\3")
        buf.write("\2\2\2\u105a\u1058\3\2\2\2\u105b\u105c\5\u017a\u00be\2")
        buf.write("\u105c\u105d\7\u042e\2\2\u105d\u105f\3\2\2\2\u105e\u105b")
        buf.write("\3\2\2\2\u105f\u1062\3\2\2\2\u1060\u105e\3\2\2\2\u1060")
        buf.write("\u1061\3\2\2\2\u1061\u1068\3\2\2\2\u1062\u1060\3\2\2\2")
        buf.write("\u1063\u1064\5\u017c\u00bf\2\u1064\u1065\7\u042e\2\2\u1065")
        buf.write("\u1067\3\2\2\2\u1066\u1063\3\2\2\2\u1067\u106a\3\2\2\2")
        buf.write("\u1068\u1066\3\2\2\2\u1068\u1069\3\2\2\2\u1069\u106e\3")
        buf.write("\2\2\2\u106a\u1068\3\2\2\2\u106b\u106d\5\u0180\u00c1\2")
        buf.write("\u106c\u106b\3\2\2\2\u106d\u1070\3\2\2\2\u106e\u106c\3")
        buf.write("\2\2\2\u106e\u106f\3\2\2\2\u106f\u1072\3\2\2\2\u1070\u106e")
        buf.write("\3\2\2\2\u1071\u1050\3\2\2\2\u1071\u1072\3\2\2\2\u1072")
        buf.write("\u1073\3\2\2\2\u1073\u1075\7\u0178\2\2\u1074\u1076\5\u0212")
        buf.write("\u010a\2\u1075\u1074\3\2\2\2\u1075\u1076\3\2\2\2\u1076")
        buf.write("\u0163\3\2\2\2\u1077\u107a\7\27\2\2\u1078\u107b\5\u0212")
        buf.write("\u010a\2\u1079\u107b\5\u0260\u0131\2\u107a\u1078\3\2\2")
        buf.write("\2\u107a\u1079\3\2\2\2\u107a\u107b\3\2\2\2\u107b\u107d")
        buf.write("\3\2\2\2\u107c\u107e\5\u0182\u00c2\2\u107d\u107c\3\2\2")
        buf.write("\2\u107e\u107f\3\2\2\2\u107f\u107d\3\2\2\2\u107f\u1080")
        buf.write("\3\2\2\2\u1080\u1087\3\2\2\2\u1081\u1083\7\65\2\2\u1082")
        buf.write("\u1084\5\u0180\u00c1\2\u1083\u1082\3\2\2\2\u1084\u1085")
        buf.write("\3\2\2\2\u1085\u1083\3\2\2\2\u1085\u1086\3\2\2\2\u1086")
        buf.write("\u1088\3\2\2\2\u1087\u1081\3\2\2\2\u1087\u1088\3\2\2\2")
        buf.write("\u1088\u1089\3\2\2\2\u1089\u108a\7\u0178\2\2\u108a\u108b")
        buf.write("\7\27\2\2\u108b\u0165\3\2\2\2\u108c\u108d\7J\2\2\u108d")
        buf.write("\u108e\5\u0260\u0131\2\u108e\u1090\7\u00a1\2\2\u108f\u1091")
        buf.write("\5\u0180\u00c1\2\u1090\u108f\3\2\2\2\u1091\u1092\3\2\2")
        buf.write("\2\u1092\u1090\3\2\2\2\u1092\u1093\3\2\2\2\u1093\u1097")
        buf.write("\3\2\2\2\u1094\u1096\5\u0184\u00c3\2\u1095\u1094\3\2\2")
        buf.write("\2\u1096\u1099\3\2\2\2\u1097\u1095\3\2\2\2\u1097\u1098")
        buf.write("\3\2\2\2\u1098\u10a0\3\2\2\2\u1099\u1097\3\2\2\2\u109a")
        buf.write("\u109c\7\65\2\2\u109b\u109d\5\u0180\u00c1\2\u109c\u109b")
        buf.write("\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u109c\3\2\2\2\u109e")
        buf.write("\u109f\3\2\2\2\u109f\u10a1\3\2\2\2\u10a0\u109a\3\2\2\2")
        buf.write("\u10a0\u10a1\3\2\2\2\u10a1\u10a2\3\2\2\2\u10a2\u10a3\7")
        buf.write("\u0178\2\2\u10a3\u10a4\7J\2\2\u10a4\u0167\3\2\2\2\u10a5")
        buf.write("\u10a6\7U\2\2\u10a6\u10a7\5\u0212\u010a\2\u10a7\u0169")
        buf.write("\3\2\2\2\u10a8\u10a9\7[\2\2\u10a9\u10aa\5\u0212\u010a")
        buf.write("\2\u10aa\u016b\3\2\2\2\u10ab\u10ac\5\u0212\u010a\2\u10ac")
        buf.write("\u10ad\7\u0436\2\2\u10ad\u10af\3\2\2\2\u10ae\u10ab\3\2")
        buf.write("\2\2\u10ae\u10af\3\2\2\2\u10af\u10b0\3\2\2\2\u10b0\u10b2")
        buf.write("\7c\2\2\u10b1\u10b3\5\u0180\u00c1\2\u10b2\u10b1\3\2\2")
        buf.write("\2\u10b3\u10b4\3\2\2\2\u10b4\u10b2\3\2\2\2\u10b4\u10b5")
        buf.write("\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u10b7\7\u0178\2\2\u10b7")
        buf.write("\u10b9\7c\2\2\u10b8\u10ba\5\u0212\u010a\2\u10b9\u10b8")
        buf.write("\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba\u016d\3\2\2\2\u10bb")
        buf.write("\u10bc\5\u0212\u010a\2\u10bc\u10bd\7\u0436\2\2\u10bd\u10bf")
        buf.write("\3\2\2\2\u10be\u10bb\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf")
        buf.write("\u10c0\3\2\2\2\u10c0\u10c2\7\u0083\2\2\u10c1\u10c3\5\u0180")
        buf.write("\u00c1\2\u10c2\u10c1\3\2\2\2\u10c3\u10c4\3\2\2\2\u10c4")
        buf.write("\u10c2\3\2\2\2\u10c4\u10c5\3\2\2\2\u10c5\u10c6\3\2\2\2")
        buf.write("\u10c6\u10c7\7\u0263\2\2\u10c7\u10c8\5\u0260\u0131\2\u10c8")
        buf.write("\u10c9\7\u0178\2\2\u10c9\u10cb\7\u0083\2\2\u10ca\u10cc")
        buf.write("\5\u0212\u010a\2\u10cb\u10ca\3\2\2\2\u10cb\u10cc\3\2\2")
        buf.write("\2\u10cc\u016f\3\2\2\2\u10cd\u10ce\7\u0088\2\2\u10ce\u10cf")
        buf.write("\5\u0260\u0131\2\u10cf\u0171\3\2\2\2\u10d0\u10d1\5\u0212")
        buf.write("\u010a\2\u10d1\u10d2\7\u0436\2\2\u10d2\u10d4\3\2\2\2\u10d3")
        buf.write("\u10d0\3\2\2\2\u10d3\u10d4\3\2\2\2\u10d4\u10d5\3\2\2\2")
        buf.write("\u10d5\u10d6\7\u00b2\2\2\u10d6\u10d7\5\u0260\u0131\2\u10d7")
        buf.write("\u10d9\7\u0172\2\2\u10d8\u10da\5\u0180\u00c1\2\u10d9\u10d8")
        buf.write("\3\2\2\2\u10da\u10db\3\2\2\2\u10db\u10d9\3\2\2\2\u10db")
        buf.write("\u10dc\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10de\7\u0178")
        buf.write("\2\2\u10de\u10e0\7\u00b2\2\2\u10df\u10e1\5\u0212\u010a")
        buf.write("\2\u10e0\u10df\3\2\2\2\u10e0\u10e1\3\2\2\2\u10e1\u0173")
        buf.write("\3\2\2\2\u10e2\u10e3\7\u014e\2\2\u10e3\u10f2\5\u0212\u010a")
        buf.write("\2\u10e4\u10e9\7>\2\2\u10e5\u10e7\7\u01e4\2\2\u10e6\u10e5")
        buf.write("\3\2\2\2\u10e6\u10e7\3\2\2\2\u10e7\u10e8\3\2\2\2\u10e8")
        buf.write("\u10ea\7B\2\2\u10e9\u10e6\3\2\2\2\u10e9\u10ea\3\2\2\2")
        buf.write("\u10ea\u10eb\3\2\2\2\u10eb\u10ec\5\u0212\u010a\2\u10ec")
        buf.write("\u10ed\7S\2\2\u10ed\u10ee\5\u0232\u011a\2\u10ee\u10f2")
        buf.write("\3\2\2\2\u10ef\u10f0\7\u01f1\2\2\u10f0\u10f2\5\u0212\u010a")
        buf.write("\2\u10f1\u10e2\3\2\2\2\u10f1\u10e4\3\2\2\2\u10f1\u10ef")
        buf.write("\3\2\2\2\u10f2\u0175\3\2\2\2\u10f3\u10f4\7)\2\2\u10f4")
        buf.write("\u10f5\5\u0232\u011a\2\u10f5\u10f8\5\u0226\u0114\2\u10f6")
        buf.write("\u10f7\7*\2\2\u10f7\u10f9\5\u0260\u0131\2\u10f8\u10f6")
        buf.write("\3\2\2\2\u10f8\u10f9\3\2\2\2\u10f9\u0177\3\2\2\2\u10fa")
        buf.write("\u10fb\7)\2\2\u10fb\u10fc\5\u0212\u010a\2\u10fc\u10fd")
        buf.write("\7\36\2\2\u10fd\u1104\7?\2\2\u10fe\u1105\5\u0218\u010d")
        buf.write("\2\u10ff\u1101\7\u0096\2\2\u1100\u1102\7\u0269\2\2\u1101")
        buf.write("\u1100\3\2\2\2\u1101\u1102\3\2\2\2\u1102\u1103\3\2\2\2")
        buf.write("\u1103\u1105\7\u043a\2\2\u1104\u10fe\3\2\2\2\u1104\u10ff")
        buf.write("\3\2\2\2\u1105\u0179\3\2\2\2\u1106\u1107\7)\2\2\u1107")
        buf.write("\u1108\5\u0212\u010a\2\u1108\u1109\7&\2\2\u1109\u110a")
        buf.write("\7?\2\2\u110a\u110b\5\u00b6\\\2\u110b\u017b\3\2\2\2\u110c")
        buf.write("\u110d\7)\2\2\u110d\u110e\t>\2\2\u110e\u110f\7\u0199\2")
        buf.write("\2\u110f\u1110\7?\2\2\u1110\u1115\5\u017e\u00c0\2\u1111")
        buf.write("\u1112\7\u042d\2\2\u1112\u1114\5\u017e\u00c0\2\u1113\u1111")
        buf.write("\3\2\2\2\u1114\u1117\3\2\2\2\u1115\u1113\3\2\2\2\u1115")
        buf.write("\u1116\3\2\2\2\u1116\u1118\3\2\2\2\u1117\u1115\3\2\2\2")
        buf.write("\u1118\u1119\5\u0160\u00b1\2\u1119\u017d\3\2\2\2\u111a")
        buf.write("\u1126\5\u0218\u010d\2\u111b\u111d\7\u0096\2\2\u111c\u111e")
        buf.write("\7\u0269\2\2\u111d\u111c\3\2\2\2\u111d\u111e\3\2\2\2\u111e")
        buf.write("\u111f\3\2\2\2\u111f\u1126\7\u043a\2\2\u1120\u1126\5\u0212")
        buf.write("\u010a\2\u1121\u1126\7\u0097\2\2\u1122\u1123\7k\2\2\u1123")
        buf.write("\u1126\7\u0192\2\2\u1124\u1126\7\u0095\2\2\u1125\u111a")
        buf.write("\3\2\2\2\u1125\u111b\3\2\2\2\u1125\u1120\3\2\2\2\u1125")
        buf.write("\u1121\3\2\2\2\u1125\u1122\3\2\2\2\u1125\u1124\3\2\2\2")
        buf.write("\u1126\u017f\3\2\2\2\u1127\u112a\5\24\13\2\u1128\u112a")
        buf.write("\5\6\4\2\u1129\u1127\3\2\2\2\u1129\u1128\3\2\2\2\u112a")
        buf.write("\u112b\3\2\2\2\u112b\u112c\7\u042e\2\2\u112c\u0181\3\2")
        buf.write("\2\2\u112d\u1130\7\u00b0\2\2\u112e\u1131\5\u0224\u0113")
        buf.write("\2\u112f\u1131\5\u0260\u0131\2\u1130\u112e\3\2\2\2\u1130")
        buf.write("\u112f\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1134\7\u00a1")
        buf.write("\2\2\u1133\u1135\5\u0180\u00c1\2\u1134\u1133\3\2\2\2\u1135")
        buf.write("\u1136\3\2\2\2\u1136\u1134\3\2\2\2\u1136\u1137\3\2\2\2")
        buf.write("\u1137\u0183\3\2\2\2\u1138\u1139\7\66\2\2\u1139\u113a")
        buf.write("\5\u0260\u0131\2\u113a\u113c\7\u00a1\2\2\u113b\u113d\5")
        buf.write("\u0180\u00c1\2\u113c\u113b\3\2\2\2\u113d\u113e\3\2\2\2")
        buf.write("\u113e\u113c\3\2\2\2\u113e\u113f\3\2\2\2\u113f\u0185\3")
        buf.write("\2\2\2\u1140\u1141\7\13\2\2\u1141\u1142\7\u0265\2\2\u1142")
        buf.write("\u1147\5\u0198\u00cd\2\u1143\u1144\7\u042d\2\2\u1144\u1146")
        buf.write("\5\u0198\u00cd\2\u1145\u1143\3\2\2\2\u1146\u1149\3\2\2")
        buf.write("\2\u1147\u1145\3\2\2\2\u1147\u1148\3\2\2\2\u1148\u1177")
        buf.write("\3\2\2\2\u1149\u1147\3\2\2\2\u114a\u114b\7\13\2\2\u114b")
        buf.write("\u114d\7\u0265\2\2\u114c\u114e\5\u0248\u0125\2\u114d\u114c")
        buf.write("\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u114f\3\2\2\2\u114f")
        buf.write("\u1154\5\u019a\u00ce\2\u1150\u1151\7\u042d\2\2\u1151\u1153")
        buf.write("\5\u019a\u00ce\2\u1152\u1150\3\2\2\2\u1153\u1156\3\2\2")
        buf.write("\2\u1154\u1152\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1165")
        buf.write("\3\2\2\2\u1156\u1154\3\2\2\2\u1157\u1163\7\u0085\2\2\u1158")
        buf.write("\u1164\7\u01e7\2\2\u1159\u1160\5\u019c\u00cf\2\u115a\u115c")
        buf.write("\7\16\2\2\u115b\u115a\3\2\2\2\u115b\u115c\3\2\2\2\u115c")
        buf.write("\u115d\3\2\2\2\u115d\u115f\5\u019c\u00cf\2\u115e\u115b")
        buf.write("\3\2\2\2\u115f\u1162\3\2\2\2\u1160\u115e\3\2\2\2\u1160")
        buf.write("\u1161\3\2\2\2\u1161\u1164\3\2\2\2\u1162\u1160\3\2\2\2")
        buf.write("\u1163\u1158\3\2\2\2\u1163\u1159\3\2\2\2\u1164\u1166\3")
        buf.write("\2\2\2\u1165\u1157\3\2\2\2\u1165\u1166\3\2\2\2\u1166\u116d")
        buf.write("\3\2\2\2\u1167\u1169\7\u00b3\2\2\u1168\u116a\5\u019e\u00d0")
        buf.write("\2\u1169\u1168\3\2\2\2\u116a\u116b\3\2\2\2\u116b\u1169")
        buf.write("\3\2\2\2\u116b\u116c\3\2\2\2\u116c\u116e\3\2\2\2\u116d")
        buf.write("\u1167\3\2\2\2\u116d\u116e\3\2\2\2\u116e\u1173\3\2\2\2")
        buf.write("\u116f\u1172\5\u01a0\u00d1\2\u1170\u1172\5\u01a2\u00d2")
        buf.write("\2\u1171\u116f\3\2\2\2\u1171\u1170\3\2\2\2\u1172\u1175")
        buf.write("\3\2\2\2\u1173\u1171\3\2\2\2\u1173\u1174\3\2\2\2\u1174")
        buf.write("\u1177\3\2\2\2\u1175\u1173\3\2\2\2\u1176\u1140\3\2\2\2")
        buf.write("\u1176\u114a\3\2\2\2\u1177\u0187\3\2\2\2\u1178\u1179\7")
        buf.write("\"\2\2\u1179\u117a\7\u0265\2\2\u117a\u117f\5\u019a\u00ce")
        buf.write("\2\u117b\u117c\7\u042d\2\2\u117c\u117e\5\u019a\u00ce\2")
        buf.write("\u117d\u117b\3\2\2\2\u117e\u1181\3\2\2\2\u117f\u117d\3")
        buf.write("\2\2\2\u117f\u1180\3\2\2\2\u1180\u11af\3\2\2\2\u1181\u117f")
        buf.write("\3\2\2\2\u1182\u1183\7\"\2\2\u1183\u1185\7\u0265\2\2\u1184")
        buf.write("\u1186\5\u024a\u0126\2\u1185\u1184\3\2\2\2\u1185\u1186")
        buf.write("\3\2\2\2\u1186\u1187\3\2\2\2\u1187\u118c\5\u019a\u00ce")
        buf.write("\2\u1188\u1189\7\u042d\2\2\u1189\u118b\5\u019a\u00ce\2")
        buf.write("\u118a\u1188\3\2\2\2\u118b\u118e\3\2\2\2\u118c\u118a\3")
        buf.write("\2\2\2\u118c\u118d\3\2\2\2\u118d\u119d\3\2\2\2\u118e\u118c")
        buf.write("\3\2\2\2\u118f\u119b\7\u0085\2\2\u1190\u119c\7\u01e7\2")
        buf.write("\2\u1191\u1198\5\u019c\u00cf\2\u1192\u1194\7\16\2\2\u1193")
        buf.write("\u1192\3\2\2\2\u1193\u1194\3\2\2\2\u1194\u1195\3\2\2\2")
        buf.write("\u1195\u1197\5\u019c\u00cf\2\u1196\u1193\3\2\2\2\u1197")
        buf.write("\u119a\3\2\2\2\u1198\u1196\3\2\2\2\u1198\u1199\3\2\2\2")
        buf.write("\u1199\u119c\3\2\2\2\u119a\u1198\3\2\2\2\u119b\u1190\3")
        buf.write("\2\2\2\u119b\u1191\3\2\2\2\u119c\u119e\3\2\2\2\u119d\u118f")
        buf.write("\3\2\2\2\u119d\u119e\3\2\2\2\u119e\u11a5\3\2\2\2\u119f")
        buf.write("\u11a1\7\u00b3\2\2\u11a0\u11a2\5\u019e\u00d0\2\u11a1\u11a0")
        buf.write("\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a1\3\2\2\2\u11a3")
        buf.write("\u11a4\3\2\2\2\u11a4\u11a6\3\2\2\2\u11a5\u119f\3\2\2\2")
        buf.write("\u11a5\u11a6\3\2\2\2\u11a6\u11ab\3\2\2\2\u11a7\u11aa\5")
        buf.write("\u01a0\u00d1\2\u11a8\u11aa\5\u01a2\u00d2\2\u11a9\u11a7")
        buf.write("\3\2\2\2\u11a9\u11a8\3\2\2\2\u11aa\u11ad\3\2\2\2\u11ab")
        buf.write("\u11a9\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11af\3\2\2\2")
        buf.write("\u11ad\u11ab\3\2\2\2\u11ae\u1178\3\2\2\2\u11ae\u1182\3")
        buf.write("\2\2\2\u11af\u0189\3\2\2\2\u11b0\u11b1\7\63\2\2\u11b1")
        buf.write("\u11b3\7\u0265\2\2\u11b2\u11b4\5\u0248\u0125\2\u11b3\u11b2")
        buf.write("\3\2\2\2\u11b3\u11b4\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5")
        buf.write("\u11ba\5\u0200\u0101\2\u11b6\u11b7\7\u042d\2\2\u11b7\u11b9")
        buf.write("\5\u0200\u0101\2\u11b8\u11b6\3\2\2\2\u11b9\u11bc\3\2\2")
        buf.write("\2\u11ba\u11b8\3\2\2\2\u11ba\u11bb\3\2\2\2\u11bb\u018b")
        buf.write("\3\2\2\2\u11bc\u11ba\3\2\2\2\u11bd\u11be\7F\2\2\u11be")
        buf.write("\u11c3\5\u01a4\u00d3\2\u11bf\u11c0\7\u042d\2\2\u11c0\u11c2")
        buf.write("\5\u01a4\u00d3\2\u11c1\u11bf\3\2\2\2\u11c2\u11c5\3\2\2")
        buf.write("\2\u11c3\u11c1\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4\u11c6")
        buf.write("\3\2\2\2\u11c5\u11c3\3\2\2\2\u11c6\u11c8\7o\2\2\u11c7")
        buf.write("\u11c9\t?\2\2\u11c8\u11c7\3\2\2\2\u11c8\u11c9\3\2\2\2")
        buf.write("\u11c9\u11ca\3\2\2\2\u11ca\u11cb\5\u01a8\u00d5\2\u11cb")
        buf.write("\u11cc\7\u00a2\2\2\u11cc\u11d1\5\u019a\u00ce\2\u11cd\u11ce")
        buf.write("\7\u042d\2\2\u11ce\u11d0\5\u019a\u00ce\2\u11cf\u11cd\3")
        buf.write("\2\2\2\u11d0\u11d3\3\2\2\2\u11d1\u11cf\3\2\2\2\u11d1\u11d2")
        buf.write("\3\2\2\2\u11d2\u11e2\3\2\2\2\u11d3\u11d1\3\2\2\2\u11d4")
        buf.write("\u11e0\7\u0085\2\2\u11d5\u11e1\7\u01e7\2\2\u11d6\u11dd")
        buf.write("\5\u019c\u00cf\2\u11d7\u11d9\7\16\2\2\u11d8\u11d7\3\2")
        buf.write("\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11da\3\2\2\2\u11da\u11dc")
        buf.write("\5\u019c\u00cf\2\u11db\u11d8\3\2\2\2\u11dc\u11df\3\2\2")
        buf.write("\2\u11dd\u11db\3\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11e1")
        buf.write("\3\2\2\2\u11df\u11dd\3\2\2\2\u11e0\u11d5\3\2\2\2\u11e0")
        buf.write("\u11d6\3\2\2\2\u11e1\u11e3\3\2\2\2\u11e2\u11d4\3\2\2\2")
        buf.write("\u11e2\u11e3\3\2\2\2\u11e3\u11ed\3\2\2\2\u11e4\u11ea\7")
        buf.write("\u00b3\2\2\u11e5\u11e6\7F\2\2\u11e6\u11e9\7q\2\2\u11e7")
        buf.write("\u11e9\5\u019e\u00d0\2\u11e8\u11e5\3\2\2\2\u11e8\u11e7")
        buf.write("\3\2\2\2\u11e9\u11ec\3\2\2\2\u11ea\u11e8\3\2\2\2\u11ea")
        buf.write("\u11eb\3\2\2\2\u11eb\u11ee\3\2\2\2\u11ec\u11ea\3\2\2\2")
        buf.write("\u11ed\u11e4\3\2\2\2\u11ed\u11ee\3\2\2\2\u11ee\u120d\3")
        buf.write("\2\2\2\u11ef\u11f0\7F\2\2\u11f0\u11f5\5\u0212\u010a\2")
        buf.write("\u11f1\u11f2\7\u042d\2\2\u11f2\u11f4\5\u0212\u010a\2\u11f3")
        buf.write("\u11f1\3\2\2\2\u11f4\u11f7\3\2\2\2\u11f5\u11f3\3\2\2\2")
        buf.write("\u11f5\u11f6\3\2\2\2\u11f6\u11f8\3\2\2\2\u11f7\u11f5\3")
        buf.write("\2\2\2\u11f8\u11fb\7\u00a2\2\2\u11f9\u11fc\5\u0200\u0101")
        buf.write("\2\u11fa\u11fc\5\u0212\u010a\2\u11fb\u11f9\3\2\2\2\u11fb")
        buf.write("\u11fa\3\2\2\2\u11fc\u1204\3\2\2\2\u11fd\u1200\7\u042d")
        buf.write("\2\2\u11fe\u1201\5\u0200\u0101\2\u11ff\u1201\5\u0212\u010a")
        buf.write("\2\u1200\u11fe\3\2\2\2\u1200\u11ff\3\2\2\2\u1201\u1203")
        buf.write("\3\2\2\2\u1202\u11fd\3\2\2\2\u1203\u1206\3\2\2\2\u1204")
        buf.write("\u1202\3\2\2\2\u1204\u1205\3\2\2\2\u1205\u120a\3\2\2\2")
        buf.write("\u1206\u1204\3\2\2\2\u1207\u1208\7\u00b3\2\2\u1208\u1209")
        buf.write("\7\u0449\2\2\u1209\u120b\7q\2\2\u120a\u1207\3\2\2\2\u120a")
        buf.write("\u120b\3\2\2\2\u120b\u120d\3\2\2\2\u120c\u11bd\3\2\2\2")
        buf.write("\u120c\u11ef\3\2\2\2\u120d\u018d\3\2\2\2\u120e\u120f\7")
        buf.write("F\2\2\u120f\u1210\7\u0208\2\2\u1210\u1211\7o\2\2\u1211")
        buf.write("\u1212\5\u0200\u0101\2\u1212\u1213\7\u00a2\2\2\u1213\u1218")
        buf.write("\5\u0200\u0101\2\u1214\u1215\7\u042d\2\2\u1215\u1217\5")
        buf.write("\u0200\u0101\2\u1216\u1214\3\2\2\2\u1217\u121a\3\2\2\2")
        buf.write("\u1218\u1216\3\2\2\2\u1218\u1219\3\2\2\2\u1219\u121e\3")
        buf.write("\2\2\2\u121a\u1218\3\2\2\2\u121b\u121c\7\u00b3\2\2\u121c")
        buf.write("\u121d\7F\2\2\u121d\u121f\7q\2\2\u121e\u121b\3\2\2\2\u121e")
        buf.write("\u121f\3\2\2\2\u121f\u018f\3\2\2\2\u1220\u1221\7\u0082")
        buf.write("\2\2\u1221\u1222\7\u0265\2\2\u1222\u1227\5\u01aa\u00d6")
        buf.write("\2\u1223\u1224\7\u042d\2\2\u1224\u1226\5\u01aa\u00d6\2")
        buf.write("\u1225\u1223\3\2\2\2\u1226\u1229\3\2\2\2\u1227\u1225\3")
        buf.write("\2\2\2\u1227\u1228\3\2\2\2\u1228\u0191\3\2\2\2\u1229\u1227")
        buf.write("\3\2\2\2\u122a\u122b\7\u0089\2\2\u122b\u1230\5\u01a4\u00d3")
        buf.write("\2\u122c\u122d\7\u042d\2\2\u122d\u122f\5\u01a4\u00d3\2")
        buf.write("\u122e\u122c\3\2\2\2\u122f\u1232\3\2\2\2\u1230\u122e\3")
        buf.write("\2\2\2\u1230\u1231\3\2\2\2\u1231\u1233\3\2\2\2\u1232\u1230")
        buf.write("\3\2\2\2\u1233\u1235\7o\2\2\u1234\u1236\t?\2\2\u1235\u1234")
        buf.write("\3\2\2\2\u1235\u1236\3\2\2\2\u1236\u1237\3\2\2\2\u1237")
        buf.write("\u1238\5\u01a8\u00d5\2\u1238\u1239\7B\2\2\u1239\u123e")
        buf.write("\5\u0200\u0101\2\u123a\u123b\7\u042d\2\2\u123b\u123d\5")
        buf.write("\u0200\u0101\2\u123c\u123a\3\2\2\2\u123d\u1240\3\2\2\2")
        buf.write("\u123e\u123c\3\2\2\2\u123e\u123f\3\2\2\2\u123f\u126b\3")
        buf.write("\2\2\2\u1240\u123e\3\2\2\2\u1241\u1242\7\u0089\2\2\u1242")
        buf.write("\u1244\7\n\2\2\u1243\u1245\7\u028b\2\2\u1244\u1243\3\2")
        buf.write("\2\2\u1244\u1245\3\2\2\2\u1245\u1246\3\2\2\2\u1246\u1247")
        buf.write("\7\u042d\2\2\u1247\u1248\7F\2\2\u1248\u1249\7q\2\2\u1249")
        buf.write("\u124a\7B\2\2\u124a\u124f\5\u0200\u0101\2\u124b\u124c")
        buf.write("\7\u042d\2\2\u124c\u124e\5\u0200\u0101\2\u124d\u124b\3")
        buf.write("\2\2\2\u124e\u1251\3\2\2\2\u124f\u124d\3\2\2\2\u124f\u1250")
        buf.write("\3\2\2\2\u1250\u126b\3\2\2\2\u1251\u124f\3\2\2\2\u1252")
        buf.write("\u1253\7\u0089\2\2\u1253\u1258\5\u0212\u010a\2\u1254\u1255")
        buf.write("\7\u042d\2\2\u1255\u1257\5\u0212\u010a\2\u1256\u1254\3")
        buf.write("\2\2\2\u1257\u125a\3\2\2\2\u1258\u1256\3\2\2\2\u1258\u1259")
        buf.write("\3\2\2\2\u1259\u125b\3\2\2\2\u125a\u1258\3\2\2\2\u125b")
        buf.write("\u125e\7B\2\2\u125c\u125f\5\u0200\u0101\2\u125d\u125f")
        buf.write("\5\u0212\u010a\2\u125e\u125c\3\2\2\2\u125e\u125d\3\2\2")
        buf.write("\2\u125f\u1267\3\2\2\2\u1260\u1263\7\u042d\2\2\u1261\u1264")
        buf.write("\5\u0200\u0101\2\u1262\u1264\5\u0212\u010a\2\u1263\u1261")
        buf.write("\3\2\2\2\u1263\u1262\3\2\2\2\u1264\u1266\3\2\2\2\u1265")
        buf.write("\u1260\3\2\2\2\u1266\u1269\3\2\2\2\u1267\u1265\3\2\2\2")
        buf.write("\u1267\u1268\3\2\2\2\u1268\u126b\3\2\2\2\u1269\u1267\3")
        buf.write("\2\2\2\u126a\u122a\3\2\2\2\u126a\u1241\3\2\2\2\u126a\u1252")
        buf.write("\3\2\2\2\u126b\u0193\3\2\2\2\u126c\u126d\7\u0089\2\2\u126d")
        buf.write("\u126e\7\u0208\2\2\u126e\u126f\7o\2\2\u126f\u1270\5\u0200")
        buf.write("\u0101\2\u1270\u1271\7B\2\2\u1271\u1276\5\u0200\u0101")
        buf.write("\2\u1272\u1273\7\u042d\2\2\u1273\u1275\5\u0200\u0101\2")
        buf.write("\u1274\u1272\3\2\2\2\u1275\u1278\3\2\2\2\u1276\u1274\3")
        buf.write("\2\2\2\u1276\u1277\3\2\2\2\u1277\u0195\3\2\2\2\u1278\u1276")
        buf.write("\3\2\2\2\u1279\u127a\7\u008f\2\2\u127a\u127d\7\u01fb\2")
        buf.write("\2\u127b\u127c\7?\2\2\u127c\u127e\5\u0200\u0101\2\u127d")
        buf.write("\u127b\3\2\2\2\u127d\u127e\3\2\2\2\u127e\u127f\3\2\2\2")
        buf.write("\u127f\u1282\7\u0422\2\2\u1280\u1283\5\u025a\u012e\2\u1281")
        buf.write("\u1283\7\u043a\2\2\u1282\u1280\3\2\2\2\u1282\u1281\3\2")
        buf.write("\2\2\u1283\u0197\3\2\2\2\u1284\u1285\5\u0200\u0101\2\u1285")
        buf.write("\u1286\5\u01a0\u00d1\2\u1286\u0199\3\2\2\2\u1287\u1288")
        buf.write("\5\u0200\u0101\2\u1288\u1289\7\u019e\2\2\u1289\u128a\7")
        buf.write("\24\2\2\u128a\u128b\7\u01fb\2\2\u128b\u128c\7\u043a\2")
        buf.write("\2\u128c\u12a0\3\2\2\2\u128d\u128e\5\u0200\u0101\2\u128e")
        buf.write("\u1291\7\u019e\2\2\u128f\u1290\7\u00b3\2\2\u1290\u1292")
        buf.write("\5\u0210\u0109\2\u1291\u128f\3\2\2\2\u1291\u1292\3\2\2")
        buf.write("\2\u1292\u1293\3\2\2\2\u1293\u1294\7\24\2\2\u1294\u1295")
        buf.write("\7\u043a\2\2\u1295\u12a0\3\2\2\2\u1296\u1297\5\u0200\u0101")
        buf.write("\2\u1297\u1298\7\u019e\2\2\u1298\u1299\7\u00b3\2\2\u1299")
        buf.write("\u129c\5\u0210\u0109\2\u129a\u129b\7\17\2\2\u129b\u129d")
        buf.write("\7\u043a\2\2\u129c\u129a\3\2\2\2\u129c\u129d\3\2\2\2\u129d")
        buf.write("\u12a0\3\2\2\2\u129e\u12a0\5\u0200\u0101\2\u129f\u1287")
        buf.write("\3\2\2\2\u129f\u128d\3\2\2\2\u129f\u1296\3\2\2\2\u129f")
        buf.write("\u129e\3\2\2\2\u12a0\u019b\3\2\2\2\u12a1\u12aa\7\u009b")
        buf.write("\2\2\u12a2\u12aa\7\u0273\2\2\u12a3\u12a4\7\u014b\2\2\u12a4")
        buf.write("\u12aa\7\u043a\2\2\u12a5\u12a6\7\u01ad\2\2\u12a6\u12aa")
        buf.write("\7\u043a\2\2\u12a7\u12a8\7\u024d\2\2\u12a8\u12aa\7\u043a")
        buf.write("\2\2\u12a9\u12a1\3\2\2\2\u12a9\u12a2\3\2\2\2\u12a9\u12a3")
        buf.write("\3\2\2\2\u12a9\u12a5\3\2\2\2\u12a9\u12a7\3\2\2\2\u12aa")
        buf.write("\u019d\3\2\2\2\u12ab\u12ac\7\u01cf\2\2\u12ac\u12b4\5\u0218")
        buf.write("\u010d\2\u12ad\u12ae\7\u01d2\2\2\u12ae\u12b4\5\u0218\u010d")
        buf.write("\2\u12af\u12b0\7\u01ce\2\2\u12b0\u12b4\5\u0218\u010d\2")
        buf.write("\u12b1\u12b2\7\u01d3\2\2\u12b2\u12b4\5\u0218\u010d\2\u12b3")
        buf.write("\u12ab\3\2\2\2\u12b3\u12ad\3\2\2\2\u12b3\u12af\3\2\2\2")
        buf.write("\u12b3\u12b1\3\2\2\2\u12b4\u019f\3\2\2\2\u12b5\u12b6\7")
        buf.write("\u01fb\2\2\u12b6\u12bd\7\u0185\2\2\u12b7\u12be\7*\2\2")
        buf.write("\u12b8\u12be\7\u01e3\2\2\u12b9\u12ba\7R\2\2\u12ba\u12bb")
        buf.write("\5\u0218\u010d\2\u12bb\u12bc\7\u027d\2\2\u12bc\u12be\3")
        buf.write("\2\2\2\u12bd\u12b7\3\2\2\2\u12bd\u12b8\3\2\2\2\u12bd\u12b9")
        buf.write("\3\2\2\2\u12bd\u12be\3\2\2\2\u12be\u01a1\3\2\2\2\u12bf")
        buf.write("\u12c0\7\u0131\2\2\u12c0\u12c1\t@\2\2\u12c1\u01a3\3\2")
        buf.write("\2\2\u12c2\u12c7\5\u01a6\u00d4\2\u12c3\u12c4\7\u042b\2")
        buf.write("\2\u12c4\u12c5\5\u0232\u011a\2\u12c5\u12c6\7\u042c\2\2")
        buf.write("\u12c6\u12c8\3\2\2\2\u12c7\u12c3\3\2\2\2\u12c7\u12c8\3")
        buf.write("\2\2\2\u12c8\u01a5\3\2\2\2\u12c9\u12cb\7\n\2\2\u12ca\u12cc")
        buf.write("\7\u028b\2\2\u12cb\u12ca\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc")
        buf.write("\u1319\3\2\2\2\u12cd\u12cf\7\13\2\2\u12ce\u12d0\7\u0284")
        buf.write("\2\2\u12cf\u12ce\3\2\2\2\u12cf\u12d0\3\2\2\2\u12d0\u1319")
        buf.write("\3\2\2\2\u12d1\u12d9\7\"\2\2\u12d2\u12d3\7\u0256\2\2\u12d3")
        buf.write("\u12da\7\u0283\2\2\u12d4\u12da\7\u0284\2\2\u12d5\u12da")
        buf.write("\7\u026b\2\2\u12d6\u12da\7\u0265\2\2\u12d7\u12da\7\u0254")
        buf.write("\2\2\u12d8\u12da\7\u0223\2\2\u12d9\u12d2\3\2\2\2\u12d9")
        buf.write("\u12d4\3\2\2\2\u12d9\u12d5\3\2\2\2\u12d9\u12d6\3\2\2\2")
        buf.write("\u12d9\u12d7\3\2\2\2\u12d9\u12d8\3\2\2\2\u12d9\u12da\3")
        buf.write("\2\2\2\u12da\u1319\3\2\2\2\u12db\u1319\7,\2\2\u12dc\u12de")
        buf.write("\7\63\2\2\u12dd\u12df\7\u0223\2\2\u12de\u12dd\3\2\2\2")
        buf.write("\u12de\u12df\3\2\2\2\u12df\u1319\3\2\2\2\u12e0\u1319\7")
        buf.write("\u0180\2\2\u12e1\u1319\7\u0285\2\2\u12e2\u1319\7\u0286")
        buf.write("\2\2\u12e3\u12e4\7F\2\2\u12e4\u1319\7q\2\2\u12e5\u1319")
        buf.write("\7M\2\2\u12e6\u1319\7Q\2\2\u12e7\u12e8\7b\2\2\u12e8\u1319")
        buf.write("\7\u0283\2\2\u12e9\u1319\7\u0287\2\2\u12ea\u1319\7\u0208")
        buf.write("\2\2\u12eb\u1319\7\177\2\2\u12ec\u1319\7\u0288\2\2\u12ed")
        buf.write("\u12ee\7\u021d\2\2\u12ee\u1319\tA\2\2\u12ef\u1319\7\u008e")
        buf.write("\2\2\u12f0\u12f1\7\u0091\2\2\u12f1\u1319\tB\2\2\u12f2")
        buf.write("\u1319\7\u0289\2\2\u12f3\u1319\7\u028a\2\2\u12f4\u1319")
        buf.write("\7\u00a4\2\2\u12f5\u1319\7\u00ab\2\2\u12f6\u1319\7\u00ac")
        buf.write("\2\2\u12f7\u1319\7\u028c\2\2\u12f8\u1319\7\u028d\2\2\u12f9")
        buf.write("\u1319\7\u028e\2\2\u12fa\u1319\7\u028f\2\2\u12fb\u1319")
        buf.write("\7\u0290\2\2\u12fc\u1319\7\u0291\2\2\u12fd\u1319\7\u0292")
        buf.write("\2\2\u12fe\u1319\7\u0293\2\2\u12ff\u1319\7\u0294\2\2\u1300")
        buf.write("\u1319\7\u0295\2\2\u1301\u1319\7\u0296\2\2\u1302\u1319")
        buf.write("\7\u0297\2\2\u1303\u1319\7\u0298\2\2\u1304\u1319\7\u0299")
        buf.write("\2\2\u1305\u1319\7\u029a\2\2\u1306\u1319\7\u029b\2\2\u1307")
        buf.write("\u1319\7\u029c\2\2\u1308\u1319\7\u029d\2\2\u1309\u1319")
        buf.write("\7\u029e\2\2\u130a\u1319\7\u029f\2\2\u130b\u1319\7\u02a0")
        buf.write("\2\2\u130c\u1319\7\u02a1\2\2\u130d\u1319\7\u02a2\2\2\u130e")
        buf.write("\u1319\7\u02a3\2\2\u130f\u1319\7\u02a4\2\2\u1310\u1319")
        buf.write("\7\u02a5\2\2\u1311\u1319\7\u02a6\2\2\u1312\u1319\7\u02a7")
        buf.write("\2\2\u1313\u1319\7\u03f3\2\2\u1314\u1319\7\u02a8\2\2\u1315")
        buf.write("\u1319\7\u02a9\2\2\u1316\u1319\7\u02aa\2\2\u1317\u1319")
        buf.write("\7\u02ab\2\2\u1318\u12c9\3\2\2\2\u1318\u12cd\3\2\2\2\u1318")
        buf.write("\u12d1\3\2\2\2\u1318\u12db\3\2\2\2\u1318\u12dc\3\2\2\2")
        buf.write("\u1318\u12e0\3\2\2\2\u1318\u12e1\3\2\2\2\u1318\u12e2\3")
        buf.write("\2\2\2\u1318\u12e3\3\2\2\2\u1318\u12e5\3\2\2\2\u1318\u12e6")
        buf.write("\3\2\2\2\u1318\u12e7\3\2\2\2\u1318\u12e9\3\2\2\2\u1318")
        buf.write("\u12ea\3\2\2\2\u1318\u12eb\3\2\2\2\u1318\u12ec\3\2\2\2")
        buf.write("\u1318\u12ed\3\2\2\2\u1318\u12ef\3\2\2\2\u1318\u12f0\3")
        buf.write("\2\2\2\u1318\u12f2\3\2\2\2\u1318\u12f3\3\2\2\2\u1318\u12f4")
        buf.write("\3\2\2\2\u1318\u12f5\3\2\2\2\u1318\u12f6\3\2\2\2\u1318")
        buf.write("\u12f7\3\2\2\2\u1318\u12f8\3\2\2\2\u1318\u12f9\3\2\2\2")
        buf.write("\u1318\u12fa\3\2\2\2\u1318\u12fb\3\2\2\2\u1318\u12fc\3")
        buf.write("\2\2\2\u1318\u12fd\3\2\2\2\u1318\u12fe\3\2\2\2\u1318\u12ff")
        buf.write("\3\2\2\2\u1318\u1300\3\2\2\2\u1318\u1301\3\2\2\2\u1318")
        buf.write("\u1302\3\2\2\2\u1318\u1303\3\2\2\2\u1318\u1304\3\2\2\2")
        buf.write("\u1318\u1305\3\2\2\2\u1318\u1306\3\2\2\2\u1318\u1307\3")
        buf.write("\2\2\2\u1318\u1308\3\2\2\2\u1318\u1309\3\2\2\2\u1318\u130a")
        buf.write("\3\2\2\2\u1318\u130b\3\2\2\2\u1318\u130c\3\2\2\2\u1318")
        buf.write("\u130d\3\2\2\2\u1318\u130e\3\2\2\2\u1318\u130f\3\2\2\2")
        buf.write("\u1318\u1310\3\2\2\2\u1318\u1311\3\2\2\2\u1318\u1312\3")
        buf.write("\2\2\2\u1318\u1313\3\2\2\2\u1318\u1314\3\2\2\2\u1318\u1315")
        buf.write("\3\2\2\2\u1318\u1316\3\2\2\2\u1318\u1317\3\2\2\2\u1319")
        buf.write("\u01a7\3\2\2\2\u131a\u132b\7\u041a\2\2\u131b\u131c\7\u041a")
        buf.write("\2\2\u131c\u131d\7\u042a\2\2\u131d\u132b\7\u041a\2\2\u131e")
        buf.write("\u131f\5\u0212\u010a\2\u131f\u1320\7\u042a\2\2\u1320\u1321")
        buf.write("\7\u041a\2\2\u1321\u132b\3\2\2\2\u1322\u1323\5\u0212\u010a")
        buf.write("\2\u1323\u1324\7\u042a\2\2\u1324\u1325\5\u0212\u010a\2")
        buf.write("\u1325\u132b\3\2\2\2\u1326\u1327\5\u0212\u010a\2\u1327")
        buf.write("\u1328\5\u0216\u010c\2\u1328\u132b\3\2\2\2\u1329\u132b")
        buf.write("\5\u0212\u010a\2\u132a\u131a\3\2\2\2\u132a\u131b\3\2\2")
        buf.write("\2\u132a\u131e\3\2\2\2\u132a\u1322\3\2\2\2\u132a\u1326")
        buf.write("\3\2\2\2\u132a\u1329\3\2\2\2\u132b\u01a9\3\2\2\2\u132c")
        buf.write("\u132d\5\u0200\u0101\2\u132d\u132e\7\u00a2\2\2\u132e\u132f")
        buf.write("\5\u0200\u0101\2\u132f\u01ab\3\2\2\2\u1330\u1332\7\r\2")
        buf.write("\2\u1331\u1333\tC\2\2\u1332\u1331\3\2\2\2\u1332\u1333")
        buf.write("\3\2\2\2\u1333\u1334\3\2\2\2\u1334\u1335\7\u009f\2\2\u1335")
        buf.write("\u1336\5\u0234\u011b\2\u1336\u01ad\3\2\2\2\u1337\u1338")
        buf.write("\7\33\2\2\u1338\u1339\7\u009f\2\2\u1339\u133d\5\u0234")
        buf.write("\u011b\2\u133a\u133c\5\u01b6\u00dc\2\u133b\u133a\3\2\2")
        buf.write("\2\u133c\u133f\3\2\2\2\u133d\u133b\3\2\2\2\u133d\u133e")
        buf.write("\3\2\2\2\u133e\u01af\3\2\2\2\u133f\u133d\3\2\2\2\u1340")
        buf.write("\u1341\7\u0149\2\2\u1341\u1342\7\u009f\2\2\u1342\u1344")
        buf.write("\5\u0234\u011b\2\u1343\u1345\tD\2\2\u1344\u1343\3\2\2")
        buf.write("\2\u1344\u1345\3\2\2\2\u1345\u01b1\3\2\2\2\u1346\u1348")
        buf.write("\7p\2\2\u1347\u1349\tC\2\2\u1348\u1347\3\2\2\2\u1348\u1349")
        buf.write("\3\2\2\2\u1349\u134a\3\2\2\2\u134a\u134b\tE\2\2\u134b")
        buf.write("\u134c\5\u0234\u011b\2\u134c\u01b3\3\2\2\2\u134d\u134f")
        buf.write("\7\u0215\2\2\u134e\u1350\tC\2\2\u134f\u134e\3\2\2\2\u134f")
        buf.write("\u1350\3\2\2\2\u1350\u1351\3\2\2\2\u1351\u1352\7\u009f")
        buf.write("\2\2\u1352\u1354\5\u0234\u011b\2\u1353\u1355\7\u020a\2")
        buf.write("\2\u1354\u1353\3\2\2\2\u1354\u1355\3\2\2\2\u1355\u1357")
        buf.write("\3\2\2\2\u1356\u1358\7\u0187\2\2\u1357\u1356\3\2\2\2\u1357")
        buf.write("\u1358\3\2\2\2\u1358\u135a\3\2\2\2\u1359\u135b\7\u0266")
        buf.write("\2\2\u135a\u1359\3\2\2\2\u135a\u135b\3\2\2\2\u135b\u01b5")
        buf.write("\3\2\2\2\u135c\u135d\7?\2\2\u135d\u1364\7\u0264\2\2\u135e")
        buf.write("\u1364\7\u020a\2\2\u135f\u1364\7\u0189\2\2\u1360\u1364")
        buf.write("\7\u01d4\2\2\u1361\u1364\7\u0187\2\2\u1362\u1364\7\u0147")
        buf.write("\2\2\u1363\u135c\3\2\2\2\u1363\u135e\3\2\2\2\u1363\u135f")
        buf.write("\3\2\2\2\u1363\u1360\3\2\2\2\u1363\u1361\3\2\2\2\u1363")
        buf.write("\u1362\3\2\2\2\u1364\u01b7\3\2\2\2\u1365\u1367\7\"\2\2")
        buf.write("\u1366\u1368\7\u0134\2\2\u1367\u1366\3\2\2\2\u1367\u1368")
        buf.write("\3\2\2\2\u1368\u1369\3\2\2\2\u1369\u136a\7\u0194\2\2\u136a")
        buf.write("\u136b\5\u0212\u010a\2\u136b\u136c\7\u0222\2\2\u136c\u136d")
        buf.write("\tF\2\2\u136d\u136e\7\u0238\2\2\u136e\u136f\7\u043a\2")
        buf.write("\2\u136f\u01b9\3\2\2\2\u1370\u1371\7\u01a5\2\2\u1371\u1372")
        buf.write("\7\u01fd\2\2\u1372\u1373\5\u0212\u010a\2\u1373\u1374\7")
        buf.write("\u0238\2\2\u1374\u1375\7\u043a\2\2\u1375\u01bb\3\2\2\2")
        buf.write("\u1376\u1377\7\u0261\2\2\u1377\u1378\7\u01fd\2\2\u1378")
        buf.write("\u1379\5\u0212\u010a\2\u1379\u01bd\3\2\2\2\u137a\u137b")
        buf.write("\7\u008f\2\2\u137b\u137c\5\u01c2\u00e2\2\u137c\u137d\t")
        buf.write("G\2\2\u137d\u1385\5\u0260\u0131\2\u137e\u137f\7\u042d")
        buf.write("\2\2\u137f\u1380\5\u01c2\u00e2\2\u1380\u1381\tG\2\2\u1381")
        buf.write("\u1382\5\u0260\u0131\2\u1382\u1384\3\2\2\2\u1383\u137e")
        buf.write("\3\2\2\2\u1384\u1387\3\2\2\2\u1385\u1383\3\2\2\2\u1385")
        buf.write("\u1386\3\2\2\2\u1386\u13ae\3\2\2\2\u1387\u1385\3\2\2\2")
        buf.write("\u1388\u138c\7\u008f\2\2\u1389\u138a\7\32\2\2\u138a\u138d")
        buf.write("\7\u008f\2\2\u138b\u138d\7\u030a\2\2\u138c\u1389\3\2\2")
        buf.write("\2\u138c\u138b\3\2\2\2\u138d\u1390\3\2\2\2\u138e\u1391")
        buf.write("\5\u0204\u0103\2\u138f\u1391\7*\2\2\u1390\u138e\3\2\2")
        buf.write("\2\u1390\u138f\3\2\2\2\u1391\u13ae\3\2\2\2\u1392\u1393")
        buf.write("\7\u008f\2\2\u1393\u139a\7\u01e1\2\2\u1394\u1397\5\u0204")
        buf.write("\u0103\2\u1395\u1396\7\34\2\2\u1396\u1398\5\u0206\u0104")
        buf.write("\2\u1397\u1395\3\2\2\2\u1397\u1398\3\2\2\2\u1398\u139b")
        buf.write("\3\2\2\2\u1399\u139b\7*\2\2\u139a\u1394\3\2\2\2\u139a")
        buf.write("\u1399\3\2\2\2\u139b\u13ae\3\2\2\2\u139c\u13ae\5\u0196")
        buf.write("\u00cc\2\u139d\u13ae\5\u011a\u008e\2\u139e\u13ae\5\u0118")
        buf.write("\u008d\2\u139f\u13a0\7\u008f\2\2\u13a0\u13a1\5\u01f8\u00fd")
        buf.write("\2\u13a1\u13a2\tG\2\2\u13a2\u13aa\5\u0260\u0131\2\u13a3")
        buf.write("\u13a4\7\u042d\2\2\u13a4\u13a5\5\u01f8\u00fd\2\u13a5\u13a6")
        buf.write("\tG\2\2\u13a6\u13a7\5\u0260\u0131\2\u13a7\u13a9\3\2\2")
        buf.write("\2\u13a8\u13a3\3\2\2\2\u13a9\u13ac\3\2\2\2\u13aa\u13a8")
        buf.write("\3\2\2\2\u13aa\u13ab\3\2\2\2\u13ab\u13ae\3\2\2\2\u13ac")
        buf.write("\u13aa\3\2\2\2\u13ad\u137a\3\2\2\2\u13ad\u1388\3\2\2\2")
        buf.write("\u13ad\u1392\3\2\2\2\u13ad\u139c\3\2\2\2\u13ad\u139d\3")
        buf.write("\2\2\2\u13ad\u139e\3\2\2\2\u13ad\u139f\3\2\2\2\u13ae\u01bf")
        buf.write("\3\2\2\2\u13af\u13b0\7\u0091\2\2\u13b0\u13b1\t\65\2\2")
        buf.write("\u13b1\u1447\7\u01b8\2\2\u13b2\u13b3\7\u0091\2\2\u13b3")
        buf.write("\u13b4\tH\2\2\u13b4\u13b7\7\u0181\2\2\u13b5\u13b6\7L\2")
        buf.write("\2\u13b6\u13b8\7\u043a\2\2\u13b7\u13b5\3\2\2\2\u13b7\u13b8")
        buf.write("\3\2\2\2\u13b8\u13bb\3\2\2\2\u13b9\u13ba\7B\2\2\u13ba")
        buf.write("\u13bc\5\u0218\u010d\2\u13bb\u13b9\3\2\2\2\u13bb\u13bc")
        buf.write("\3\2\2\2\u13bc\u13c4\3\2\2\2\u13bd\u13c1\7^\2\2\u13be")
        buf.write("\u13bf\5\u0218\u010d\2\u13bf\u13c0\7\u042d\2\2\u13c0\u13c2")
        buf.write("\3\2\2\2\u13c1\u13be\3\2\2\2\u13c1\u13c2\3\2\2\2\u13c2")
        buf.write("\u13c3\3\2\2\2\u13c3\u13c5\5\u0218\u010d\2\u13c4\u13bd")
        buf.write("\3\2\2\2\u13c4\u13c5\3\2\2\2\u13c5\u1447\3\2\2\2\u13c6")
        buf.write("\u13c7\7\u0091\2\2\u13c7\u13c9\5\u01c4\u00e3\2\u13c8\u13ca")
        buf.write("\5\u01c6\u00e4\2\u13c9\u13c8\3\2\2\2\u13c9\u13ca\3\2\2")
        buf.write("\2\u13ca\u1447\3\2\2\2\u13cb\u13cd\7\u0091\2\2\u13cc\u13ce")
        buf.write("\7\u0193\2\2\u13cd\u13cc\3\2\2\2\u13cd\u13ce\3\2\2\2\u13ce")
        buf.write("\u13cf\3\2\2\2\u13cf\u13d0\t\'\2\2\u13d0\u13d1\tI\2\2")
        buf.write("\u13d1\u13d4\5\u01fa\u00fe\2\u13d2\u13d3\tI\2\2\u13d3")
        buf.write("\u13d5\5\u0212\u010a\2\u13d4\u13d2\3\2\2\2\u13d4\u13d5")
        buf.write("\3\2\2\2\u13d5\u13d7\3\2\2\2\u13d6\u13d8\5\u01c6\u00e4")
        buf.write("\2\u13d7\u13d6\3\2\2\2\u13d7\u13d8\3\2\2\2\u13d8\u1447")
        buf.write("\3\2\2\2\u13d9\u13da\7\u0091\2\2\u13da\u13db\7\"\2\2\u13db")
        buf.write("\u13dd\t\2\2\2\u13dc\u13de\5\u024a\u0126\2\u13dd\u13dc")
        buf.write("\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u13df\3\2\2\2\u13df")
        buf.write("\u1447\5\u0212\u010a\2\u13e0\u13e1\7\u0091\2\2\u13e1\u13e2")
        buf.write("\7\"\2\2\u13e2\u13e3\tJ\2\2\u13e3\u1447\5\u01f8\u00fd")
        buf.write("\2\u13e4\u13e5\7\u0091\2\2\u13e5\u13e6\7\"\2\2\u13e6\u13e7")
        buf.write("\7\u0265\2\2\u13e7\u1447\5\u0200\u0101\2\u13e8\u13e9\7")
        buf.write("\u0091\2\2\u13e9\u13ea\7\u017a\2\2\u13ea\u13eb\5\u0208")
        buf.write("\u0105\2\u13eb\u13ec\tK\2\2\u13ec\u1447\3\2\2\2\u13ed")
        buf.write("\u13ee\7\u0091\2\2\u13ee\u1447\5\u01c8\u00e5\2\u13ef\u13f0")
        buf.write("\7\u0091\2\2\u13f0\u13f1\tL\2\2\u13f1\u13f5\7^\2\2\u13f2")
        buf.write("\u13f3\5\u0218\u010d\2\u13f3\u13f4\7\u042d\2\2\u13f4\u13f6")
        buf.write("\3\2\2\2\u13f5\u13f2\3\2\2\2\u13f5\u13f6\3\2\2\2\u13f6")
        buf.write("\u13f7\3\2\2\2\u13f7\u1447\5\u0218\u010d\2\u13f8\u13f9")
        buf.write("\7\u0091\2\2\u13f9\u13fa\7\u0112\2\2\u13fa\u13fb\7\u042b")
        buf.write("\2\2\u13fb\u13fc\7\u041a\2\2\u13fc\u13fd\7\u042c\2\2\u13fd")
        buf.write("\u1447\tL\2\2\u13fe\u13ff\7\u0091\2\2\u13ff\u1402\5\u01ca")
        buf.write("\u00e6\2\u1400\u1401\tI\2\2\u1401\u1403\5\u0212\u010a")
        buf.write("\2\u1402\u1400\3\2\2\2\u1402\u1403\3\2\2\2\u1403\u1405")
        buf.write("\3\2\2\2\u1404\u1406\5\u01c6\u00e4\2\u1405\u1404\3\2\2")
        buf.write("\2\u1405\u1406\3\2\2\2\u1406\u1447\3\2\2\2\u1407\u1408")
        buf.write("\7\u0091\2\2\u1408\u1409\tM\2\2\u1409\u140a\7\u0150\2")
        buf.write("\2\u140a\u1447\5\u01f8\u00fd\2\u140b\u140c\7\u0091\2\2")
        buf.write("\u140c\u140f\7\u0197\2\2\u140d\u140e\7?\2\2\u140e\u1410")
        buf.write("\5\u0200\u0101\2\u140f\u140d\3\2\2\2\u140f\u1410\3\2\2")
        buf.write("\2\u1410\u1447\3\2\2\2\u1411\u1412\7\u0091\2\2\u1412\u1413")
        buf.write("\tN\2\2\u1413\u1414\tI\2\2\u1414\u1417\5\u01fa\u00fe\2")
        buf.write("\u1415\u1416\tI\2\2\u1416\u1418\5\u0212\u010a\2\u1417")
        buf.write("\u1415\3\2\2\2\u1417\u1418\3\2\2\2\u1418\u141b\3\2\2\2")
        buf.write("\u1419\u141a\7\u00b1\2\2\u141a\u141c\5\u0260\u0131\2\u141b")
        buf.write("\u1419\3\2\2\2\u141b\u141c\3\2\2\2\u141c\u1447\3\2\2\2")
        buf.write("\u141d\u141e\7\u0091\2\2\u141e\u141f\7\u01f1\2\2\u141f")
        buf.write("\u1422\7\u0283\2\2\u1420\u1421\tI\2\2\u1421\u1423\5\u0212")
        buf.write("\u010a\2\u1422\u1420\3\2\2\2\u1422\u1423\3\2\2\2\u1423")
        buf.write("\u1425\3\2\2\2\u1424\u1426\5\u01c6\u00e4\2\u1425\u1424")
        buf.write("\3\2\2\2\u1425\u1426\3\2\2\2\u1426\u1447\3\2\2\2\u1427")
        buf.write("\u1428\7\u0091\2\2\u1428\u1429\7\u0206\2\2\u1429\u142e")
        buf.write("\5\u01cc\u00e7\2\u142a\u142b\7\u042d\2\2\u142b\u142d\5")
        buf.write("\u01cc\u00e7\2\u142c\u142a\3\2\2\2\u142d\u1430\3\2\2\2")
        buf.write("\u142e\u142c\3\2\2\2\u142e\u142f\3\2\2\2\u142f\u1434\3")
        buf.write("\2\2\2\u1430\u142e\3\2\2\2\u1431\u1432\7?\2\2\u1432\u1433")
        buf.write("\7\u0209\2\2\u1433\u1435\5\u0218\u010d\2\u1434\u1431\3")
        buf.write("\2\2\2\u1434\u1435\3\2\2\2\u1435\u1436\3\2\2\2\u1436\u143a")
        buf.write("\7^\2\2\u1437\u1438\5\u0218\u010d\2\u1438\u1439\7\u042d")
        buf.write("\2\2\u1439\u143b\3\2\2\2\u143a\u1437\3\2\2\2\u143a\u143b")
        buf.write("\3\2\2\2\u143b\u143c\3\2\2\2\u143c\u143d\5\u0218\u010d")
        buf.write("\2\u143d\u1447\3\2\2\2\u143e\u143f\7\u0091\2\2\u143f\u1440")
        buf.write("\7\u0233\2\2\u1440\u1444\7\u0247\2\2\u1441\u1442\7?\2")
        buf.write("\2\u1442\u1443\7\u0148\2\2\u1443\u1445\7\u043a\2\2\u1444")
        buf.write("\u1441\3\2\2\2\u1444\u1445\3\2\2\2\u1445\u1447\3\2\2\2")
        buf.write("\u1446\u13af\3\2\2\2\u1446\u13b2\3\2\2\2\u1446\u13c6\3")
        buf.write("\2\2\2\u1446\u13cb\3\2\2\2\u1446\u13d9\3\2\2\2\u1446\u13e0")
        buf.write("\3\2\2\2\u1446\u13e4\3\2\2\2\u1446\u13e8\3\2\2\2\u1446")
        buf.write("\u13ed\3\2\2\2\u1446\u13ef\3\2\2\2\u1446\u13f8\3\2\2\2")
        buf.write("\u1446\u13fe\3\2\2\2\u1446\u1407\3\2\2\2\u1446\u140b\3")
        buf.write("\2\2\2\u1446\u1411\3\2\2\2\u1446\u141d\3\2\2\2\u1446\u1427")
        buf.write("\3\2\2\2\u1446\u143e\3\2\2\2\u1447\u01c1\3\2\2\2\u1448")
        buf.write("\u1453\7\u0446\2\2\u1449\u1453\7\u0447\2\2\u144a\u144b")
        buf.write("\7\u042f\2\2\u144b\u144d\7\u042f\2\2\u144c\u144a\3\2\2")
        buf.write("\2\u144c\u144d\3\2\2\2\u144d\u144e\3\2\2\2\u144e\u1450")
        buf.write("\tO\2\2\u144f\u144c\3\2\2\2\u144f\u1450\3\2\2\2\u1450")
        buf.write("\u1451\3\2\2\2\u1451\u1453\5\u0212\u010a\2\u1452\u1448")
        buf.write("\3\2\2\2\u1452\u1449\3\2\2\2\u1452\u144f\3\2\2\2\u1453")
        buf.write("\u01c3\3\2\2\2\u1454\u1455\7\32\2\2\u1455\u1462\7\u008f")
        buf.write("\2\2\u1456\u1462\7\u030d\2\2\u1457\u1462\7(\2\2\u1458")
        buf.write("\u1462\7\u008d\2\2\u1459\u145a\7\u0194\2\2\u145a\u1462")
        buf.write("\7\u0247\2\2\u145b\u145c\7z\2\2\u145c\u1462\7\u0247\2")
        buf.write("\2\u145d\u145f\t\64\2\2\u145e\u145d\3\2\2\2\u145e\u145f")
        buf.write("\3\2\2\2\u145f\u1460\3\2\2\2\u1460\u1462\tP\2\2\u1461")
        buf.write("\u1454\3\2\2\2\u1461\u1456\3\2\2\2\u1461\u1457\3\2\2\2")
        buf.write("\u1461\u1458\3\2\2\2\u1461\u1459\3\2\2\2\u1461\u145b\3")
        buf.write("\2\2\2\u1461\u145e\3\2\2\2\u1462\u01c5\3\2\2\2\u1463\u1464")
        buf.write("\7]\2\2\u1464\u1468\7\u043a\2\2\u1465\u1466\7\u00b1\2")
        buf.write("\2\u1466\u1468\5\u0260\u0131\2\u1467\u1463\3\2\2\2\u1467")
        buf.write("\u1465\3\2\2\2\u1468\u01c7\3\2\2\2\u1469\u146b\7\u0249")
        buf.write("\2\2\u146a\u1469\3\2\2\2\u146a\u146b\3\2\2\2\u146b\u146c")
        buf.write("\3\2\2\2\u146c\u147b\7\u017b\2\2\u146d\u146e\7\u01b9\2")
        buf.write("\2\u146e\u147b\7\u0247\2\2\u146f\u147b\7\u01ff\2\2\u1470")
        buf.write("\u147b\7\u028b\2\2\u1471\u1473\7\u0193\2\2\u1472\u1471")
        buf.write("\3\2\2\2\u1472\u1473\3\2\2\2\u1473\u1474\3\2\2\2\u1474")
        buf.write("\u147b\7\u0205\2\2\u1475\u147b\7\u0207\2\2\u1476\u1477")
        buf.write("\7\u0233\2\2\u1477\u147b\7\u019d\2\2\u1478\u147b\7\u0138")
        buf.write("\2\2\u1479\u147b\7\u0163\2\2\u147a\u146a\3\2\2\2\u147a")
        buf.write("\u146d\3\2\2\2\u147a\u146f\3\2\2\2\u147a\u1470\3\2\2\2")
        buf.write("\u147a\u1472\3\2\2\2\u147a\u1475\3\2\2\2\u147a\u1476\3")
        buf.write("\2\2\2\u147a\u1478\3\2\2\2\u147a\u1479\3\2\2\2\u147b\u01c9")
        buf.write("\3\2\2\2\u147c\u1485\7\u0181\2\2\u147d\u147e\7\u009f\2")
        buf.write("\2\u147e\u1485\7\u0247\2\2\u147f\u1481\7\u0193\2\2\u1480")
        buf.write("\u147f\3\2\2\2\u1480\u1481\3\2\2\2\u1481\u1482\3\2\2\2")
        buf.write("\u1482\u1485\7\u0283\2\2\u1483\u1485\7\u025c\2\2\u1484")
        buf.write("\u147c\3\2\2\2\u1484\u147d\3\2\2\2\u1484\u1480\3\2\2\2")
        buf.write("\u1484\u1483\3\2\2\2\u1485\u01cb\3\2\2\2\u1486\u1493\7")
        buf.write("\n\2\2\u1487\u1488\7\u0140\2\2\u1488\u1493\7\u01a9\2\2")
        buf.write("\u1489\u148a\7\u0162\2\2\u148a\u1493\7\u0252\2\2\u148b")
        buf.write("\u1493\7\u0165\2\2\u148c\u1493\7\u01ab\2\2\u148d\u1493")
        buf.write("\7\u02d9\2\2\u148e\u148f\7\u01f6\2\2\u148f\u1493\7\u018a")
        buf.write("\2\2\u1490\u1493\7\u023a\2\2\u1491\u1493\7\u0251\2\2\u1492")
        buf.write("\u1486\3\2\2\2\u1492\u1487\3\2\2\2\u1492\u1489\3\2\2\2")
        buf.write("\u1492\u148b\3\2\2\2\u1492\u148c\3\2\2\2\u1492\u148d\3")
        buf.write("\2\2\2\u1492\u148e\3\2\2\2\u1492\u1490\3\2\2\2\u1492\u1491")
        buf.write("\3\2\2\2\u1493\u01cd\3\2\2\2\u1494\u1495\7\u013e\2\2\u1495")
        buf.write("\u1496\7\u043a\2\2\u1496\u01cf\3\2\2\2\u1497\u1498\7\u0144")
        buf.write("\2\2\u1498\u1499\7M\2\2\u1499\u149e\5\u01dc\u00ef\2\u149a")
        buf.write("\u149b\7\u042d\2\2\u149b\u149d\5\u01dc\u00ef\2\u149c\u149a")
        buf.write("\3\2\2\2\u149d\u14a0\3\2\2\2\u149e\u149c\3\2\2\2\u149e")
        buf.write("\u149f\3\2\2\2\u149f\u14a8\3\2\2\2\u14a0\u149e\3\2\2\2")
        buf.write("\u14a1\u14a2\7x\2\2\u14a2\u14a5\7\u042b\2\2\u14a3\u14a6")
        buf.write("\5\u0232\u011a\2\u14a4\u14a6\7\n\2\2\u14a5\u14a3\3\2\2")
        buf.write("\2\u14a5\u14a4\3\2\2\2\u14a6\u14a7\3\2\2\2\u14a7\u14a9")
        buf.write("\7\u042c\2\2\u14a8\u14a1\3\2\2\2\u14a8\u14a9\3\2\2\2\u14a9")
        buf.write("\u14aa\3\2\2\2\u14aa\u14ab\7L\2\2\u14ab\u14ac\5\u0212")
        buf.write("\u010a\2\u14ac\u01d1\3\2\2\2\u14ad\u14af\7\u0190\2\2\u14ae")
        buf.write("\u14b0\tC\2\2\u14af\u14ae\3\2\2\2\u14af\u14b0\3\2\2\2")
        buf.write("\u14b0\u14b1\3\2\2\2\u14b1\u14b6\5\u01de\u00f0\2\u14b2")
        buf.write("\u14b3\7\u042d\2\2\u14b3\u14b5\5\u01de\u00f0\2\u14b4\u14b2")
        buf.write("\3\2\2\2\u14b5\u14b8\3\2\2\2\u14b6\u14b4\3\2\2\2\u14b6")
        buf.write("\u14b7\3\2\2\2\u14b7\u01d3\3\2\2\2\u14b8\u14b6\3\2\2\2")
        buf.write("\u14b9\u14bb\7Y\2\2\u14ba\u14bc\tQ\2\2\u14bb\u14ba\3\2")
        buf.write("\2\2\u14bb\u14bc\3\2\2\2\u14bc\u14be\3\2\2\2\u14bd\u14bf")
        buf.write("\5\u0218\u010d\2\u14be\u14bd\3\2\2\2\u14bf\u14c0\3\2\2")
        buf.write("\2\u14c0\u14be\3\2\2\2\u14c0\u14c1\3\2\2\2\u14c1\u01d5")
        buf.write("\3\2\2\2\u14c2\u14c3\7a\2\2\u14c3\u14c4\7M\2\2\u14c4\u14c5")
        buf.write("\7S\2\2\u14c5\u14c6\7\u0144\2\2\u14c6\u14cb\5\u01e2\u00f2")
        buf.write("\2\u14c7\u14c8\7\u042d\2\2\u14c8\u14ca\5\u01e2\u00f2\2")
        buf.write("\u14c9\u14c7\3\2\2\2\u14ca\u14cd\3\2\2\2\u14cb\u14c9\3")
        buf.write("\2\2\2\u14cb\u14cc\3\2\2\2\u14cc\u01d7\3\2\2\2\u14cd\u14cb")
        buf.write("\3\2\2\2\u14ce\u14cf\7\u021e\2\2\u14cf\u14d0\7\u0209\2")
        buf.write("\2\u14d0\u14d1\7\u0144\2\2\u14d1\u01d9\3\2\2\2\u14d2\u14d3")
        buf.write("\7\u0289\2\2\u14d3\u01db\3\2\2\2\u14d4\u14dc\5\u01fa\u00fe")
        buf.write("\2\u14d5\u14d7\t\24\2\2\u14d6\u14d5\3\2\2\2\u14d6\u14d7")
        buf.write("\3\2\2\2\u14d7\u14d8\3\2\2\2\u14d8\u14d9\7\u042b\2\2\u14d9")
        buf.write("\u14da\5\u0232\u011a\2\u14da\u14db\7\u042c\2\2\u14db\u14dd")
        buf.write("\3\2\2\2\u14dc\u14d6\3\2\2\2\u14dc\u14dd\3\2\2\2\u14dd")
        buf.write("\u01dd\3\2\2\2\u14de\u14f1\7\u016d\2\2\u14df\u14f1\7\u019d")
        buf.write("\2\2\u14e0\u14e2\tR\2\2\u14e1\u14e0\3\2\2\2\u14e1\u14e2")
        buf.write("\3\2\2\2\u14e2\u14e3\3\2\2\2\u14e3\u14f1\7\u01b8\2\2\u14e4")
        buf.write("\u14f1\7\u01f2\2\2\u14e5\u14f1\7\u028b\2\2\u14e6\u14e7")
        buf.write("\7\u0209\2\2\u14e7\u14f1\7\u0144\2\2\u14e8\u14f1\7\u0247")
        buf.write("\2\2\u14e9\u14f1\7\u0267\2\2\u14ea\u14ee\7\u0283\2\2\u14eb")
        buf.write("\u14ec\7\u00b3\2\2\u14ec\u14ed\7}\2\2\u14ed\u14ef\7b\2")
        buf.write("\2\u14ee\u14eb\3\2\2\2\u14ee\u14ef\3\2\2\2\u14ef\u14f1")
        buf.write("\3\2\2\2\u14f0\u14de\3\2\2\2\u14f0\u14df\3\2\2\2\u14f0")
        buf.write("\u14e1\3\2\2\2\u14f0\u14e4\3\2\2\2\u14f0\u14e5\3\2\2\2")
        buf.write("\u14f0\u14e6\3\2\2\2\u14f0\u14e8\3\2\2\2\u14f0\u14e9\3")
        buf.write("\2\2\2\u14f0\u14ea\3\2\2\2\u14f1\u14fd\3\2\2\2\u14f2\u14f3")
        buf.write("\7\u020f\2\2\u14f3\u14f5\7\u01b8\2\2\u14f4\u14f6\5\u0140")
        buf.write("\u00a1\2\u14f5\u14f4\3\2\2\2\u14f5\u14f6\3\2\2\2\u14f6")
        buf.write("\u14fd\3\2\2\2\u14f7\u14f8\7\u0283\2\2\u14f8\u14fa\5\u0234")
        buf.write("\u011b\2\u14f9\u14fb\5\u01e0\u00f1\2\u14fa\u14f9\3\2\2")
        buf.write("\2\u14fa\u14fb\3\2\2\2\u14fb\u14fd\3\2\2\2\u14fc\u14f0")
        buf.write("\3\2\2\2\u14fc\u14f2\3\2\2\2\u14fc\u14f7\3\2\2\2\u14fd")
        buf.write("\u01df\3\2\2\2\u14fe\u14ff\7\u00b3\2\2\u14ff\u1500\7}")
        buf.write("\2\2\u1500\u1504\7b\2\2\u1501\u1502\7?\2\2\u1502\u1504")
        buf.write("\7\u0186\2\2\u1503\u14fe\3\2\2\2\u1503\u1501\3\2\2\2\u1504")
        buf.write("\u01e1\3\2\2\2\u1505\u150d\5\u01fa\u00fe\2\u1506\u1507")
        buf.write("\7x\2\2\u1507\u150a\7\u042b\2\2\u1508\u150b\5\u0232\u011a")
        buf.write("\2\u1509\u150b\7\n\2\2\u150a\u1508\3\2\2\2\u150a\u1509")
        buf.write("\3\2\2\2\u150b\u150c\3\2\2\2\u150c\u150e\7\u042c\2\2\u150d")
        buf.write("\u1506\3\2\2\2\u150d\u150e\3\2\2\2\u150e\u1516\3\2\2\2")
        buf.write("\u150f\u1511\t\24\2\2\u1510\u150f\3\2\2\2\u1510\u1511")
        buf.write("\3\2\2\2\u1511\u1512\3\2\2\2\u1512\u1513\7\u042b\2\2\u1513")
        buf.write("\u1514\5\u0232\u011a\2\u1514\u1515\7\u042c\2\2\u1515\u1517")
        buf.write("\3\2\2\2\u1516\u1510\3\2\2\2\u1516\u1517\3\2\2\2\u1517")
        buf.write("\u151a\3\2\2\2\u1518\u1519\7K\2\2\u1519\u151b\7\u01b2")
        buf.write("\2\2\u151a\u1518\3\2\2\2\u151a\u151b\3\2\2\2\u151b\u01e3")
        buf.write("\3\2\2\2\u151c\u151d\tS\2\2\u151d\u1520\5\u01fa\u00fe")
        buf.write("\2\u151e\u1521\5\u0212\u010a\2\u151f\u1521\7\u043a\2\2")
        buf.write("\u1520\u151e\3\2\2\2\u1520\u151f\3\2\2\2\u1520\u1521\3")
        buf.write("\2\2\2\u1521\u01e5\3\2\2\2\u1522\u1526\tS\2\2\u1523\u1524")
        buf.write("\tT\2\2\u1524\u1525\7\u0422\2\2\u1525\u1527\tU\2\2\u1526")
        buf.write("\u1523\3\2\2\2\u1526\u1527\3\2\2\2\u1527\u1528\3\2\2\2")
        buf.write("\u1528\u1529\5\u01f6\u00fc\2\u1529\u01e7\3\2\2\2\u152a")
        buf.write("\u152b\7\u019b\2\2\u152b\u152c\7\u043a\2\2\u152c\u01e9")
        buf.write("\3\2\2\2\u152d\u152e\7\u00ad\2\2\u152e\u152f\5\u0212\u010a")
        buf.write("\2\u152f\u01eb\3\2\2\2\u1530\u1538\7\u0092\2\2\u1531\u1533")
        buf.write("\7\u0096\2\2\u1532\u1534\7\u0269\2\2\u1533\u1532\3\2\2")
        buf.write("\2\u1533\u1534\3\2\2\2\u1534\u1535\3\2\2\2\u1535\u1539")
        buf.write("\5\u021c\u010f\2\u1536\u1539\7\u0442\2\2\u1537\u1539\7")
        buf.write("\u0443\2\2\u1538\u1531\3\2\2\2\u1538\u1536\3\2\2\2\u1538")
        buf.write("\u1537\3\2\2\2\u1539\u1543\3\2\2\2\u153a\u153b\7\u008f")
        buf.write("\2\2\u153b\u1540\5\u01f0\u00f9\2\u153c\u153d\7\u042d\2")
        buf.write("\2\u153d\u153f\5\u01f0\u00f9\2\u153e\u153c\3\2\2\2\u153f")
        buf.write("\u1542\3\2\2\2\u1540\u153e\3\2\2\2\u1540\u1541\3\2\2\2")
        buf.write("\u1541\u1544\3\2\2\2\u1542\u1540\3\2\2\2\u1543\u153a\3")
        buf.write("\2\2\2\u1543\u1544\3\2\2\2\u1544\u01ed\3\2\2\2\u1545\u154d")
        buf.write("\7\u0086\2\2\u1546\u1548\7\u0096\2\2\u1547\u1549\7\u0269")
        buf.write("\2\2\u1548\u1547\3\2\2\2\u1548\u1549\3\2\2\2\u1549\u154a")
        buf.write("\3\2\2\2\u154a\u154e\5\u021c\u010f\2\u154b\u154e\7\u0442")
        buf.write("\2\2\u154c\u154e\7\u0443\2\2\u154d\u1546\3\2\2\2\u154d")
        buf.write("\u154b\3\2\2\2\u154d\u154c\3\2\2\2\u154d\u154e\3\2\2\2")
        buf.write("\u154e\u1558\3\2\2\2\u154f\u1550\7\u008f\2\2\u1550\u1555")
        buf.write("\5\u01f0\u00f9\2\u1551\u1552\7\u042d\2\2\u1552\u1554\5")
        buf.write("\u01f0\u00f9\2\u1553\u1551\3\2\2\2\u1554\u1557\3\2\2\2")
        buf.write("\u1555\u1553\3\2\2\2\u1555\u1556\3\2\2\2\u1556\u1559\3")
        buf.write("\2\2\2\u1557\u1555\3\2\2\2\u1558\u154f\3\2\2\2\u1558\u1559")
        buf.write("\3\2\2\2\u1559\u01ef\3\2\2\2\u155a\u155b\tV\2\2\u155b")
        buf.write("\u1560\7\u0422\2\2\u155c\u1561\5\u021c\u010f\2\u155d\u1561")
        buf.write("\7\u043b\2\2\u155e\u1561\5\u0202\u0102\2\u155f\u1561\5")
        buf.write("\u0214\u010b\2\u1560\u155c\3\2\2\2\u1560\u155d\3\2\2\2")
        buf.write("\u1560\u155e\3\2\2\2\u1560\u155f\3\2\2\2\u1561\u01f1\3")
        buf.write("\2\2\2\u1562\u1564\7E\2\2\u1563\u1565\tW\2\2\u1564\u1563")
        buf.write("\3\2\2\2\u1564\u1565\3\2\2\2\u1565\u1566\3\2\2\2\u1566")
        buf.write("\u1586\7\60\2\2\u1567\u1568\5\u01c2\u00e2\2\u1568\u1569")
        buf.write("\7\u0422\2\2\u1569\u1571\tX\2\2\u156a\u156b\7\u042d\2")
        buf.write("\2\u156b\u156c\5\u01c2\u00e2\2\u156c\u156d\7\u0422\2\2")
        buf.write("\u156d\u156e\tX\2\2\u156e\u1570\3\2\2\2\u156f\u156a\3")
        buf.write("\2\2\2\u1570\u1573\3\2\2\2\u1571\u156f\3\2\2\2\u1571\u1572")
        buf.write("\3\2\2\2\u1572\u1587\3\2\2\2\u1573\u1571\3\2\2\2\u1574")
        buf.write("\u1577\7\36\2\2\u1575\u1578\5\u0218\u010d\2\u1576\u1578")
        buf.write("\5\u01c2\u00e2\2\u1577\u1575\3\2\2\2\u1577\u1576\3\2\2")
        buf.write("\2\u1578\u1579\3\2\2\2\u1579\u157a\5\u01c2\u00e2\2\u157a")
        buf.write("\u157b\7\u0422\2\2\u157b\u1583\5\u01f4\u00fb\2\u157c\u157d")
        buf.write("\7\u042d\2\2\u157d\u157e\5\u01c2\u00e2\2\u157e\u157f\7")
        buf.write("\u0422\2\2\u157f\u1580\5\u01f4\u00fb\2\u1580\u1582\3\2")
        buf.write("\2\2\u1581\u157c\3\2\2\2\u1582\u1585\3\2\2\2\u1583\u1581")
        buf.write("\3\2\2\2\u1583\u1584\3\2\2\2\u1584\u1587\3\2\2\2\u1585")
        buf.write("\u1583\3\2\2\2\u1586\u1567\3\2\2\2\u1586\u1574\3\2\2\2")
        buf.write("\u1587\u01f3\3\2\2\2\u1588\u1589\tY\2\2\u1589\u01f5\3")
        buf.write("\2\2\2\u158a\u1590\5\u00b6\\\2\u158b\u1590\5\u00a8U\2")
        buf.write("\u158c\u1590\5\u00aeX\2\u158d\u1590\5\u00b4[\2\u158e\u1590")
        buf.write("\5\u00b8]\2\u158f\u158a\3\2\2\2\u158f\u158b\3\2\2\2\u158f")
        buf.write("\u158c\3\2\2\2\u158f\u158d\3\2\2\2\u158f\u158e\3\2\2\2")
        buf.write("\u1590\u1595\3\2\2\2\u1591\u1592\7?\2\2\u1592\u1593\7")
        buf.write("\u015c\2\2\u1593\u1595\5\u0212\u010a\2\u1594\u158f\3\2")
        buf.write("\2\2\u1594\u1591\3\2\2\2\u1595\u01f7\3\2\2\2\u1596\u159a")
        buf.write("\5\u0212\u010a\2\u1597\u159b\7\u0441\2\2\u1598\u1599\7")
        buf.write("\u042a\2\2\u1599\u159b\5\u0212\u010a\2\u159a\u1597\3\2")
        buf.write("\2\2\u159a\u1598\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u01f9")
        buf.write("\3\2\2\2\u159c\u159d\5\u01f8\u00fd\2\u159d\u01fb\3\2\2")
        buf.write("\2\u159e\u15a3\5\u0212\u010a\2\u159f\u15a1\5\u0216\u010c")
        buf.write("\2\u15a0\u15a2\5\u0216\u010c\2\u15a1\u15a0\3\2\2\2\u15a1")
        buf.write("\u15a2\3\2\2\2\u15a2\u15a4\3\2\2\2\u15a3\u159f\3\2\2\2")
        buf.write("\u15a3\u15a4\3\2\2\2\u15a4\u15ab\3\2\2\2\u15a5\u15a6\13")
        buf.write("\2\2\2\u15a6\u15a8\5\u0216\u010c\2\u15a7\u15a9\5\u0216")
        buf.write("\u010c\2\u15a8\u15a7\3\2\2\2\u15a8\u15a9\3\2\2\2\u15a9")
        buf.write("\u15ab\3\2\2\2\u15aa\u159e\3\2\2\2\u15aa\u15a5\3\2\2\2")
        buf.write("\u15ab\u01fd\3\2\2\2\u15ac\u15af\5\u0212\u010a\2\u15ad")
        buf.write("\u15af\7\u043a\2\2\u15ae\u15ac\3\2\2\2\u15ae\u15ad\3\2")
        buf.write("\2\2\u15af\u15b4\3\2\2\2\u15b0\u15b1\7\u042b\2\2\u15b1")
        buf.write("\u15b2\5\u0218\u010d\2\u15b2\u15b3\7\u042c\2\2\u15b3\u15b5")
        buf.write("\3\2\2\2\u15b4\u15b0\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5")
        buf.write("\u15b7\3\2\2\2\u15b6\u15b8\t.\2\2\u15b7\u15b6\3\2\2\2")
        buf.write("\u15b7\u15b8\3\2\2\2\u15b8\u01ff\3\2\2\2\u15b9\u15ba\t")
        buf.write("Z\2\2\u15ba\u0201\3\2\2\2\u15bb\u15bc\t[\2\2\u15bc\u0203")
        buf.write("\3\2\2\2\u15bd\u15c2\7\u00d5\2\2\u15be\u15c2\5\u0272\u013a")
        buf.write("\2\u15bf\u15c2\7\u043a\2\2\u15c0\u15c2\7\u0437\2\2\u15c1")
        buf.write("\u15bd\3\2\2\2\u15c1\u15be\3\2\2\2\u15c1\u15bf\3\2\2\2")
        buf.write("\u15c1\u15c0\3\2\2\2\u15c2\u0205\3\2\2\2\u15c3\u15c6\5")
        buf.write("\u0212\u010a\2\u15c4\u15c6\7\u043a\2\2\u15c5\u15c3\3\2")
        buf.write("\2\2\u15c5\u15c4\3\2\2\2\u15c6\u0207\3\2\2\2\u15c7\u15c8")
        buf.write("\t\\\2\2\u15c8\u0209\3\2\2\2\u15c9\u15ca\5\u0218\u010d")
        buf.write("\2\u15ca\u15cb\7\u041f\2\2\u15cb\u15cc\5\u0218\u010d\2")
        buf.write("\u15cc\u15cd\7\u041f\2\2\u15cd\u15ce\5\u0218\u010d\2\u15ce")
        buf.write("\u15cf\7\u041f\2\2\u15cf\u15d0\5\u0218\u010d\2\u15d0\u15d1")
        buf.write("\7\u041f\2\2\u15d1\u15d7\5\u0218\u010d\2\u15d2\u15d3\7")
        buf.write("\u0436\2\2\u15d3\u15d4\5\u0218\u010d\2\u15d4\u15d5\7\u041f")
        buf.write("\2\2\u15d5\u15d6\5\u0218\u010d\2\u15d6\u15d8\3\2\2\2\u15d7")
        buf.write("\u15d2\3\2\2\2\u15d8\u15d9\3\2\2\2\u15d9\u15d7\3\2\2\2")
        buf.write("\u15d9\u15da\3\2\2\2\u15da\u020b\3\2\2\2\u15db\u15e2\5")
        buf.write("\u020e\u0108\2\u15dc\u15dd\7\u042d\2\2\u15dd\u15e0\5\u020e")
        buf.write("\u0108\2\u15de\u15df\7\u042d\2\2\u15df\u15e1\5\u0218\u010d")
        buf.write("\2\u15e0\u15de\3\2\2\2\u15e0\u15e1\3\2\2\2\u15e1\u15e3")
        buf.write("\3\2\2\2\u15e2\u15dc\3\2\2\2\u15e2\u15e3\3\2\2\2\u15e3")
        buf.write("\u020d\3\2\2\2\u15e4\u15ec\7\u043a\2\2\u15e5\u15ec\7\u043f")
        buf.write("\2\2\u15e6\u15e8\7\u043c\2\2\u15e7\u15e6\3\2\2\2\u15e8")
        buf.write("\u15e9\3\2\2\2\u15e9\u15e7\3\2\2\2\u15e9\u15ea\3\2\2\2")
        buf.write("\u15ea\u15ec\3\2\2\2\u15eb\u15e4\3\2\2\2\u15eb\u15e5\3")
        buf.write("\2\2\2\u15eb\u15e7\3\2\2\2\u15ec\u020f\3\2\2\2\u15ed\u15f0")
        buf.write("\5\u0212\u010a\2\u15ee\u15f0\7\u043a\2\2\u15ef\u15ed\3")
        buf.write("\2\2\2\u15ef\u15ee\3\2\2\2\u15f0\u0211\3\2\2\2\u15f1\u15f5")
        buf.write("\5\u0214\u010b\2\u15f2\u15f5\7\u0443\2\2\u15f3\u15f5\7")
        buf.write("\u0437\2\2\u15f4\u15f1\3\2\2\2\u15f4\u15f2\3\2\2\2\u15f4")
        buf.write("\u15f3\3\2\2\2\u15f5\u0213\3\2\2\2\u15f6\u1601\7\u0442")
        buf.write("\2\2\u15f7\u1601\5\u0272\u013a\2\u15f8\u1601\5\u0274\u013b")
        buf.write("\2\u15f9\u1601\5\u0208\u0105\2\u15fa\u1601\5\u0276\u013c")
        buf.write("\2\u15fb\u1601\5\u0278\u013d\2\u15fc\u1601\5\u027a\u013e")
        buf.write("\2\u15fd\u1601\5\u027c\u013f\2\u15fe\u1601\5\u027e\u0140")
        buf.write("\2\u15ff\u1601\5\u0280\u0141\2\u1600\u15f6\3\2\2\2\u1600")
        buf.write("\u15f7\3\2\2\2\u1600\u15f8\3\2\2\2\u1600\u15f9\3\2\2\2")
        buf.write("\u1600\u15fa\3\2\2\2\u1600\u15fb\3\2\2\2\u1600\u15fc\3")
        buf.write("\2\2\2\u1600\u15fd\3\2\2\2\u1600\u15fe\3\2\2\2\u1600\u15ff")
        buf.write("\3\2\2\2\u1601\u0215\3\2\2\2\u1602\u1606\7\u0441\2\2\u1603")
        buf.write("\u1604\7\u042a\2\2\u1604\u1606\5\u0212\u010a\2\u1605\u1602")
        buf.write("\3\2\2\2\u1605\u1603\3\2\2\2\u1606\u0217\3\2\2\2\u1607")
        buf.write("\u1608\t]\2\2\u1608\u0219\3\2\2\2\u1609\u160c\7\u0438")
        buf.write("\2\2\u160a\u160c\5\u0218\u010d\2\u160b\u1609\3\2\2\2\u160b")
        buf.write("\u160a\3\2\2\2\u160c\u021b\3\2\2\2\u160d\u160f\7\u0440")
        buf.write("\2\2\u160e\u160d\3\2\2\2\u160e\u160f\3\2\2\2\u160f\u1610")
        buf.write("\3\2\2\2\u1610\u1613\7\u043a\2\2\u1611\u1613\7\u0439\2")
        buf.write("\2\u1612\u160e\3\2\2\2\u1612\u1611\3\2\2\2\u1613\u1615")
        buf.write("\3\2\2\2\u1614\u1616\7\u043a\2\2\u1615\u1614\3\2\2\2\u1616")
        buf.write("\u1617\3\2\2\2\u1617\u1615\3\2\2\2\u1617\u1618\3\2\2\2")
        buf.write("\u1618\u1625\3\2\2\2\u1619\u161b\7\u0440\2\2\u161a\u1619")
        buf.write("\3\2\2\2\u161a\u161b\3\2\2\2\u161b\u161c\3\2\2\2\u161c")
        buf.write("\u161f\7\u043a\2\2\u161d\u161f\7\u0439\2\2\u161e\u161a")
        buf.write("\3\2\2\2\u161e\u161d\3\2\2\2\u161f\u1622\3\2\2\2\u1620")
        buf.write("\u1621\7\34\2\2\u1621\u1623\5\u0206\u0104\2\u1622\u1620")
        buf.write("\3\2\2\2\u1622\u1623\3\2\2\2\u1623\u1625\3\2\2\2\u1624")
        buf.write("\u1612\3\2\2\2\u1624\u161e\3\2\2\2\u1625\u021d\3\2\2\2")
        buf.write("\u1626\u1627\t^\2\2\u1627\u021f\3\2\2\2\u1628\u162a\7")
        buf.write("\u0440\2\2\u1629\u1628\3\2\2\2\u1629\u162a\3\2\2\2\u162a")
        buf.write("\u162b\3\2\2\2\u162b\u162c\7\u043c\2\2\u162c\u0221\3\2")
        buf.write("\2\2\u162d\u162f\7k\2\2\u162e\u162d\3\2\2\2\u162e\u162f")
        buf.write("\3\2\2\2\u162f\u1630\3\2\2\2\u1630\u1631\t_\2\2\u1631")
        buf.write("\u0223\3\2\2\2\u1632\u1640\5\u0280\u0141\2\u1633\u1640")
        buf.write("\5\u021c\u010f\2\u1634\u1640\5\u0218\u010d\2\u1635\u1636")
        buf.write("\7\u041f\2\2\u1636\u1640\5\u0218\u010d\2\u1637\u1640\5")
        buf.write("\u0220\u0111\2\u1638\u1640\5\u021e\u0110\2\u1639\u1640")
        buf.write("\7\u043d\2\2\u163a\u1640\7\u043f\2\2\u163b\u163d\7k\2")
        buf.write("\2\u163c\u163b\3\2\2\2\u163c\u163d\3\2\2\2\u163d\u163e")
        buf.write("\3\2\2\2\u163e\u1640\t_\2\2\u163f\u1632\3\2\2\2\u163f")
        buf.write("\u1633\3\2\2\2\u163f\u1634\3\2\2\2\u163f\u1635\3\2\2\2")
        buf.write("\u163f\u1637\3\2\2\2\u163f\u1638\3\2\2\2\u163f\u1639\3")
        buf.write("\2\2\2\u163f\u163a\3\2\2\2\u163f\u163c\3\2\2\2\u1640\u0225")
        buf.write("\3\2\2\2\u1641\u1643\t`\2\2\u1642\u1644\7\u00e1\2\2\u1643")
        buf.write("\u1642\3\2\2\2\u1643\u1644\3\2\2\2\u1644\u1646\3\2\2\2")
        buf.write("\u1645\u1647\5\u022c\u0117\2\u1646\u1645\3\2\2\2\u1646")
        buf.write("\u1647\3\2\2\2\u1647\u1649\3\2\2\2\u1648\u164a\7\u00d5")
        buf.write("\2\2\u1649\u1648\3\2\2\2\u1649\u164a\3\2\2\2\u164a\u1651")
        buf.write("\3\2\2\2\u164b\u164c\7\32\2\2\u164c\u164f\7\u008f\2\2")
        buf.write("\u164d\u164f\7\u030a\2\2\u164e\u164b\3\2\2\2\u164e\u164d")
        buf.write("\3\2\2\2\u164f\u1650\3\2\2\2\u1650\u1652\5\u0204\u0103")
        buf.write("\2\u1651\u164e\3\2\2\2\u1651\u1652\3\2\2\2\u1652\u1656")
        buf.write("\3\2\2\2\u1653\u1654\7\34\2\2\u1654\u1657\5\u0206\u0104")
        buf.write("\2\u1655\u1657\7\u00d5\2\2\u1656\u1653\3\2\2\2\u1656\u1655")
        buf.write("\3\2\2\2\u1656\u1657\3\2\2\2\u1657\u16c5\3\2\2\2\u1658")
        buf.write("\u1659\7\u00d4\2\2\u1659\u165b\ta\2\2\u165a\u165c\5\u022c")
        buf.write("\u0117\2\u165b\u165a\3\2\2\2\u165b\u165c\3\2\2\2\u165c")
        buf.write("\u165e\3\2\2\2\u165d\u165f\7\u00d5\2\2\u165e\u165d\3\2")
        buf.write("\2\2\u165e\u165f\3\2\2\2\u165f\u16c5\3\2\2\2\u1660\u1661")
        buf.write("\7\u01e2\2\2\u1661\u1663\7\u00d2\2\2\u1662\u1664\5\u022c")
        buf.write("\u0117\2\u1663\u1662\3\2\2\2\u1663\u1664\3\2\2\2\u1664")
        buf.write("\u1666\3\2\2\2\u1665\u1667\7\u00d5\2\2\u1666\u1665\3\2")
        buf.write("\2\2\u1666\u1667\3\2\2\2\u1667\u16c5\3\2\2\2\u1668\u1669")
        buf.write("\7\u00d4\2\2\u1669\u166a\tb\2\2\u166a\u166c\7\u00e1\2")
        buf.write("\2\u166b\u166d\5\u022c\u0117\2\u166c\u166b\3\2\2\2\u166c")
        buf.write("\u166d\3\2\2\2\u166d\u166f\3\2\2\2\u166e\u1670\7\u00d5")
        buf.write("\2\2\u166f\u166e\3\2\2\2\u166f\u1670\3\2\2\2\u1670\u16c5")
        buf.write("\3\2\2\2\u1671\u1673\tc\2\2\u1672\u1674\5\u022c\u0117")
        buf.write("\2\u1673\u1672\3\2\2\2\u1673\u1674\3\2\2\2\u1674\u1676")
        buf.write("\3\2\2\2\u1675\u1677\td\2\2\u1676\u1675\3\2\2\2\u1676")
        buf.write("\u1677\3\2\2\2\u1677\u1679\3\2\2\2\u1678\u167a\7\u00b6")
        buf.write("\2\2\u1679\u1678\3\2\2\2\u1679\u167a\3\2\2\2\u167a\u16c5")
        buf.write("\3\2\2\2\u167b\u167d\7\u00c3\2\2\u167c\u167e\5\u022e\u0118")
        buf.write("\2\u167d\u167c\3\2\2\2\u167d\u167e\3\2\2\2\u167e\u1680")
        buf.write("\3\2\2\2\u167f\u1681\td\2\2\u1680\u167f\3\2\2\2\u1680")
        buf.write("\u1681\3\2\2\2\u1681\u1683\3\2\2\2\u1682\u1684\7\u00b6")
        buf.write("\2\2\u1683\u1682\3\2\2\2\u1683\u1684\3\2\2\2\u1684\u16c5")
        buf.write("\3\2\2\2\u1685\u1687\7\u00c4\2\2\u1686\u1688\7\u00c5\2")
        buf.write("\2\u1687\u1686\3\2\2\2\u1687\u1688\3\2\2\2\u1688\u168a")
        buf.write("\3\2\2\2\u1689\u168b\5\u022e\u0118\2\u168a\u1689\3\2\2")
        buf.write("\2\u168a\u168b\3\2\2\2\u168b\u168d\3\2\2\2\u168c\u168e")
        buf.write("\td\2\2\u168d\u168c\3\2\2\2\u168d\u168e\3\2\2\2\u168e")
        buf.write("\u1690\3\2\2\2\u168f\u1691\7\u00b6\2\2\u1690\u168f\3\2")
        buf.write("\2\2\u1690\u1691\3\2\2\2\u1691\u16c5\3\2\2\2\u1692\u1694")
        buf.write("\te\2\2\u1693\u1695\5\u0230\u0119\2\u1694\u1693\3\2\2")
        buf.write("\2\u1694\u1695\3\2\2\2\u1695\u1697\3\2\2\2\u1696\u1698")
        buf.write("\td\2\2\u1697\u1696\3\2\2\2\u1697\u1698\3\2\2\2\u1698")
        buf.write("\u169a\3\2\2\2\u1699\u169b\7\u00b6\2\2\u169a\u1699\3\2")
        buf.write("\2\2\u169a\u169b\3\2\2\2\u169b\u16c5\3\2\2\2\u169c\u16c5")
        buf.write("\tf\2\2\u169d\u169f\tg\2\2\u169e\u16a0\5\u022c\u0117\2")
        buf.write("\u169f\u169e\3\2\2\2\u169f\u16a0\3\2\2\2\u16a0\u16c5\3")
        buf.write("\2\2\2\u16a1\u16a2\th\2\2\u16a2\u16a4\5\u0228\u0115\2")
        buf.write("\u16a3\u16a5\7\u00d5\2\2\u16a4\u16a3\3\2\2\2\u16a4\u16a5")
        buf.write("\3\2\2\2\u16a5\u16ac\3\2\2\2\u16a6\u16a7\7\32\2\2\u16a7")
        buf.write("\u16aa\7\u008f\2\2\u16a8\u16aa\7\u030a\2\2\u16a9\u16a6")
        buf.write("\3\2\2\2\u16a9\u16a8\3\2\2\2\u16aa\u16ab\3\2\2\2\u16ab")
        buf.write("\u16ad\5\u0204\u0103\2\u16ac\u16a9\3\2\2\2\u16ac\u16ad")
        buf.write("\3\2\2\2\u16ad\u16c5\3\2\2\2\u16ae\u16c5\ti\2\2\u16af")
        buf.write("\u16b1\7\u00da\2\2\u16b0\u16b2\7\u00d2\2\2\u16b1\u16b0")
        buf.write("\3\2\2\2\u16b1\u16b2\3\2\2\2\u16b2\u16b4\3\2\2\2\u16b3")
        buf.write("\u16b5\7\u00d5\2\2\u16b4\u16b3\3\2\2\2\u16b4\u16b5\3\2")
        buf.write("\2\2\u16b5\u16bc\3\2\2\2\u16b6\u16b7\7\32\2\2\u16b7\u16ba")
        buf.write("\7\u008f\2\2\u16b8\u16ba\7\u030a\2\2\u16b9\u16b6\3\2\2")
        buf.write("\2\u16b9\u16b8\3\2\2\2\u16ba\u16bb\3\2\2\2\u16bb\u16bd")
        buf.write("\5\u0204\u0103\2\u16bc\u16b9\3\2\2\2\u16bc\u16bd\3\2\2")
        buf.write("\2\u16bd\u16c0\3\2\2\2\u16be\u16bf\7\34\2\2\u16bf\u16c1")
        buf.write("\5\u0206\u0104\2\u16c0\u16be\3\2\2\2\u16c0\u16c1\3\2\2")
        buf.write("\2\u16c1\u16c5\3\2\2\2\u16c2\u16c3\7\u00da\2\2\u16c3\u16c5")
        buf.write("\7\u00d6\2\2\u16c4\u1641\3\2\2\2\u16c4\u1658\3\2\2\2\u16c4")
        buf.write("\u1660\3\2\2\2\u16c4\u1668\3\2\2\2\u16c4\u1671\3\2\2\2")
        buf.write("\u16c4\u167b\3\2\2\2\u16c4\u1685\3\2\2\2\u16c4\u1692\3")
        buf.write("\2\2\2\u16c4\u169c\3\2\2\2\u16c4\u169d\3\2\2\2\u16c4\u16a1")
        buf.write("\3\2\2\2\u16c4\u16ae\3\2\2\2\u16c4\u16af\3\2\2\2\u16c4")
        buf.write("\u16c2\3\2\2\2\u16c5\u0227\3\2\2\2\u16c6\u16c7\7\u042b")
        buf.write("\2\2\u16c7\u16cc\7\u043a\2\2\u16c8\u16c9\7\u042d\2\2\u16c9")
        buf.write("\u16cb\7\u043a\2\2\u16ca\u16c8\3\2\2\2\u16cb\u16ce\3\2")
        buf.write("\2\2\u16cc\u16ca\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16cf")
        buf.write("\3\2\2\2\u16ce\u16cc\3\2\2\2\u16cf\u16d0\7\u042c\2\2\u16d0")
        buf.write("\u0229\3\2\2\2\u16d1\u16d3\tj\2\2\u16d2\u16d4\5\u022c")
        buf.write("\u0117\2\u16d3\u16d2\3\2\2\2\u16d3\u16d4\3\2\2\2\u16d4")
        buf.write("\u16eb\3\2\2\2\u16d5\u16d7\7\u00d1\2\2\u16d6\u16d8\5\u022c")
        buf.write("\u0117\2\u16d7\u16d6\3\2\2\2\u16d7\u16d8\3\2\2\2\u16d8")
        buf.write("\u16df\3\2\2\2\u16d9\u16da\7\32\2\2\u16da\u16dd\7\u008f")
        buf.write("\2\2\u16db\u16dd\7\u030a\2\2\u16dc\u16d9\3\2\2\2\u16dc")
        buf.write("\u16db\3\2\2\2\u16dd\u16de\3\2\2\2\u16de\u16e0\5\u0204")
        buf.write("\u0103\2\u16df\u16dc\3\2\2\2\u16df\u16e0\3\2\2\2\u16e0")
        buf.write("\u16eb\3\2\2\2\u16e1\u16eb\tk\2\2\u16e2\u16e4\7\u00c9")
        buf.write("\2\2\u16e3\u16e5\5\u022e\u0118\2\u16e4\u16e3\3\2\2\2\u16e4")
        buf.write("\u16e5\3\2\2\2\u16e5\u16eb\3\2\2\2\u16e6\u16e8\td\2\2")
        buf.write("\u16e7\u16e9\7\u00c1\2\2\u16e8\u16e7\3\2\2\2\u16e8\u16e9")
        buf.write("\3\2\2\2\u16e9\u16eb\3\2\2\2\u16ea\u16d1\3\2\2\2\u16ea")
        buf.write("\u16d5\3\2\2\2\u16ea\u16e1\3\2\2\2\u16ea\u16e2\3\2\2\2")
        buf.write("\u16ea\u16e6\3\2\2\2\u16eb\u022b\3\2\2\2\u16ec\u16ed\7")
        buf.write("\u042b\2\2\u16ed\u16ee\5\u0218\u010d\2\u16ee\u16ef\7\u042c")
        buf.write("\2\2\u16ef\u022d\3\2\2\2\u16f0\u16f1\7\u042b\2\2\u16f1")
        buf.write("\u16f2\5\u0218\u010d\2\u16f2\u16f3\7\u042d\2\2\u16f3\u16f4")
        buf.write("\5\u0218\u010d\2\u16f4\u16f5\7\u042c\2\2\u16f5\u022f\3")
        buf.write("\2\2\2\u16f6\u16f7\7\u042b\2\2\u16f7\u16fa\5\u0218\u010d")
        buf.write("\2\u16f8\u16f9\7\u042d\2\2\u16f9\u16fb\5\u0218\u010d\2")
        buf.write("\u16fa\u16f8\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fc\3")
        buf.write("\2\2\2\u16fc\u16fd\7\u042c\2\2\u16fd\u0231\3\2\2\2\u16fe")
        buf.write("\u1703\5\u0212\u010a\2\u16ff\u1700\7\u042d\2\2\u1700\u1702")
        buf.write("\5\u0212\u010a\2\u1701\u16ff\3\2\2\2\u1702\u1705\3\2\2")
        buf.write("\2\u1703\u1701\3\2\2\2\u1703\u1704\3\2\2\2\u1704\u0233")
        buf.write("\3\2\2\2\u1705\u1703\3\2\2\2\u1706\u170b\5\u01fa\u00fe")
        buf.write("\2\u1707\u1708\7\u042d\2\2\u1708\u170a\5\u01fa\u00fe\2")
        buf.write("\u1709\u1707\3\2\2\2\u170a\u170d\3\2\2\2\u170b\u1709\3")
        buf.write("\2\2\2\u170b\u170c\3\2\2\2\u170c\u0235\3\2\2\2\u170d\u170b")
        buf.write("\3\2\2\2\u170e\u170f\7\u042b\2\2\u170f\u1714\5\u01fe\u0100")
        buf.write("\2\u1710\u1711\7\u042d\2\2\u1711\u1713\5\u01fe\u0100\2")
        buf.write("\u1712\u1710\3\2\2\2\u1713\u1716\3\2\2\2\u1714\u1712\3")
        buf.write("\2\2\2\u1714\u1715\3\2\2\2\u1715\u1717\3\2\2\2\u1716\u1714")
        buf.write("\3\2\2\2\u1717\u1718\7\u042c\2\2\u1718\u0237\3\2\2\2\u1719")
        buf.write("\u171e\5\u0260\u0131\2\u171a\u171b\7\u042d\2\2\u171b\u171d")
        buf.write("\5\u0260\u0131\2\u171c\u171a\3\2\2\2\u171d\u1720\3\2\2")
        buf.write("\2\u171e\u171c\3\2\2\2\u171e\u171f\3\2\2\2\u171f\u0239")
        buf.write("\3\2\2\2\u1720\u171e\3\2\2\2\u1721\u1726\5\u0246\u0124")
        buf.write("\2\u1722\u1723\7\u042d\2\2\u1723\u1725\5\u0246\u0124\2")
        buf.write("\u1724\u1722\3\2\2\2\u1725\u1728\3\2\2\2\u1726\u1724\3")
        buf.write("\2\2\2\u1726\u1727\3\2\2\2\u1727\u023b\3\2\2\2\u1728\u1726")
        buf.write("\3\2\2\2\u1729\u172e\5\u0224\u0113\2\u172a\u172b\7\u042d")
        buf.write("\2\2\u172b\u172d\5\u0224\u0113\2\u172c\u172a\3\2\2\2\u172d")
        buf.write("\u1730\3\2\2\2\u172e\u172c\3\2\2\2\u172e\u172f\3\2\2\2")
        buf.write("\u172f\u023d\3\2\2\2\u1730\u172e\3\2\2\2\u1731\u1736\7")
        buf.write("\u043a\2\2\u1732\u1733\7\u042d\2\2\u1733\u1735\7\u043a")
        buf.write("\2\2\u1734\u1732\3\2\2\2\u1735\u1738\3\2\2\2\u1736\u1734")
        buf.write("\3\2\2\2\u1736\u1737\3\2\2\2\u1737\u023f\3\2\2\2\u1738")
        buf.write("\u1736\3\2\2\2\u1739\u173e\7\u0446\2\2\u173a\u173b\7\u042d")
        buf.write("\2\2\u173b\u173d\7\u0446\2\2\u173c\u173a\3\2\2\2\u173d")
        buf.write("\u1740\3\2\2\2\u173e\u173c\3\2\2\2\u173e\u173f\3\2\2\2")
        buf.write("\u173f\u0241\3\2\2\2\u1740\u173e\3\2\2\2\u1741\u174c\7")
        buf.write("m\2\2\u1742\u1744\5\u0266\u0134\2\u1743\u1742\3\2\2\2")
        buf.write("\u1743\u1744\3\2\2\2\u1744\u1745\3\2\2\2\u1745\u174c\5")
        buf.write("\u0224\u0113\2\u1746\u174c\5\u0244\u0123\2\u1747\u1748")
        buf.write("\7\u042b\2\2\u1748\u1749\5\u0260\u0131\2\u1749\u174a\7")
        buf.write("\u042c\2\2\u174a\u174c\3\2\2\2\u174b\u1741\3\2\2\2\u174b")
        buf.write("\u1743\3\2\2\2\u174b\u1746\3\2\2\2\u174b\u1747\3\2\2\2")
        buf.write("\u174c\u1750\3\2\2\2\u174d\u174e\7o\2\2\u174e\u174f\7")
        buf.write("\u00ab\2\2\u174f\u1751\5\u0244\u0123\2\u1750\u174d\3\2")
        buf.write("\2\2\u1750\u1751\3\2\2\2\u1751\u0243\3\2\2\2\u1752\u1758")
        buf.write("\tl\2\2\u1753\u1755\7\u042b\2\2\u1754\u1756\5\u0218\u010d")
        buf.write("\2\u1755\u1754\3\2\2\2\u1755\u1756\3\2\2\2\u1756\u1757")
        buf.write("\3\2\2\2\u1757\u1759\7\u042c\2\2\u1758\u1753\3\2\2\2\u1758")
        buf.write("\u1759\3\2\2\2\u1759\u1761\3\2\2\2\u175a\u175b\7\u0128")
        buf.write("\2\2\u175b\u175d\7\u042b\2\2\u175c\u175e\5\u0218\u010d")
        buf.write("\2\u175d\u175c\3\2\2\2\u175d\u175e\3\2\2\2\u175e\u175f")
        buf.write("\3\2\2\2\u175f\u1761\7\u042c\2\2\u1760\u1752\3\2\2\2\u1760")
        buf.write("\u175a\3\2\2\2\u1761\u0245\3\2\2\2\u1762\u1765\5\u0260")
        buf.write("\u0131\2\u1763\u1765\7*\2\2\u1764\u1762\3\2\2\2\u1764")
        buf.write("\u1763\3\2\2\2\u1765\u0247\3\2\2\2\u1766\u1767\7J\2\2")
        buf.write("\u1767\u1768\7:\2\2\u1768\u0249\3\2\2\2\u1769\u176a\7")
        buf.write("J\2\2\u176a\u176b\7k\2\2\u176b\u176c\7:\2\2\u176c\u024b")
        buf.write("\3\2\2\2\u176d\u177f\5\u024e\u0128\2\u176e\u177f\5\u0256")
        buf.write("\u012c\2\u176f\u1770\5\u0258\u012d\2\u1770\u1772\7\u042b")
        buf.write("\2\2\u1771\u1773\5\u025c\u012f\2\u1772\u1771\3\2\2\2\u1772")
        buf.write("\u1773\3\2\2\2\u1773\u1774\3\2\2\2\u1774\u1775\7\u042c")
        buf.write("\2\2\u1775\u177f\3\2\2\2\u1776\u1777\5\u01f8\u00fd\2\u1777")
        buf.write("\u1779\7\u042b\2\2\u1778\u177a\5\u025c\u012f\2\u1779\u1778")
        buf.write("\3\2\2\2\u1779\u177a\3\2\2\2\u177a\u177b\3\2\2\2\u177b")
        buf.write("\u177c\7\u042c\2\2\u177c\u177f\3\2\2\2\u177d\u177f\5\u025a")
        buf.write("\u012e\2\u177e\u176d\3\2\2\2\u177e\u176e\3\2\2\2\u177e")
        buf.write("\u176f\3\2\2\2\u177e\u1776\3\2\2\2\u177e\u177d\3\2\2\2")
        buf.write("\u177f\u024d\3\2\2\2\u1780\u1783\tm\2\2\u1781\u1782\7")
        buf.write("\u042b\2\2\u1782\u1784\7\u042c\2\2\u1783\u1781\3\2\2\2")
        buf.write("\u1783\u1784\3\2\2\2\u1784\u1841\3\2\2\2\u1785\u1786\7")
        buf.write("!\2\2\u1786\u1787\7\u042b\2\2\u1787\u1788\5\u0260\u0131")
        buf.write("\2\u1788\u1789\7\u042d\2\2\u1789\u178a\5\u022a\u0116\2")
        buf.write("\u178a\u178b\7\u042c\2\2\u178b\u1841\3\2\2\2\u178c\u178d")
        buf.write("\7!\2\2\u178d\u178e\7\u042b\2\2\u178e\u178f\5\u0260\u0131")
        buf.write("\2\u178f\u1790\7\u00ae\2\2\u1790\u1791\5\u0204\u0103\2")
        buf.write("\u1791\u1792\7\u042c\2\2\u1792\u1841\3\2\2\2\u1793\u1794")
        buf.write("\7\30\2\2\u1794\u1795\7\u042b\2\2\u1795\u1796\5\u0260")
        buf.write("\u0131\2\u1796\u1797\7\17\2\2\u1797\u1798\5\u022a\u0116")
        buf.write("\2\u1798\u1799\7\u042c\2\2\u1799\u1841\3\2\2\2\u179a\u179b")
        buf.write("\7\u00af\2\2\u179b\u179c\7\u042b\2\2\u179c\u179d\5\u01fc")
        buf.write("\u00ff\2\u179d\u179e\7\u042c\2\2\u179e\u1841\3\2\2\2\u179f")
        buf.write("\u17a0\7\27\2\2\u17a0\u17a2\5\u0260\u0131\2\u17a1\u17a3")
        buf.write("\5\u0250\u0129\2\u17a2\u17a1\3\2\2\2\u17a3\u17a4\3\2\2")
        buf.write("\2\u17a4\u17a2\3\2\2\2\u17a4\u17a5\3\2\2\2\u17a5\u17a8")
        buf.write("\3\2\2\2\u17a6\u17a7\7\65\2\2\u17a7\u17a9\5\u025e\u0130")
        buf.write("\2\u17a8\u17a6\3\2\2\2\u17a8\u17a9\3\2\2\2\u17a9\u17aa")
        buf.write("\3\2\2\2\u17aa\u17ab\7\u0178\2\2\u17ab\u1841\3\2\2\2\u17ac")
        buf.write("\u17ae\7\27\2\2\u17ad\u17af\5\u0250\u0129\2\u17ae\u17ad")
        buf.write("\3\2\2\2\u17af\u17b0\3\2\2\2\u17b0\u17ae\3\2\2\2\u17b0")
        buf.write("\u17b1\3\2\2\2\u17b1\u17b4\3\2\2\2\u17b2\u17b3\7\65\2")
        buf.write("\2\u17b3\u17b5\5\u025e\u0130\2\u17b4\u17b2\3\2\2\2\u17b4")
        buf.write("\u17b5\3\2\2\2\u17b5\u17b6\3\2\2\2\u17b6\u17b7\7\u0178")
        buf.write("\2\2\u17b7\u1841\3\2\2\2\u17b8\u17b9\7\u00d1\2\2\u17b9")
        buf.write("\u17ba\7\u042b\2\2\u17ba\u17bd\5\u025c\u012f\2\u17bb\u17bc")
        buf.write("\7\u00ae\2\2\u17bc\u17be\5\u0204\u0103\2\u17bd\u17bb\3")
        buf.write("\2\2\2\u17bd\u17be\3\2\2\2\u17be\u17bf\3\2\2\2\u17bf\u17c0")
        buf.write("\7\u042c\2\2\u17c0\u1841\3\2\2\2\u17c1\u17c2\7\u0129\2")
        buf.write("\2\u17c2\u17c5\7\u042b\2\2\u17c3\u17c6\5\u021c\u010f\2")
        buf.write("\u17c4\u17c6\5\u0260\u0131\2\u17c5\u17c3\3\2\2\2\u17c5")
        buf.write("\u17c4\3\2\2\2\u17c6\u17c7\3\2\2\2\u17c7\u17ca\7L\2\2")
        buf.write("\u17c8\u17cb\5\u021c\u010f\2\u17c9\u17cb\5\u0260\u0131")
        buf.write("\2\u17ca\u17c8\3\2\2\2\u17ca\u17c9\3\2\2\2\u17cb\u17cc")
        buf.write("\3\2\2\2\u17cc\u17cd\7\u042c\2\2\u17cd\u1841\3\2\2\2\u17ce")
        buf.write("\u17cf\tn\2\2\u17cf\u17d2\7\u042b\2\2\u17d0\u17d3\5\u021c")
        buf.write("\u010f\2\u17d1\u17d3\5\u0260\u0131\2\u17d2\u17d0\3\2\2")
        buf.write("\2\u17d2\u17d1\3\2\2\2\u17d3\u17d4\3\2\2\2\u17d4\u17d7")
        buf.write("\7B\2\2\u17d5\u17d8\5\u0218\u010d\2\u17d6\u17d8\5\u0260")
        buf.write("\u0131\2\u17d7\u17d5\3\2\2\2\u17d7\u17d6\3\2\2\2\u17d8")
        buf.write("\u17de\3\2\2\2\u17d9\u17dc\7?\2\2\u17da\u17dd\5\u0218")
        buf.write("\u010d\2\u17db\u17dd\5\u0260\u0131\2\u17dc\u17da\3\2\2")
        buf.write("\2\u17dc\u17db\3\2\2\2\u17dd\u17df\3\2\2\2\u17de\u17d9")
        buf.write("\3\2\2\2\u17de\u17df\3\2\2\2\u17df\u17e0\3\2\2\2\u17e0")
        buf.write("\u17e1\7\u042c\2\2\u17e1\u1841\3\2\2\2\u17e2\u17e3\7\u012d")
        buf.write("\2\2\u17e3\u17e4\7\u042b\2\2\u17e4\u17e7\to\2\2\u17e5")
        buf.write("\u17e8\5\u021c\u010f\2\u17e6\u17e8\5\u0260\u0131\2\u17e7")
        buf.write("\u17e5\3\2\2\2\u17e7\u17e6\3\2\2\2\u17e7\u17e8\3\2\2\2")
        buf.write("\u17e8\u17e9\3\2\2\2\u17e9\u17ec\7B\2\2\u17ea\u17ed\5")
        buf.write("\u021c\u010f\2\u17eb\u17ed\5\u0260\u0131\2\u17ec\u17ea")
        buf.write("\3\2\2\2\u17ec\u17eb\3\2\2\2\u17ed\u17ee\3\2\2\2\u17ee")
        buf.write("\u17ef\7\u042c\2\2\u17ef\u1841\3\2\2\2\u17f0\u17f1\7\u012d")
        buf.write("\2\2\u17f1\u17f4\7\u042b\2\2\u17f2\u17f5\5\u021c\u010f")
        buf.write("\2\u17f3\u17f5\5\u0260\u0131\2\u17f4\u17f2\3\2\2\2\u17f4")
        buf.write("\u17f3\3\2\2\2\u17f5\u17f6\3\2\2\2\u17f6\u17f9\7B\2\2")
        buf.write("\u17f7\u17fa\5\u021c\u010f\2\u17f8\u17fa\5\u0260\u0131")
        buf.write("\2\u17f9\u17f7\3\2\2\2\u17f9\u17f8\3\2\2\2\u17fa\u17fb")
        buf.write("\3\2\2\2\u17fb\u17fc\7\u042c\2\2\u17fc\u1841\3\2\2\2\u17fd")
        buf.write("\u17fe\7\u040c\2\2\u17fe\u1801\7\u042b\2\2\u17ff\u1802")
        buf.write("\5\u021c\u010f\2\u1800\u1802\5\u0260\u0131\2\u1801\u17ff")
        buf.write("\3\2\2\2\u1801\u1800\3\2\2\2\u1802\u1809\3\2\2\2\u1803")
        buf.write("\u1804\7\17\2\2\u1804\u1805\tp\2\2\u1805\u1806\7\u042b")
        buf.write("\2\2\u1806\u1807\5\u0218\u010d\2\u1807\u1808\7\u042c\2")
        buf.write("\2\u1808\u180a\3\2\2\2\u1809\u1803\3\2\2\2\u1809\u180a")
        buf.write("\3\2\2\2\u180a\u180c\3\2\2\2\u180b\u180d\5\u0252\u012a")
        buf.write("\2\u180c\u180b\3\2\2\2\u180c\u180d\3\2\2\2\u180d\u180e")
        buf.write("\3\2\2\2\u180e\u180f\7\u042c\2\2\u180f\u1841\3\2\2\2\u1810")
        buf.write("\u1811\7\u0126\2\2\u1811\u1812\7\u042b\2\2\u1812\u1813")
        buf.write("\5<\37\2\u1813\u1816\7B\2\2\u1814\u1817\5\u021c\u010f")
        buf.write("\2\u1815\u1817\5\u0260\u0131\2\u1816\u1814\3\2\2\2\u1816")
        buf.write("\u1815\3\2\2\2\u1817\u1818\3\2\2\2\u1818\u1819\7\u042c")
        buf.write("\2\2\u1819\u1841\3\2\2\2\u181a\u181b\7\u0344\2\2\u181b")
        buf.write("\u181c\7\u042b\2\2\u181c\u181d\tq\2\2\u181d\u181e\7\u042d")
        buf.write("\2\2\u181e\u181f\5\u021c\u010f\2\u181f\u1820\7\u042c\2")
        buf.write("\2\u1820\u1841\3\2\2\2\u1821\u1822\7\u00f7\2\2\u1822\u1823")
        buf.write("\7\u042b\2\2\u1823\u1824\5\u0260\u0131\2\u1824\u1825\7")
        buf.write("\u042d\2\2\u1825\u1828\5\u0260\u0131\2\u1826\u1827\7\u0221")
        buf.write("\2\2\u1827\u1829\5\u022a\u0116\2\u1828\u1826\3\2\2\2\u1828")
        buf.write("\u1829\3\2\2\2\u1829\u1832\3\2\2\2\u182a\u182f\7\u044a")
        buf.write("\2\2\u182b\u182f\7\u017c\2\2\u182c\u182d\7*\2\2\u182d")
        buf.write("\u182f\5\u0242\u0122\2\u182e\u182a\3\2\2\2\u182e\u182b")
        buf.write("\3\2\2\2\u182e\u182c\3\2\2\2\u182f\u1830\3\2\2\2\u1830")
        buf.write("\u1831\7o\2\2\u1831\u1833\7\67\2\2\u1832\u182e\3\2\2\2")
        buf.write("\u1832\u1833\3\2\2\2\u1833\u183c\3\2\2\2\u1834\u1839\7")
        buf.write("\u044a\2\2\u1835\u1839\7\u017c\2\2\u1836\u1837\7*\2\2")
        buf.write("\u1837\u1839\5\u0242\u0122\2\u1838\u1834\3\2\2\2\u1838")
        buf.write("\u1835\3\2\2\2\u1838\u1836\3\2\2\2\u1839\u183a\3\2\2\2")
        buf.write("\u183a\u183b\7o\2\2\u183b\u183d\7\u017c\2\2\u183c\u1838")
        buf.write("\3\2\2\2\u183c\u183d\3\2\2\2\u183d\u183e\3\2\2\2\u183e")
        buf.write("\u183f\7\u042c\2\2\u183f\u1841\3\2\2\2\u1840\u1780\3\2")
        buf.write("\2\2\u1840\u1785\3\2\2\2\u1840\u178c\3\2\2\2\u1840\u1793")
        buf.write("\3\2\2\2\u1840\u179a\3\2\2\2\u1840\u179f\3\2\2\2\u1840")
        buf.write("\u17ac\3\2\2\2\u1840\u17b8\3\2\2\2\u1840\u17c1\3\2\2\2")
        buf.write("\u1840\u17ce\3\2\2\2\u1840\u17e2\3\2\2\2\u1840\u17f0\3")
        buf.write("\2\2\2\u1840\u17fd\3\2\2\2\u1840\u1810\3\2\2\2\u1840\u181a")
        buf.write("\3\2\2\2\u1840\u1821\3\2\2\2\u1841\u024f\3\2\2\2\u1842")
        buf.write("\u1843\7\u00b0\2\2\u1843\u1844\5\u025e\u0130\2\u1844\u1845")
        buf.write("\7\u00a1\2\2\u1845\u1846\5\u025e\u0130\2\u1846\u0251\3")
        buf.write("\2\2\2\u1847\u1848\7\u01b4\2\2\u1848\u184d\5\u0254\u012b")
        buf.write("\2\u1849\u184a\7\u042d\2\2\u184a\u184c\5\u0254\u012b\2")
        buf.write("\u184b\u1849\3\2\2\2\u184c\u184f\3\2\2\2\u184d\u184b\3")
        buf.write("\2\2\2\u184d\u184e\3\2\2\2\u184e\u1856\3\2\2\2\u184f\u184d")
        buf.write("\3\2\2\2\u1850\u1851\7\u01b4\2\2\u1851\u1852\5\u0218\u010d")
        buf.write("\2\u1852\u1853\7\u041f\2\2\u1853\u1854\5\u0218\u010d\2")
        buf.write("\u1854\u1856\3\2\2\2\u1855\u1847\3\2\2\2\u1855\u1850\3")
        buf.write("\2\2\2\u1856\u0253\3\2\2\2\u1857\u1859\5\u0218\u010d\2")
        buf.write("\u1858\u185a\tr\2\2\u1859\u1858\3\2\2\2\u1859\u185a\3")
        buf.write("\2\2\2\u185a\u0255\3\2\2\2\u185b\u185c\ts\2\2\u185c\u185e")
        buf.write("\7\u042b\2\2\u185d\u185f\t*\2\2\u185e\u185d\3\2\2\2\u185e")
        buf.write("\u185f\3\2\2\2\u185f\u1860\3\2\2\2\u1860\u1861\5\u025e")
        buf.write("\u0130\2\u1861\u1862\7\u042c\2\2\u1862\u1894\3\2\2\2\u1863")
        buf.write("\u1864\7\u0112\2\2\u1864\u186a\7\u042b\2\2\u1865\u186b")
        buf.write("\7\u041a\2\2\u1866\u1868\7\n\2\2\u1867\u1866\3\2\2\2\u1867")
        buf.write("\u1868\3\2\2\2\u1868\u1869\3\2\2\2\u1869\u186b\5\u025e")
        buf.write("\u0130\2\u186a\u1865\3\2\2\2\u186a\u1867\3\2\2\2\u186b")
        buf.write("\u186c\3\2\2\2\u186c\u1894\7\u042c\2\2\u186d\u186e\7\u0112")
        buf.write("\2\2\u186e\u186f\7\u042b\2\2\u186f\u1870\7\61\2\2\u1870")
        buf.write("\u1871\5\u025c\u012f\2\u1871\u1872\7\u042c\2\2\u1872\u1894")
        buf.write("\3\2\2\2\u1873\u1874\tt\2\2\u1874\u1876\7\u042b\2\2\u1875")
        buf.write("\u1877\7\n\2\2\u1876\u1875\3\2\2\2\u1876\u1877\3\2\2\2")
        buf.write("\u1877\u1878\3\2\2\2\u1878\u1879\5\u025e\u0130\2\u1879")
        buf.write("\u187a\7\u042c\2\2\u187a\u1894\3\2\2\2\u187b\u187c\7\u0113")
        buf.write("\2\2\u187c\u187e\7\u042b\2\2\u187d\u187f\7\61\2\2\u187e")
        buf.write("\u187d\3\2\2\2\u187e\u187f\3\2\2\2\u187f\u1880\3\2\2\2")
        buf.write("\u1880\u188b\5\u025c\u012f\2\u1881\u1882\7t\2\2\u1882")
        buf.write("\u1883\7\24\2\2\u1883\u1888\5\u00d4k\2\u1884\u1885\7\u042d")
        buf.write("\2\2\u1885\u1887\5\u00d4k\2\u1886\u1884\3\2\2\2\u1887")
        buf.write("\u188a\3\2\2\2\u1888\u1886\3\2\2\2\u1888\u1889\3\2\2\2")
        buf.write("\u1889\u188c\3\2\2\2\u188a\u1888\3\2\2\2\u188b\u1881\3")
        buf.write("\2\2\2\u188b\u188c\3\2\2\2\u188c\u188f\3\2\2\2\u188d\u188e")
        buf.write("\7\u0090\2\2\u188e\u1890\7\u043a\2\2\u188f\u188d\3\2\2")
        buf.write("\2\u188f\u1890\3\2\2\2\u1890\u1891\3\2\2\2\u1891\u1892")
        buf.write("\7\u042c\2\2\u1892\u1894\3\2\2\2\u1893\u185b\3\2\2\2\u1893")
        buf.write("\u1863\3\2\2\2\u1893\u186d\3\2\2\2\u1893\u1873\3\2\2\2")
        buf.write("\u1893\u187b\3\2\2\2\u1894\u0257\3\2\2\2\u1895\u18ad\5")
        buf.write("\u027e\u0140\2\u1896\u18ad\7\u02ad\2\2\u1897\u18ad\7\u0122")
        buf.write("\2\2\u1898\u18ad\7\u011e\2\2\u1899\u18ad\7\u011f\2\2\u189a")
        buf.write("\u18ad\7\u0120\2\2\u189b\u18ad\7\u0123\2\2\u189c\u18ad")
        buf.write("\7\u0124\2\2\u189d\u18ad\7\u0125\2\2\u189e\u18ad\7J\2")
        buf.write("\2\u189f\u18ad\7Q\2\2\u18a0\u18ad\7\u0121\2\2\u18a1\u18ad")
        buf.write("\7\u0127\2\2\u18a2\u18ad\7\u01d8\2\2\u18a3\u18ad\7\u0128")
        buf.write("\2\2\u18a4\u18ad\7\u0084\2\2\u18a5\u18ad\7\u012a\2\2\u18a6")
        buf.write("\u18ad\7\u012b\2\2\u18a7\u18ad\7\u012c\2\2\u18a8\u18ad")
        buf.write("\7\u012d\2\2\u18a9\u18ad\7\u012e\2\2\u18aa\u18ad\7\u012f")
        buf.write("\2\2\u18ab\u18ad\7\u0130\2\2\u18ac\u1895\3\2\2\2\u18ac")
        buf.write("\u1896\3\2\2\2\u18ac\u1897\3\2\2\2\u18ac\u1898\3\2\2\2")
        buf.write("\u18ac\u1899\3\2\2\2\u18ac\u189a\3\2\2\2\u18ac\u189b\3")
        buf.write("\2\2\2\u18ac\u189c\3\2\2\2\u18ac\u189d\3\2\2\2\u18ac\u189e")
        buf.write("\3\2\2\2\u18ac\u189f\3\2\2\2\u18ac\u18a0\3\2\2\2\u18ac")
        buf.write("\u18a1\3\2\2\2\u18ac\u18a2\3\2\2\2\u18ac\u18a3\3\2\2\2")
        buf.write("\u18ac\u18a4\3\2\2\2\u18ac\u18a5\3\2\2\2\u18ac\u18a6\3")
        buf.write("\2\2\2\u18ac\u18a7\3\2\2\2\u18ac\u18a8\3\2\2\2\u18ac\u18a9")
        buf.write("\3\2\2\2\u18ac\u18aa\3\2\2\2\u18ac\u18ab\3\2\2\2\u18ad")
        buf.write("\u0259\3\2\2\2\u18ae\u18af\tu\2\2\u18af\u18b0\7\u042b")
        buf.write("\2\2\u18b0\u18b1\5\u025e\u0130\2\u18b1\u18b2\7\u042c\2")
        buf.write("\2\u18b2\u025b\3\2\2\2\u18b3\u18b8\5\u0224\u0113\2\u18b4")
        buf.write("\u18b8\5\u01fc\u00ff\2\u18b5\u18b8\5\u024c\u0127\2\u18b6")
        buf.write("\u18b8\5\u0260\u0131\2\u18b7\u18b3\3\2\2\2\u18b7\u18b4")
        buf.write("\3\2\2\2\u18b7\u18b5\3\2\2\2\u18b7\u18b6\3\2\2\2\u18b8")
        buf.write("\u18c2\3\2\2\2\u18b9\u18be\7\u042d\2\2\u18ba\u18bf\5\u0224")
        buf.write("\u0113\2\u18bb\u18bf\5\u01fc\u00ff\2\u18bc\u18bf\5\u024c")
        buf.write("\u0127\2\u18bd\u18bf\5\u0260\u0131\2\u18be\u18ba\3\2\2")
        buf.write("\2\u18be\u18bb\3\2\2\2\u18be\u18bc\3\2\2\2\u18be\u18bd")
        buf.write("\3\2\2\2\u18bf\u18c1\3\2\2\2\u18c0\u18b9\3\2\2\2\u18c1")
        buf.write("\u18c4\3\2\2\2\u18c2\u18c0\3\2\2\2\u18c2\u18c3\3\2\2\2")
        buf.write("\u18c3\u025d\3\2\2\2\u18c4\u18c2\3\2\2\2\u18c5\u18ca\5")
        buf.write("\u0224\u0113\2\u18c6\u18ca\5\u01fc\u00ff\2\u18c7\u18ca")
        buf.write("\5\u024c\u0127\2\u18c8\u18ca\5\u0260\u0131\2\u18c9\u18c5")
        buf.write("\3\2\2\2\u18c9\u18c6\3\2\2\2\u18c9\u18c7\3\2\2\2\u18c9")
        buf.write("\u18c8\3\2\2\2\u18ca\u025f\3\2\2\2\u18cb\u18cc\b\u0131")
        buf.write("\1\2\u18cc\u18cd\tv\2\2\u18cd\u18d7\5\u0260\u0131\6\u18ce")
        buf.write("\u18cf\5\u0262\u0132\2\u18cf\u18d1\7T\2\2\u18d0\u18d2")
        buf.write("\7k\2\2\u18d1\u18d0\3\2\2\2\u18d1\u18d2\3\2\2\2\u18d2")
        buf.write("\u18d3\3\2\2\2\u18d3\u18d4\tw\2\2\u18d4\u18d7\3\2\2\2")
        buf.write("\u18d5\u18d7\5\u0262\u0132\2\u18d6\u18cb\3\2\2\2\u18d6")
        buf.write("\u18ce\3\2\2\2\u18d6\u18d5\3\2\2\2\u18d7\u18de\3\2\2\2")
        buf.write("\u18d8\u18d9\f\5\2\2\u18d9\u18da\5\u026a\u0136\2\u18da")
        buf.write("\u18db\5\u0260\u0131\6\u18db\u18dd\3\2\2\2\u18dc\u18d8")
        buf.write("\3\2\2\2\u18dd\u18e0\3\2\2\2\u18de\u18dc\3\2\2\2\u18de")
        buf.write("\u18df\3\2\2\2\u18df\u0261\3\2\2\2\u18e0\u18de\3\2\2\2")
        buf.write("\u18e1\u18e4\b\u0132\1\2\u18e2\u18e3\7\u0446\2\2\u18e3")
        buf.write("\u18e5\7\u0411\2\2\u18e4\u18e2\3\2\2\2\u18e4\u18e5\3\2")
        buf.write("\2\2\u18e5\u18e6\3\2\2\2\u18e6\u18e7\5\u0264\u0133\2\u18e7")
        buf.write("\u1928\3\2\2\2\u18e8\u18e9\f\n\2\2\u18e9\u18ea\5\u0268")
        buf.write("\u0135\2\u18ea\u18eb\5\u0262\u0132\13\u18eb\u1927\3\2")
        buf.write("\2\2\u18ec\u18ee\f\b\2\2\u18ed\u18ef\7k\2\2\u18ee\u18ed")
        buf.write("\3\2\2\2\u18ee\u18ef\3\2\2\2\u18ef\u18f0\3\2\2\2\u18f0")
        buf.write("\u18f1\7\22\2\2\u18f1\u18f2\5\u0262\u0132\2\u18f2\u18f3")
        buf.write("\7\16\2\2\u18f3\u18f4\5\u0262\u0132\t\u18f4\u1927\3\2")
        buf.write("\2\2\u18f5\u18f6\f\7\2\2\u18f6\u18f7\7\u0239\2\2\u18f7")
        buf.write("\u18f8\7]\2\2\u18f8\u1927\5\u0262\u0132\b\u18f9\u18fb")
        buf.write("\f\5\2\2\u18fa\u18fc\7k\2\2\u18fb\u18fa\3\2\2\2\u18fb")
        buf.write("\u18fc\3\2\2\2\u18fc\u18fd\3\2\2\2\u18fd\u18fe\tx\2\2")
        buf.write("\u18fe\u1927\5\u0262\u0132\6\u18ff\u1901\f\f\2\2\u1900")
        buf.write("\u1902\7k\2\2\u1901\u1900\3\2\2\2\u1901\u1902\3\2\2\2")
        buf.write("\u1902\u1903\3\2\2\2\u1903\u1904\7L\2\2\u1904\u1907\7")
        buf.write("\u042b\2\2\u1905\u1908\5\u00b6\\\2\u1906\u1908\5\u0238")
        buf.write("\u011d\2\u1907\u1905\3\2\2\2\u1907\u1906\3\2\2\2\u1908")
        buf.write("\u1909\3\2\2\2\u1909\u190a\7\u042c\2\2\u190a\u1927\3\2")
        buf.write("\2\2\u190b\u190c\f\13\2\2\u190c\u190d\7T\2\2\u190d\u1927")
        buf.write("\5\u0222\u0112\2\u190e\u190f\f\t\2\2\u190f\u1910\5\u0268")
        buf.write("\u0135\2\u1910\u1911\ty\2\2\u1911\u1912\7\u042b\2\2\u1912")
        buf.write("\u1913\5\u00b6\\\2\u1913\u1914\7\u042c\2\2\u1914\u1927")
        buf.write("\3\2\2\2\u1915\u1917\f\6\2\2\u1916\u1918\7k\2\2\u1917")
        buf.write("\u1916\3\2\2\2\u1917\u1918\3\2\2\2\u1918\u1919\3\2\2\2")
        buf.write("\u1919\u191a\7]\2\2\u191a\u191d\5\u0262\u0132\2\u191b")
        buf.write("\u191c\7\u017e\2\2\u191c\u191e\7\u043a\2\2\u191d\u191b")
        buf.write("\3\2\2\2\u191d\u191e\3\2\2\2\u191e\u1927\3\2\2\2\u191f")
        buf.write("\u1920\f\3\2\2\u1920\u1921\7\u01d5\2\2\u1921\u1922\7\u01eb")
        buf.write("\2\2\u1922\u1923\7\u042b\2\2\u1923\u1924\5\u0262\u0132")
        buf.write("\2\u1924\u1925\7\u042c\2\2\u1925\u1927\3\2\2\2\u1926\u18e8")
        buf.write("\3\2\2\2\u1926\u18ec\3\2\2\2\u1926\u18f5\3\2\2\2\u1926")
        buf.write("\u18f9\3\2\2\2\u1926\u18ff\3\2\2\2\u1926\u190b\3\2\2\2")
        buf.write("\u1926\u190e\3\2\2\2\u1926\u1915\3\2\2\2\u1926\u191f\3")
        buf.write("\2\2\2\u1927\u192a\3\2\2\2\u1928\u1926\3\2\2\2\u1928\u1929")
        buf.write("\3\2\2\2\u1929\u0263\3\2\2\2\u192a\u1928\3\2\2\2\u192b")
        buf.write("\u192c\b\u0133\1\2\u192c\u1959\5\u0224\u0113\2\u192d\u1959")
        buf.write("\5\u01fc\u00ff\2\u192e\u1959\5\u024c\u0127\2\u192f\u1959")
        buf.write("\5\u0202\u0102\2\u1930\u1931\5\u0266\u0134\2\u1931\u1932")
        buf.write("\5\u0264\u0133\f\u1932\u1959\3\2\2\2\u1933\u1934\7\u00d5")
        buf.write("\2\2\u1934\u1959\5\u0264\u0133\13\u1935\u1936\7\u042b")
        buf.write("\2\2\u1936\u193b\5\u0260\u0131\2\u1937\u1938\7\u042d\2")
        buf.write("\2\u1938\u193a\5\u0260\u0131\2\u1939\u1937\3\2\2\2\u193a")
        buf.write("\u193d\3\2\2\2\u193b\u1939\3\2\2\2\u193b\u193c\3\2\2\2")
        buf.write("\u193c\u193e\3\2\2\2\u193d\u193b\3\2\2\2\u193e\u193f\7")
        buf.write("\u042c\2\2\u193f\u1959\3\2\2\2\u1940\u1941\7\u0227\2\2")
        buf.write("\u1941\u1942\7\u042b\2\2\u1942\u1945\5\u0260\u0131\2\u1943")
        buf.write("\u1944\7\u042d\2\2\u1944\u1946\5\u0260\u0131\2\u1945\u1943")
        buf.write("\3\2\2\2\u1946\u1947\3\2\2\2\u1947\u1945\3\2\2\2\u1947")
        buf.write("\u1948\3\2\2\2\u1948\u1949\3\2\2\2\u1949\u194a\7\u042c")
        buf.write("\2\2\u194a\u1959\3\2\2\2\u194b\u194c\7:\2\2\u194c\u194d")
        buf.write("\7\u042b\2\2\u194d\u194e\5\u00b6\\\2\u194e\u194f\7\u042c")
        buf.write("\2\2\u194f\u1959\3\2\2\2\u1950\u1951\7\u042b\2\2\u1951")
        buf.write("\u1952\5\u00b6\\\2\u1952\u1953\7\u042c\2\2\u1953\u1959")
        buf.write("\3\2\2\2\u1954\u1955\7R\2\2\u1955\u1956\5\u0260\u0131")
        buf.write("\2\u1956\u1957\5<\37\2\u1957\u1959\3\2\2\2\u1958\u192b")
        buf.write("\3\2\2\2\u1958\u192d\3\2\2\2\u1958\u192e\3\2\2\2\u1958")
        buf.write("\u192f\3\2\2\2\u1958\u1930\3\2\2\2\u1958\u1933\3\2\2\2")
        buf.write("\u1958\u1935\3\2\2\2\u1958\u1940\3\2\2\2\u1958\u194b\3")
        buf.write("\2\2\2\u1958\u1950\3\2\2\2\u1958\u1954\3\2\2\2\u1959\u196b")
        buf.write("\3\2\2\2\u195a\u195b\f\5\2\2\u195b\u195c\5\u026c\u0137")
        buf.write("\2\u195c\u195d\5\u0264\u0133\6\u195d\u196a\3\2\2\2\u195e")
        buf.write("\u195f\f\4\2\2\u195f\u1960\5\u026e\u0138\2\u1960\u1961")
        buf.write("\5\u0264\u0133\5\u1961\u196a\3\2\2\2\u1962\u1963\f\3\2")
        buf.write("\2\u1963\u1964\5\u0270\u0139\2\u1964\u1965\5\u0264\u0133")
        buf.write("\4\u1965\u196a\3\2\2\2\u1966\u1967\f\16\2\2\u1967\u1968")
        buf.write("\7\34\2\2\u1968\u196a\5\u0206\u0104\2\u1969\u195a\3\2")
        buf.write("\2\2\u1969\u195e\3\2\2\2\u1969\u1962\3\2\2\2\u1969\u1966")
        buf.write("\3\2\2\2\u196a\u196d\3\2\2\2\u196b\u1969\3\2\2\2\u196b")
        buf.write("\u196c\3\2\2\2\u196c\u0265\3\2\2\2\u196d\u196b\3\2\2\2")
        buf.write("\u196e\u196f\tz\2\2\u196f\u0267\3\2\2\2\u1970\u197f\7")
        buf.write("\u0422\2\2\u1971\u197f\7\u0423\2\2\u1972\u197f\7\u0424")
        buf.write("\2\2\u1973\u1974\7\u0424\2\2\u1974\u197f\7\u0422\2\2\u1975")
        buf.write("\u1976\7\u0423\2\2\u1976\u197f\7\u0422\2\2\u1977\u1978")
        buf.write("\7\u0424\2\2\u1978\u197f\7\u0423\2\2\u1979\u197a\7\u0425")
        buf.write("\2\2\u197a\u197f\7\u0422\2\2\u197b\u197c\7\u0424\2\2\u197c")
        buf.write("\u197d\7\u0422\2\2\u197d\u197f\7\u0423\2\2\u197e\u1970")
        buf.write("\3\2\2\2\u197e\u1971\3\2\2\2\u197e\u1972\3\2\2\2\u197e")
        buf.write("\u1973\3\2\2\2\u197e\u1975\3\2\2\2\u197e\u1977\3\2\2\2")
        buf.write("\u197e\u1979\3\2\2\2\u197e\u197b\3\2\2\2\u197f\u0269\3")
        buf.write("\2\2\2\u1980\u1988\7\16\2\2\u1981\u1982\7\u0428\2\2\u1982")
        buf.write("\u1988\7\u0428\2\2\u1983\u1988\7\u00b5\2\2\u1984\u1988")
        buf.write("\7s\2\2\u1985\u1986\7\u0427\2\2\u1986\u1988\7\u0427\2")
        buf.write("\2\u1987\u1980\3\2\2\2\u1987\u1981\3\2\2\2\u1987\u1983")
        buf.write("\3\2\2\2\u1987\u1984\3\2\2\2\u1987\u1985\3\2\2\2\u1988")
        buf.write("\u026b\3\2\2\2\u1989\u198a\7\u0424\2\2\u198a\u1991\7\u0424")
        buf.write("\2\2\u198b\u198c\7\u0423\2\2\u198c\u1991\7\u0423\2\2\u198d")
        buf.write("\u1991\7\u0428\2\2\u198e\u1991\7\u0429\2\2\u198f\u1991")
        buf.write("\7\u0427\2\2\u1990\u1989\3\2\2\2\u1990\u198b\3\2\2\2\u1990")
        buf.write("\u198d\3\2\2\2\u1990\u198e\3\2\2\2\u1990\u198f\3\2\2\2")
        buf.write("\u1991\u026d\3\2\2\2\u1992\u1993\t{\2\2\u1993\u026f\3")
        buf.write("\2\2\2\u1994\u1995\7\u041f\2\2\u1995\u199a\7\u0423\2\2")
        buf.write("\u1996\u1997\7\u041f\2\2\u1997\u1998\7\u0423\2\2\u1998")
        buf.write("\u199a\7\u0423\2\2\u1999\u1994\3\2\2\2\u1999\u1996\3\2")
        buf.write("\2\2\u199a\u0271\3\2\2\2\u199b\u199c\t|\2\2\u199c\u0273")
        buf.write("\3\2\2\2\u199d\u199e\t}\2\2\u199e\u0275\3\2\2\2\u199f")
        buf.write("\u19a0\t~\2\2\u19a0\u0277\3\2\2\2\u19a1\u19a2\t\177\2")
        buf.write("\2\u19a2\u0279\3\2\2\2\u19a3\u19a4\t\u0080\2\2\u19a4\u027b")
        buf.write("\3\2\2\2\u19a5\u19a6\t\u0081\2\2\u19a6\u027d\3\2\2\2\u19a7")
        buf.write("\u19a8\t\u0082\2\2\u19a8\u027f\3\2\2\2\u19a9\u19aa\t\u0083")
        buf.write("\2\2\u19aa\u0281\3\2\2\2\u03bc\u0283\u0286\u028c\u028f")
        buf.write("\u0292\u0294\u0299\u029c\u029f\u02a8\u02cf\u02db\u02e6")
        buf.write("\u02f7\u02fc\u0308\u0323\u032c\u0331\u0337\u033c\u0340")
        buf.write("\u0349\u034c\u034f\u0353\u035a\u035d\u0362\u036a\u036f")
        buf.write("\u0374\u0377\u0379\u0385\u0388\u038c\u038f\u0393\u0396")
        buf.write("\u039a\u039d\u03a0\u03a4\u03a7\u03ab\u03b1\u03b7\u03bd")
        buf.write("\u03c4\u03cb\u03d1\u03d7\u03e0\u03e5\u03f5\u03fc\u0400")
        buf.write("\u040a\u040e\u0412\u0416\u041a\u041f\u0422\u0425\u0428")
        buf.write("\u042b\u0431\u0435\u043b\u0440\u0443\u0446\u0448\u0453")
        buf.write("\u0457\u045a\u0468\u046b\u046f\u0472\u0476\u0479\u047d")
        buf.write("\u0480\u0484\u0487\u048a\u048e\u0491\u0495\u049b\u04a8")
        buf.write("\u04af\u04b4\u04b7\u04bc\u04c4\u04ca\u04ce\u04d1\u04d6")
        buf.write("\u04d9\u04dd\u04e0\u04e4\u04e7\u04ef\u04f1\u04f8\u04fe")
        buf.write("\u0506\u0509\u0510\u0513\u0515\u051b\u0521\u0532\u0539")
        buf.write("\u0540\u054b\u054e\u055b\u0568\u056d\u057d\u0585\u058f")
        buf.write("\u0595\u05a1\u05a4\u05a9\u05b6\u05bd\u05c4\u05c6\u05cd")
        buf.write("\u05d1\u05d3\u05d8\u05db\u05e1\u05e6\u05e8\u05ec\u05ef")
        buf.write("\u05f2\u05f8\u05fd\u05ff\u0604\u060b\u060d\u0614\u0619")
        buf.write("\u061d\u0620\u0628\u0630\u0632\u063a\u063e\u0641\u0647")
        buf.write("\u064c\u064f\u0655\u0658\u065c\u065f\u0663\u0668\u066c")
        buf.write("\u0671\u0674\u0678\u067c\u0680\u0684\u0689\u068e\u0693")
        buf.write("\u0699\u069e\u06a3\u06a9\u06ae\u06b3\u06b8\u06bd\u06c2")
        buf.write("\u06c7\u06cc\u06d1\u06d6\u06db\u06e1\u06e9\u06ef\u06fb")
        buf.write("\u0702\u0704\u070c\u0711\u0714\u071c\u0722\u0732\u073e")
        buf.write("\u0740\u0743\u074b\u0751\u0757\u0764\u076b\u0774\u0779")
        buf.write("\u0784\u078d\u0792\u079e\u07a5\u07ae\u07b3\u07bf\u07c6")
        buf.write("\u07cf\u07d4\u07db\u07e4\u07e9\u07eb\u07f0\u07f8\u0801")
        buf.write("\u0805\u0808\u080c\u0811\u0817\u081d\u0822\u0827\u082c")
        buf.write("\u0831\u0834\u0839\u083e\u0848\u084c\u0853\u0858\u085b")
        buf.write("\u0860\u0863\u0867\u086b\u0873\u0886\u0889\u088c\u0890")
        buf.write("\u089a\u08a7\u08ae\u08b1\u08ba\u08bd\u08c0\u08cb\u08ce")
        buf.write("\u08d2\u08da\u08dd\u08e2\u08ea\u08f0\u08f4\u08f8\u08fd")
        buf.write("\u0902\u0909\u090d\u0918\u0920\u0923\u0929\u092f\u0931")
        buf.write("\u0936\u0939\u093f\u0945\u0947\u094b\u094e\u0951\u0957")
        buf.write("\u095d\u0960\u0966\u096c\u096e\u0973\u097b\u097d\u0986")
        buf.write("\u098b\u0993\u0997\u099f\u09a9\u09ae\u09b5\u09b9\u09bd")
        buf.write("\u09dd\u09e1\u09ed\u09f0\u09f9\u0a0a\u0a16\u0a1d\u0a24")
        buf.write("\u0a33\u0a40\u0a46\u0a4c\u0a52\u0a58\u0a5e\u0a64\u0a69")
        buf.write("\u0a70\u0a77\u0a7e\u0a83\u0a86\u0a88\u0a96\u0a9d\u0aa4")
        buf.write("\u0aaa\u0aae\u0ab2\u0ab9\u0abc\u0ac1\u0ac8\u0acf\u0ad3")
        buf.write("\u0adc\u0ae5\u0aee\u0af1\u0af5\u0afe\u0b02\u0b05\u0b08")
        buf.write("\u0b0e\u0b11\u0b17\u0b20\u0b23\u0b2e\u0b31\u0b36\u0b39")
        buf.write("\u0b3e\u0b48\u0b4d\u0b53\u0b55\u0b5b\u0b5d\u0b63\u0b6b")
        buf.write("\u0b70\u0b78\u0b7b\u0b80\u0b83\u0b88\u0b90\u0b98\u0b9e")
        buf.write("\u0ba6\u0bab\u0bb3\u0bb6\u0bba\u0bbd\u0bc5\u0bcb\u0bd4")
        buf.write("\u0bd7\u0bdb\u0bdf\u0be5\u0be9\u0bed\u0bef\u0bf2\u0bf5")
        buf.write("\u0bf8\u0bfe\u0c02\u0c05\u0c08\u0c0b\u0c0e\u0c10\u0c14")
        buf.write("\u0c1a\u0c20\u0c25\u0c28\u0c2e\u0c32\u0c3a\u0c3e\u0c41")
        buf.write("\u0c44\u0c4d\u0c51\u0c54\u0c58\u0c5c\u0c5f\u0c62\u0c67")
        buf.write("\u0c6d\u0c71\u0c7b\u0c81\u0c85\u0c8b\u0c8f\u0c95\u0c98")
        buf.write("\u0ca4\u0ca8\u0cac\u0cb4\u0cb8\u0cc0\u0cc3\u0cc7\u0cca")
        buf.write("\u0cd2\u0cd7\u0cda\u0cdd\u0ce1\u0ce4\u0ced\u0cf2\u0cfb")
        buf.write("\u0d00\u0d07\u0d0e\u0d16\u0d1b\u0d23\u0d26\u0d29\u0d30")
        buf.write("\u0d33\u0d3a\u0d3d\u0d45\u0d4b\u0d56\u0d59\u0d64\u0d6a")
        buf.write("\u0d6e\u0d79\u0d7e\u0d80\u0d84\u0d8e\u0d98\u0d9e\u0da3")
        buf.write("\u0da6\u0da9\u0dac\u0daf\u0db2\u0db8\u0dbd\u0dc0\u0dc3")
        buf.write("\u0dc6\u0dc9\u0dcc\u0dce\u0dd4\u0dd9\u0ddc\u0ddf\u0de2")
        buf.write("\u0de5\u0de9\u0def\u0df3\u0dfd\u0e01\u0e07\u0e10\u0e13")
        buf.write("\u0e17\u0e1a\u0e1e\u0e22\u0e25\u0e27\u0e2f\u0e3b\u0e41")
        buf.write("\u0e43\u0e49\u0e4b\u0e4d\u0e53\u0e5b\u0e63\u0e69\u0e72")
        buf.write("\u0e77\u0e7e\u0e84\u0e8b\u0e90\u0e99\u0e9c\u0ea0\u0ea4")
        buf.write("\u0ea8\u0eab\u0eae\u0eb1\u0eb5\u0eb9\u0ebc\u0ebf\u0ec2")
        buf.write("\u0ec9\u0ecd\u0edc\u0ee9\u0ef1\u0efb\u0eff\u0f02\u0f08")
        buf.write("\u0f0b\u0f0e\u0f17\u0f20\u0f2a\u0f2e\u0f38\u0f42\u0f4a")
        buf.write("\u0f4d\u0f56\u0f59\u0f5d\u0f62\u0f66\u0f6f\u0f72\u0f91")
        buf.write("\u0f94\u0f97\u0fcf\u0fd4\u0ff0\u0ffe\u1005\u1009\u100f")
        buf.write("\u1017\u1019\u1024\u102e\u1035\u103b\u1043\u1048\u1050")
        buf.write("\u1058\u1060\u1068\u106e\u1071\u1075\u107a\u107f\u1085")
        buf.write("\u1087\u1092\u1097\u109e\u10a0\u10ae\u10b4\u10b9\u10be")
        buf.write("\u10c4\u10cb\u10d3\u10db\u10e0\u10e6\u10e9\u10f1\u10f8")
        buf.write("\u1101\u1104\u1115\u111d\u1125\u1129\u1130\u1136\u113e")
        buf.write("\u1147\u114d\u1154\u115b\u1160\u1163\u1165\u116b\u116d")
        buf.write("\u1171\u1173\u1176\u117f\u1185\u118c\u1193\u1198\u119b")
        buf.write("\u119d\u11a3\u11a5\u11a9\u11ab\u11ae\u11b3\u11ba\u11c3")
        buf.write("\u11c8\u11d1\u11d8\u11dd\u11e0\u11e2\u11e8\u11ea\u11ed")
        buf.write("\u11f5\u11fb\u1200\u1204\u120a\u120c\u1218\u121e\u1227")
        buf.write("\u1230\u1235\u123e\u1244\u124f\u1258\u125e\u1263\u1267")
        buf.write("\u126a\u1276\u127d\u1282\u1291\u129c\u129f\u12a9\u12b3")
        buf.write("\u12bd\u12c7\u12cb\u12cf\u12d9\u12de\u1318\u132a\u1332")
        buf.write("\u133d\u1344\u1348\u134f\u1354\u1357\u135a\u1363\u1367")
        buf.write("\u1385\u138c\u1390\u1397\u139a\u13aa\u13ad\u13b7\u13bb")
        buf.write("\u13c1\u13c4\u13c9\u13cd\u13d4\u13d7\u13dd\u13f5\u1402")
        buf.write("\u1405\u140f\u1417\u141b\u1422\u1425\u142e\u1434\u143a")
        buf.write("\u1444\u1446\u144c\u144f\u1452\u145e\u1461\u1467\u146a")
        buf.write("\u1472\u147a\u1480\u1484\u1492\u149e\u14a5\u14a8\u14af")
        buf.write("\u14b6\u14bb\u14c0\u14cb\u14d6\u14dc\u14e1\u14ee\u14f0")
        buf.write("\u14f5\u14fa\u14fc\u1503\u150a\u150d\u1510\u1516\u151a")
        buf.write("\u1520\u1526\u1533\u1538\u1540\u1543\u1548\u154d\u1555")
        buf.write("\u1558\u1560\u1564\u1571\u1577\u1583\u1586\u158f\u1594")
        buf.write("\u159a\u15a1\u15a3\u15a8\u15aa\u15ae\u15b4\u15b7\u15c1")
        buf.write("\u15c5\u15d9\u15e0\u15e2\u15e9\u15eb\u15ef\u15f4\u1600")
        buf.write("\u1605\u160b\u160e\u1612\u1617\u161a\u161e\u1622\u1624")
        buf.write("\u1629\u162e\u163c\u163f\u1643\u1646\u1649\u164e\u1651")
        buf.write("\u1656\u165b\u165e\u1663\u1666\u166c\u166f\u1673\u1676")
        buf.write("\u1679\u167d\u1680\u1683\u1687\u168a\u168d\u1690\u1694")
        buf.write("\u1697\u169a\u169f\u16a4\u16a9\u16ac\u16b1\u16b4\u16b9")
        buf.write("\u16bc\u16c0\u16c4\u16cc\u16d3\u16d7\u16dc\u16df\u16e4")
        buf.write("\u16e8\u16ea\u16fa\u1703\u170b\u1714\u171e\u1726\u172e")
        buf.write("\u1736\u173e\u1743\u174b\u1750\u1755\u1758\u175d\u1760")
        buf.write("\u1764\u1772\u1779\u177e\u1783\u17a4\u17a8\u17b0\u17b4")
        buf.write("\u17bd\u17c5\u17ca\u17d2\u17d7\u17dc\u17de\u17e7\u17ec")
        buf.write("\u17f4\u17f9\u1801\u1809\u180c\u1816\u1828\u182e\u1832")
        buf.write("\u1838\u183c\u1840\u184d\u1855\u1859\u185e\u1867\u186a")
        buf.write("\u1876\u187e\u1888\u188b\u188f\u1893\u18ac\u18b7\u18be")
        buf.write("\u18c2\u18c9\u18d1\u18d6\u18de\u18e4\u18ee\u18fb\u1901")
        buf.write("\u1907\u1917\u191d\u1926\u1928\u193b\u1947\u1958\u1969")
        buf.write("\u196b\u197e\u1987\u1990\u1999")
        return buf.getvalue()


class MySqlParser ( Parser ):

    grammarFileName = "MySqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "'ADD'", "'ALL'", 
                     "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'AS'", 
                     "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", 
                     "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", 
                     "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
                     "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", 
                     "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", 
                     "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
                     "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", 
                     "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", 
                     "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", 
                     "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", 
                     "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
                     "'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", 
                     "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", "'IGNORE'", 
                     "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
                     "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", 
                     "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", 
                     "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
                     "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
                     "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                     "'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", 
                     "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", 
                     "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", 
                     "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
                     "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", 
                     "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
                     "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", 
                     "'RESTRICT'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", 
                     "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
                     "'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
                     "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
                     "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", 
                     "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
                     "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", 
                     "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
                     "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", 
                     "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
                     "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", 
                     "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
                     "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", 
                     "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", 
                     "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", 
                     "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
                     "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
                     "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", 
                     "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", 
                     "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
                     "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", 
                     "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
                     "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", 
                     "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", "'JSON_CONTAINS'", 
                     "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
                     "'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", 
                     "'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_INSERT'", 
                     "'JSON_MERGE'", "'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", 
                     "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", "'JSON_UNQUOTE'", 
                     "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
                     "'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
                     "'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", 
                     "'JSON_ARRAYAGG'", "'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", 
                     "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", 
                     "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
                     "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", 
                     "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
                     "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
                     "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", 
                     "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
                     "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
                     "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", 
                     "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
                     "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
                     "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", 
                     "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
                     "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
                     "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
                     "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
                     "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
                     "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
                     "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", 
                     "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", 
                     "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
                     "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
                     "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
                     "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
                     "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
                     "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", 
                     "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
                     "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
                     "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
                     "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", 
                     "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", 
                     "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
                     "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
                     "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'", 
                     "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", 
                     "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
                     "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", 
                     "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
                     "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
                     "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
                     "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
                     "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", 
                     "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
                     "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
                     "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
                     "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
                     "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", 
                     "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
                     "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
                     "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
                     "'NO'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", 
                     "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", 
                     "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
                     "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", 
                     "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
                     "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
                     "'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", 
                     "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
                     "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
                     "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
                     "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
                     "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
                     "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
                     "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
                     "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", 
                     "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", 
                     "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", 
                     "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", 
                     "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
                     "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
                     "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", 
                     "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
                     "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
                     "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
                     "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", 
                     "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
                     "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", 
                     "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
                     "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", 
                     "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", 
                     "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", 
                     "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", 
                     "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", 
                     "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
                     "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", "'WITHOUT'", 
                     "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'EUR'", 
                     "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
                     "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", 
                     "'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'", 
                     "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", 
                     "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
                     "'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", 
                     "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", 
                     "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", "'FIREWALL_USER'", 
                     "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
                     "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", 
                     "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", 
                     "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
                     "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
                     "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
                     "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", "<INVALID>", 
                     "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
                     "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", 
                     "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", "'BIG5'", 
                     "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
                     "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
                     "'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
                     "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", 
                     "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", 
                     "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", 
                     "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", 
                     "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
                     "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
                     "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
                     "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
                     "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", 
                     "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
                     "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
                     "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", 
                     "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", 
                     "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
                     "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", 
                     "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
                     "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
                     "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", 
                     "'CHARACTER_LENGTH'", "'CHARSET'", "'CHAR_LENGTH'", 
                     "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", 
                     "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
                     "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
                     "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", 
                     "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", "'DATE_FORMAT'", 
                     "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
                     "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", 
                     "'DIMENSION'", "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", 
                     "'ENDPOINT'", "'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", 
                     "'EXTERIORRING'", "'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", 
                     "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
                     "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
                     "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
                     "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
                     "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
                     "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", 
                     "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
                     "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
                     "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
                     "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", 
                     "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", 
                     "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
                     "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
                     "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
                     "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", 
                     "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
                     "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", 
                     "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
                     "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", 
                     "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
                     "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", 
                     "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
                     "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", 
                     "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", 
                     "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", 
                     "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
                     "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", 
                     "'POINTFROMTEXT'", "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", 
                     "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
                     "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
                     "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", 
                     "'ROW_COUNT'", "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", 
                     "'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", 
                     "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
                     "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", 
                     "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", 
                     "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
                     "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
                     "'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", 
                     "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
                     "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
                     "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
                     "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", 
                     "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", 
                     "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", 
                     "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
                     "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                     "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
                     "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
                     "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", 
                     "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", 
                     "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
                     "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", 
                     "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", 
                     "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", 
                     "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
                     "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", 
                     "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", 
                     "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", 
                     "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
                     "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                     "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", 
                     "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", 
                     "'/'", "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
                     "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", 
                     "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "QUESTION_", "PERCENT_S_", "ADD", 
                      "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", 
                      "ASC", "BEFORE", "BETWEEN", "BOTH", "BY", "CALL", 
                      "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
                      "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
                      "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
                      "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
                      "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", 
                      "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", 
                      "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", 
                      "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", 
                      "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", 
                      "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", 
                      "HAVING", "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", 
                      "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", 
                      "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
                      "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
                      "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
                      "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
                      "NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", 
                      "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", 
                      "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", 
                      "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
                      "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", 
                      "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", 
                      "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
                      "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
                      "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                      "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
                      "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", 
                      "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
                      "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", 
                      "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
                      "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", 
                      "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", 
                      "INT8", "INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", 
                      "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC", 
                      "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", 
                      "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
                      "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", 
                      "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", 
                      "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
                      "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
                      "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
                      "DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", 
                      "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", 
                      "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", "JSON_VALUE", 
                      "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
                      "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", 
                      "JSON_REMOVE", "JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", 
                      "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", 
                      "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
                      "JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", 
                      "JSON_ARRAYAGG", "JSON_OBJECTAGG", "AVG", "BIT_AND", 
                      "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", 
                      "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
                      "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
                      "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
                      "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", 
                      "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
                      "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
                      "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
                      "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", 
                      "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", 
                      "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
                      "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
                      "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
                      "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
                      "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECT", 
                      "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
                      "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", 
                      "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "CURSOR_NAME", 
                      "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
                      "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
                      "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
                      "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", 
                      "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
                      "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
                      "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", 
                      "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", 
                      "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
                      "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
                      "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
                      "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
                      "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", 
                      "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", 
                      "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", 
                      "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", 
                      "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
                      "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
                      "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
                      "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", 
                      "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
                      "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", 
                      "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
                      "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", 
                      "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
                      "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", 
                      "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", 
                      "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
                      "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "ODBC", 
                      "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", 
                      "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", 
                      "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", 
                      "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", 
                      "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
                      "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", 
                      "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", 
                      "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", 
                      "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", 
                      "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
                      "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
                      "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
                      "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", 
                      "RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", 
                      "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
                      "SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", 
                      "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", 
                      "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
                      "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", 
                      "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
                      "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
                      "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
                      "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
                      "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", 
                      "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", 
                      "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
                      "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
                      "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", 
                      "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
                      "VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", 
                      "VISIBLE", "WAIT", "WARNINGS", "WITHOUT", "WORK", 
                      "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", 
                      "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", 
                      "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", 
                      "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", 
                      "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
                      "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
                      "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
                      "FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", 
                      "FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES", 
                      "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
                      "INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
                      "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
                      "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", 
                      "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
                      "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", 
                      "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
                      "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", 
                      "CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", 
                      "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", 
                      "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
                      "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
                      "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
                      "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
                      "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", 
                      "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", 
                      "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
                      "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
                      "GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", 
                      "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                      "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                      "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
                      "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", 
                      "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
                      "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
                      "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
                      "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", 
                      "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", 
                      "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
                      "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                      "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
                      "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", 
                      "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", 
                      "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
                      "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", 
                      "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
                      "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
                      "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
                      "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                      "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                      "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", 
                      "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
                      "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", 
                      "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                      "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", 
                      "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
                      "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", 
                      "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
                      "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                      "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                      "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
                      "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", 
                      "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                      "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
                      "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
                      "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                      "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                      "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                      "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
                      "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", 
                      "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
                      "SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", 
                      "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
                      "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", 
                      "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
                      "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
                      "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", 
                      "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", 
                      "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
                      "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                      "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
                      "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
                      "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", 
                      "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
                      "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
                      "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
                      "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", 
                      "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
                      "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", 
                      "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
                      "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
                      "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", 
                      "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "TAN", 
                      "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", 
                      "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
                      "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
                      "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
                      "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
                      "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                      "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", 
                      "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
                      "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
                      "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
                      "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", 
                      "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
                      "IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", 
                      "ADMIN", "NULL", "OPTIONAL" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_transactionStatement = 6
    RULE_replicationStatement = 7
    RULE_preparedStatement = 8
    RULE_compoundStatement = 9
    RULE_administrationStatement = 10
    RULE_utilityStatement = 11
    RULE_createDatabase = 12
    RULE_createEvent = 13
    RULE_createIndex = 14
    RULE_createLogfileGroup = 15
    RULE_createProcedure = 16
    RULE_createFunction = 17
    RULE_createServer = 18
    RULE_createTable = 19
    RULE_createTablespaceInnodb = 20
    RULE_createTablespaceNdb = 21
    RULE_createTrigger = 22
    RULE_createView = 23
    RULE_createDatabaseOption = 24
    RULE_ownerStatement = 25
    RULE_scheduleExpression = 26
    RULE_timestampValue = 27
    RULE_intervalExpr = 28
    RULE_intervalType = 29
    RULE_enableType = 30
    RULE_indexType = 31
    RULE_indexOption = 32
    RULE_procedureParameter = 33
    RULE_functionParameter = 34
    RULE_routineOption = 35
    RULE_serverOption = 36
    RULE_createDefinitions = 37
    RULE_createDefinition = 38
    RULE_columnDefinition = 39
    RULE_columnConstraint = 40
    RULE_tableConstraint = 41
    RULE_referenceDefinition = 42
    RULE_referenceAction = 43
    RULE_referenceControlType = 44
    RULE_indexColumnDefinition = 45
    RULE_tableOption = 46
    RULE_tableType = 47
    RULE_tablespaceStorage = 48
    RULE_partitionDefinitions = 49
    RULE_partitionFunctionDefinition = 50
    RULE_subpartitionFunctionDefinition = 51
    RULE_partitionDefinition = 52
    RULE_partitionDefinerAtom = 53
    RULE_partitionDefinerVector = 54
    RULE_subpartitionDefinition = 55
    RULE_partitionOption = 56
    RULE_alterDatabase = 57
    RULE_alterEvent = 58
    RULE_alterFunction = 59
    RULE_alterInstance = 60
    RULE_alterLogfileGroup = 61
    RULE_alterProcedure = 62
    RULE_alterServer = 63
    RULE_alterTable = 64
    RULE_alterTablespace = 65
    RULE_alterView = 66
    RULE_alterSpecification = 67
    RULE_dropDatabase = 68
    RULE_dropEvent = 69
    RULE_dropIndex = 70
    RULE_dropLogfileGroup = 71
    RULE_dropProcedure = 72
    RULE_dropFunction = 73
    RULE_dropServer = 74
    RULE_dropTable = 75
    RULE_dropTablespace = 76
    RULE_dropTrigger = 77
    RULE_dropView = 78
    RULE_renameTable = 79
    RULE_renameTableClause = 80
    RULE_truncateTable = 81
    RULE_callStatement = 82
    RULE_deleteStatement = 83
    RULE_doStatement = 84
    RULE_handlerStatement = 85
    RULE_insertStatement = 86
    RULE_loadDataStatement = 87
    RULE_loadXmlStatement = 88
    RULE_replaceStatement = 89
    RULE_selectStatement = 90
    RULE_updateStatement = 91
    RULE_insertStatementValue = 92
    RULE_updatedElement = 93
    RULE_assignmentField = 94
    RULE_lockClause = 95
    RULE_singleDeleteStatement = 96
    RULE_multipleDeleteStatement = 97
    RULE_handlerOpenStatement = 98
    RULE_handlerReadIndexStatement = 99
    RULE_handlerReadStatement = 100
    RULE_handlerCloseStatement = 101
    RULE_singleUpdateStatement = 102
    RULE_multipleUpdateStatement = 103
    RULE_orderByClause = 104
    RULE_orderByExpression = 105
    RULE_tableSources = 106
    RULE_tableSource = 107
    RULE_tableSourceItem = 108
    RULE_indexHint = 109
    RULE_indexHintType = 110
    RULE_joinPart = 111
    RULE_queryExpression = 112
    RULE_queryExpressionNointo = 113
    RULE_querySpecification = 114
    RULE_querySpecificationNointo = 115
    RULE_unionParenthesis = 116
    RULE_unionStatement = 117
    RULE_selectSpec = 118
    RULE_selectElements = 119
    RULE_selectElement = 120
    RULE_selectIntoExpression = 121
    RULE_selectFieldsInto = 122
    RULE_selectLinesInto = 123
    RULE_fromClause = 124
    RULE_groupByClause = 125
    RULE_havingClause = 126
    RULE_groupByItem = 127
    RULE_limitClause = 128
    RULE_limitClauseAtom = 129
    RULE_startTransaction = 130
    RULE_beginWork = 131
    RULE_commitWork = 132
    RULE_rollbackWork = 133
    RULE_savepointStatement = 134
    RULE_rollbackStatement = 135
    RULE_releaseStatement = 136
    RULE_lockTables = 137
    RULE_unlockTables = 138
    RULE_setAutocommitStatement = 139
    RULE_setTransactionStatement = 140
    RULE_transactionMode = 141
    RULE_lockTableElement = 142
    RULE_lockAction = 143
    RULE_transactionOption = 144
    RULE_transactionLevel = 145
    RULE_changeMaster = 146
    RULE_changeReplicationFilter = 147
    RULE_purgeBinaryLogs = 148
    RULE_resetMaster = 149
    RULE_resetSlave = 150
    RULE_startSlave = 151
    RULE_stopSlave = 152
    RULE_startGroupReplication = 153
    RULE_stopGroupReplication = 154
    RULE_masterOption = 155
    RULE_stringMasterOption = 156
    RULE_decimalMasterOption = 157
    RULE_boolMasterOption = 158
    RULE_channelOption = 159
    RULE_replicationFilter = 160
    RULE_tablePair = 161
    RULE_threadType = 162
    RULE_untilOption = 163
    RULE_connectionOption = 164
    RULE_gtuidSet = 165
    RULE_xaStartTransaction = 166
    RULE_xaEndTransaction = 167
    RULE_xaPrepareStatement = 168
    RULE_xaCommitWork = 169
    RULE_xaRollbackWork = 170
    RULE_xaRecoverWork = 171
    RULE_prepareStatement = 172
    RULE_executeStatement = 173
    RULE_deallocatePrepare = 174
    RULE_routineBody = 175
    RULE_blockStatement = 176
    RULE_caseStatement = 177
    RULE_ifStatement = 178
    RULE_iterateStatement = 179
    RULE_leaveStatement = 180
    RULE_loopStatement = 181
    RULE_repeatStatement = 182
    RULE_returnStatement = 183
    RULE_whileStatement = 184
    RULE_cursorStatement = 185
    RULE_declareVariable = 186
    RULE_declareCondition = 187
    RULE_declareCursor = 188
    RULE_declareHandler = 189
    RULE_handlerConditionValue = 190
    RULE_procedureSqlStatement = 191
    RULE_caseAlternative = 192
    RULE_elifAlternative = 193
    RULE_alterUser = 194
    RULE_createUser = 195
    RULE_dropUser = 196
    RULE_grantStatement = 197
    RULE_grantProxy = 198
    RULE_renameUser = 199
    RULE_revokeStatement = 200
    RULE_revokeProxy = 201
    RULE_setPasswordStatement = 202
    RULE_userSpecification = 203
    RULE_userAuthOption = 204
    RULE_tlsOption = 205
    RULE_userResourceOption = 206
    RULE_userPasswordOption = 207
    RULE_userLockOption = 208
    RULE_privelegeClause = 209
    RULE_privilege = 210
    RULE_privilegeLevel = 211
    RULE_renameUserClause = 212
    RULE_analyzeTable = 213
    RULE_checkTable = 214
    RULE_checksumTable = 215
    RULE_optimizeTable = 216
    RULE_repairTable = 217
    RULE_checkTableOption = 218
    RULE_createUdfunction = 219
    RULE_installPlugin = 220
    RULE_uninstallPlugin = 221
    RULE_setStatement = 222
    RULE_showStatement = 223
    RULE_variableClause = 224
    RULE_showCommonEntity = 225
    RULE_showFilter = 226
    RULE_showGlobalInfoClause = 227
    RULE_showSchemaEntity = 228
    RULE_showProfileType = 229
    RULE_binlogStatement = 230
    RULE_cacheIndexStatement = 231
    RULE_flushStatement = 232
    RULE_killStatement = 233
    RULE_loadIndexIntoCache = 234
    RULE_resetStatement = 235
    RULE_shutdownStatement = 236
    RULE_tableIndexes = 237
    RULE_flushOption = 238
    RULE_flushTableOption = 239
    RULE_loadedTableIndexes = 240
    RULE_simpleDescribeStatement = 241
    RULE_fullDescribeStatement = 242
    RULE_helpStatement = 243
    RULE_useStatement = 244
    RULE_signalStatement = 245
    RULE_resignalStatement = 246
    RULE_signalConditionInformation = 247
    RULE_diagnosticsStatement = 248
    RULE_diagnosticsConditionInformationName = 249
    RULE_describeObjectClause = 250
    RULE_fullId = 251
    RULE_tableName = 252
    RULE_fullColumnName = 253
    RULE_indexColumnName = 254
    RULE_userName = 255
    RULE_mysqlVariable = 256
    RULE_charsetName = 257
    RULE_collationName = 258
    RULE_engineName = 259
    RULE_uuidSet = 260
    RULE_xid = 261
    RULE_xuidStringId = 262
    RULE_authPlugin = 263
    RULE_uid = 264
    RULE_simpleId = 265
    RULE_dottedId = 266
    RULE_decimalLiteral = 267
    RULE_fileSizeLiteral = 268
    RULE_stringLiteral = 269
    RULE_booleanLiteral = 270
    RULE_hexadecimalLiteral = 271
    RULE_nullNotnull = 272
    RULE_constant = 273
    RULE_dataType = 274
    RULE_collectionOptions = 275
    RULE_convertedDataType = 276
    RULE_lengthOneDimension = 277
    RULE_lengthTwoDimension = 278
    RULE_lengthTwoOptionalDimension = 279
    RULE_uidList = 280
    RULE_tables = 281
    RULE_indexColumnNames = 282
    RULE_expressions = 283
    RULE_expressionsWithDefaults = 284
    RULE_constants = 285
    RULE_simpleStrings = 286
    RULE_userVariables = 287
    RULE_defaultValue = 288
    RULE_currentTimestamp = 289
    RULE_expressionOrDefault = 290
    RULE_ifExists = 291
    RULE_ifNotExists = 292
    RULE_functionCall = 293
    RULE_specificFunction = 294
    RULE_caseFuncAlternative = 295
    RULE_levelsInWeightString = 296
    RULE_levelInWeightListElement = 297
    RULE_aggregateWindowedFunction = 298
    RULE_scalarFunctionName = 299
    RULE_passwordFunctionClause = 300
    RULE_functionArgs = 301
    RULE_functionArg = 302
    RULE_expression = 303
    RULE_predicate = 304
    RULE_expressionAtom = 305
    RULE_unaryOperator = 306
    RULE_comparisonOperator = 307
    RULE_logicalOperator = 308
    RULE_bitOperator = 309
    RULE_mathOperator = 310
    RULE_jsonOperator = 311
    RULE_charsetNameBase = 312
    RULE_transactionLevelBase = 313
    RULE_privilegesBase = 314
    RULE_intervalTypeBase = 315
    RULE_dataTypeBase = 316
    RULE_keywordsCanBeId = 317
    RULE_functionNameBase = 318
    RULE_parameterMarker = 319

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                   "ddlStatement", "dmlStatement", "transactionStatement", 
                   "replicationStatement", "preparedStatement", "compoundStatement", 
                   "administrationStatement", "utilityStatement", "createDatabase", 
                   "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
                   "createFunction", "createServer", "createTable", "createTablespaceInnodb", 
                   "createTablespaceNdb", "createTrigger", "createView", 
                   "createDatabaseOption", "ownerStatement", "scheduleExpression", 
                   "timestampValue", "intervalExpr", "intervalType", "enableType", 
                   "indexType", "indexOption", "procedureParameter", "functionParameter", 
                   "routineOption", "serverOption", "createDefinitions", 
                   "createDefinition", "columnDefinition", "columnConstraint", 
                   "tableConstraint", "referenceDefinition", "referenceAction", 
                   "referenceControlType", "indexColumnDefinition", "tableOption", 
                   "tableType", "tablespaceStorage", "partitionDefinitions", 
                   "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
                   "partitionDefinition", "partitionDefinerAtom", "partitionDefinerVector", 
                   "subpartitionDefinition", "partitionOption", "alterDatabase", 
                   "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
                   "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
                   "alterView", "alterSpecification", "dropDatabase", "dropEvent", 
                   "dropIndex", "dropLogfileGroup", "dropProcedure", "dropFunction", 
                   "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
                   "dropView", "renameTable", "renameTableClause", "truncateTable", 
                   "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
                   "insertStatement", "loadDataStatement", "loadXmlStatement", 
                   "replaceStatement", "selectStatement", "updateStatement", 
                   "insertStatementValue", "updatedElement", "assignmentField", 
                   "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
                   "handlerOpenStatement", "handlerReadIndexStatement", 
                   "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
                   "multipleUpdateStatement", "orderByClause", "orderByExpression", 
                   "tableSources", "tableSource", "tableSourceItem", "indexHint", 
                   "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
                   "querySpecification", "querySpecificationNointo", "unionParenthesis", 
                   "unionStatement", "selectSpec", "selectElements", "selectElement", 
                   "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
                   "fromClause", "groupByClause", "havingClause", "groupByItem", 
                   "limitClause", "limitClauseAtom", "startTransaction", 
                   "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
                   "rollbackStatement", "releaseStatement", "lockTables", 
                   "unlockTables", "setAutocommitStatement", "setTransactionStatement", 
                   "transactionMode", "lockTableElement", "lockAction", 
                   "transactionOption", "transactionLevel", "changeMaster", 
                   "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
                   "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
                   "stopGroupReplication", "masterOption", "stringMasterOption", 
                   "decimalMasterOption", "boolMasterOption", "channelOption", 
                   "replicationFilter", "tablePair", "threadType", "untilOption", 
                   "connectionOption", "gtuidSet", "xaStartTransaction", 
                   "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
                   "xaRollbackWork", "xaRecoverWork", "prepareStatement", 
                   "executeStatement", "deallocatePrepare", "routineBody", 
                   "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
                   "leaveStatement", "loopStatement", "repeatStatement", 
                   "returnStatement", "whileStatement", "cursorStatement", 
                   "declareVariable", "declareCondition", "declareCursor", 
                   "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
                   "caseAlternative", "elifAlternative", "alterUser", "createUser", 
                   "dropUser", "grantStatement", "grantProxy", "renameUser", 
                   "revokeStatement", "revokeProxy", "setPasswordStatement", 
                   "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
                   "userPasswordOption", "userLockOption", "privelegeClause", 
                   "privilege", "privilegeLevel", "renameUserClause", "analyzeTable", 
                   "checkTable", "checksumTable", "optimizeTable", "repairTable", 
                   "checkTableOption", "createUdfunction", "installPlugin", 
                   "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
                   "showCommonEntity", "showFilter", "showGlobalInfoClause", 
                   "showSchemaEntity", "showProfileType", "binlogStatement", 
                   "cacheIndexStatement", "flushStatement", "killStatement", 
                   "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
                   "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
                   "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", 
                   "useStatement", "signalStatement", "resignalStatement", 
                   "signalConditionInformation", "diagnosticsStatement", 
                   "diagnosticsConditionInformationName", "describeObjectClause", 
                   "fullId", "tableName", "fullColumnName", "indexColumnName", 
                   "userName", "mysqlVariable", "charsetName", "collationName", 
                   "engineName", "uuidSet", "xid", "xuidStringId", "authPlugin", 
                   "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
                   "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
                   "nullNotnull", "constant", "dataType", "collectionOptions", 
                   "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
                   "lengthTwoOptionalDimension", "uidList", "tables", "indexColumnNames", 
                   "expressions", "expressionsWithDefaults", "constants", 
                   "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
                   "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", 
                   "specificFunction", "caseFuncAlternative", "levelsInWeightString", 
                   "levelInWeightListElement", "aggregateWindowedFunction", 
                   "scalarFunctionName", "passwordFunctionClause", "functionArgs", 
                   "functionArg", "expression", "predicate", "expressionAtom", 
                   "unaryOperator", "comparisonOperator", "logicalOperator", 
                   "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
                   "transactionLevelBase", "privilegesBase", "intervalTypeBase", 
                   "dataTypeBase", "keywordsCanBeId", "functionNameBase", 
                   "parameterMarker" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_MYSQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    QUESTION_=5
    PERCENT_S_=6
    ADD=7
    ALL=8
    ALTER=9
    ALWAYS=10
    ANALYZE=11
    AND=12
    AS=13
    ASC=14
    BEFORE=15
    BETWEEN=16
    BOTH=17
    BY=18
    CALL=19
    CASCADE=20
    CASE=21
    CAST=22
    CHANGE=23
    CHARACTER=24
    CHECK=25
    COLLATE=26
    COLUMN=27
    CONDITION=28
    CONSTRAINT=29
    CONTINUE=30
    CONVERT=31
    CREATE=32
    CROSS=33
    CURRENT=34
    CURRENT_USER=35
    CURSOR=36
    DATABASE=37
    DATABASES=38
    DECLARE=39
    DEFAULT=40
    DELAYED=41
    DELETE=42
    DESC=43
    DESCRIBE=44
    DETERMINISTIC=45
    DIAGNOSTICS=46
    DISTINCT=47
    DISTINCTROW=48
    DROP=49
    EACH=50
    ELSE=51
    ELSEIF=52
    EMPTY=53
    ENCLOSED=54
    ESCAPED=55
    EXISTS=56
    EXIT=57
    EXPLAIN=58
    FALSE=59
    FETCH=60
    FOR=61
    FORCE=62
    FOREIGN=63
    FROM=64
    FULLTEXT=65
    GENERATED=66
    GET=67
    GRANT=68
    GROUP=69
    HAVING=70
    HIGH_PRIORITY=71
    IF=72
    IGNORE=73
    IN=74
    INDEX=75
    INFILE=76
    INNER=77
    INOUT=78
    INSERT=79
    INTERVAL=80
    INTO=81
    IS=82
    ITERATE=83
    JOIN=84
    KEY=85
    KEYS=86
    KILL=87
    LEADING=88
    LEAVE=89
    LEFT=90
    LIKE=91
    LIMIT=92
    LINEAR=93
    LINES=94
    LOAD=95
    LOCK=96
    LOOP=97
    LOW_PRIORITY=98
    MASTER_BIND=99
    MASTER_SSL_VERIFY_SERVER_CERT=100
    MATCH=101
    MAXVALUE=102
    MODIFIES=103
    NATURAL=104
    NOT=105
    NO_WRITE_TO_BINLOG=106
    NULL_LITERAL=107
    NUMBER=108
    ON=109
    OPTIMIZE=110
    OPTION=111
    OPTIONALLY=112
    OR=113
    ORDER=114
    OUT=115
    OUTER=116
    OUTFILE=117
    PARTITION=118
    PRIMARY=119
    PROCEDURE=120
    PURGE=121
    RANGE=122
    READ=123
    READS=124
    REFERENCES=125
    REGEXP=126
    RELEASE=127
    RENAME=128
    REPEAT=129
    REPLACE=130
    REQUIRE=131
    RESIGNAL=132
    RESTRICT=133
    RETURN=134
    REVOKE=135
    RIGHT=136
    RLIKE=137
    SCHEMA=138
    SCHEMAS=139
    SELECT=140
    SET=141
    SEPARATOR=142
    SHOW=143
    SIGNAL=144
    SPATIAL=145
    SQL=146
    SQLEXCEPTION=147
    SQLSTATE=148
    SQLWARNING=149
    SQL_BIG_RESULT=150
    SQL_CALC_FOUND_ROWS=151
    SQL_SMALL_RESULT=152
    SSL=153
    STACKED=154
    STARTING=155
    STRAIGHT_JOIN=156
    TABLE=157
    TERMINATED=158
    THEN=159
    TO=160
    TRAILING=161
    TRIGGER=162
    TRUE=163
    UNDO=164
    UNION=165
    UNIQUE=166
    UNLOCK=167
    UNSIGNED=168
    UPDATE=169
    USAGE=170
    USE=171
    USING=172
    VALUES=173
    WHEN=174
    WHERE=175
    WHILE=176
    WITH=177
    WRITE=178
    XOR=179
    ZEROFILL=180
    TINYINT=181
    SMALLINT=182
    MEDIUMINT=183
    MIDDLEINT=184
    INT=185
    INT1=186
    INT2=187
    INT3=188
    INT4=189
    INT8=190
    INTEGER=191
    BIGINT=192
    REAL=193
    DOUBLE=194
    PRECISION=195
    FLOAT=196
    FLOAT4=197
    FLOAT8=198
    DECIMAL=199
    DEC=200
    NUMERIC=201
    DATE=202
    TIME=203
    TIMESTAMP=204
    DATETIME=205
    YEAR=206
    CHAR=207
    VARCHAR=208
    NVARCHAR=209
    NATIONAL=210
    BINARY=211
    VARBINARY=212
    TINYBLOB=213
    BLOB=214
    MEDIUMBLOB=215
    LONG=216
    LONGBLOB=217
    TINYTEXT=218
    TEXT=219
    MEDIUMTEXT=220
    LONGTEXT=221
    ENUM=222
    VARYING=223
    SERIAL=224
    YEAR_MONTH=225
    DAY_HOUR=226
    DAY_MINUTE=227
    DAY_SECOND=228
    HOUR_MINUTE=229
    HOUR_SECOND=230
    MINUTE_SECOND=231
    SECOND_MICROSECOND=232
    MINUTE_MICROSECOND=233
    HOUR_MICROSECOND=234
    DAY_MICROSECOND=235
    JSON_ARRAY=236
    JSON_OBJECT=237
    JSON_QUOTE=238
    JSON_CONTAINS=239
    JSON_CONTAINS_PATH=240
    JSON_EXTRACT=241
    JSON_KEYS=242
    JSON_OVERLAPS=243
    JSON_SEARCH=244
    JSON_VALUE=245
    JSON_ARRAY_APPEND=246
    JSON_ARRAY_INSERT=247
    JSON_INSERT=248
    JSON_MERGE=249
    JSON_MERGE_PATCH=250
    JSON_MERGE_PRESERVE=251
    JSON_REMOVE=252
    JSON_REPLACE=253
    JSON_SET=254
    JSON_UNQUOTE=255
    JSON_DEPTH=256
    JSON_LENGTH=257
    JSON_TYPE=258
    JSON_VALID=259
    JSON_TABLE=260
    JSON_SCHEMA_VALID=261
    JSON_SCHEMA_VALIDATION_REPORT=262
    JSON_PRETTY=263
    JSON_STORAGE_FREE=264
    JSON_STORAGE_SIZE=265
    JSON_ARRAYAGG=266
    JSON_OBJECTAGG=267
    AVG=268
    BIT_AND=269
    BIT_OR=270
    BIT_XOR=271
    COUNT=272
    GROUP_CONCAT=273
    MAX=274
    MIN=275
    STD=276
    STDDEV=277
    STDDEV_POP=278
    STDDEV_SAMP=279
    SUM=280
    VAR_POP=281
    VAR_SAMP=282
    VARIANCE=283
    CURRENT_DATE=284
    CURRENT_TIME=285
    CURRENT_TIMESTAMP=286
    LOCALTIME=287
    CURDATE=288
    CURTIME=289
    DATE_ADD=290
    DATE_SUB=291
    EXTRACT=292
    LOCALTIMESTAMP=293
    NOW=294
    POSITION=295
    SUBSTR=296
    SUBSTRING=297
    SYSDATE=298
    TRIM=299
    UTC_DATE=300
    UTC_TIME=301
    UTC_TIMESTAMP=302
    ACCOUNT=303
    ACTION=304
    AFTER=305
    AGGREGATE=306
    ALGORITHM=307
    ANY=308
    AT=309
    AUTHORS=310
    AUTOCOMMIT=311
    AUTOEXTEND_SIZE=312
    AUTO_INCREMENT=313
    AVG_ROW_LENGTH=314
    BEGIN=315
    BINLOG=316
    BIT=317
    BLOCK=318
    BOOL=319
    BOOLEAN=320
    BTREE=321
    CACHE=322
    CASCADED=323
    CHAIN=324
    CHANGED=325
    CHANNEL=326
    CHECKSUM=327
    PAGE_CHECKSUM=328
    CIPHER=329
    CLASS_ORIGIN=330
    CLIENT=331
    CLOSE=332
    COALESCE=333
    CODE=334
    COLUMNS=335
    COLUMN_FORMAT=336
    COLUMN_NAME=337
    COMMENT=338
    COMMIT=339
    COMPACT=340
    COMPLETION=341
    COMPRESSED=342
    COMPRESSION=343
    CONCURRENT=344
    CONNECT=345
    CONNECTION=346
    CONSISTENT=347
    CONSTRAINT_CATALOG=348
    CONSTRAINT_SCHEMA=349
    CONSTRAINT_NAME=350
    CONTAINS=351
    CONTEXT=352
    CONTRIBUTORS=353
    COPY=354
    CPU=355
    CURSOR_NAME=356
    DATA=357
    DATAFILE=358
    DEALLOCATE=359
    DEFAULT_AUTH=360
    DEFINER=361
    DELAY_KEY_WRITE=362
    DES_KEY_FILE=363
    DIRECTORY=364
    DISABLE=365
    DISCARD=366
    DISK=367
    DO=368
    DUMPFILE=369
    DUPLICATE=370
    DYNAMIC=371
    ENABLE=372
    ENCRYPTION=373
    END=374
    ENDS=375
    ENGINE=376
    ENGINES=377
    ERROR=378
    ERRORS=379
    ESCAPE=380
    EVEN=381
    EVENT=382
    EVENTS=383
    EVERY=384
    EXCHANGE=385
    EXCLUSIVE=386
    EXPIRE=387
    EXPORT=388
    EXTENDED=389
    EXTENT_SIZE=390
    FAST=391
    FAULTS=392
    FIELDS=393
    FILE_BLOCK_SIZE=394
    FILTER=395
    FIRST=396
    FIXED=397
    FLUSH=398
    FOLLOWS=399
    FOUND=400
    FULL=401
    FUNCTION=402
    GENERAL=403
    GLOBAL=404
    GRANTS=405
    GROUP_REPLICATION=406
    HANDLER=407
    HASH=408
    HELP=409
    HOST=410
    HOSTS=411
    IDENTIFIED=412
    IGNORE_SERVER_IDS=413
    IMPORT=414
    INDEXES=415
    INITIAL_SIZE=416
    INPLACE=417
    INSERT_METHOD=418
    INSTALL=419
    INSTANCE=420
    INVISIBLE=421
    INVOKER=422
    IO=423
    IO_THREAD=424
    IPC=425
    ISOLATION=426
    ISSUER=427
    JSON=428
    KEY_BLOCK_SIZE=429
    LANGUAGE=430
    LAST=431
    LEAVES=432
    LESS=433
    LEVEL=434
    LIST=435
    LOCAL=436
    LOGFILE=437
    LOGS=438
    MASTER=439
    MASTER_AUTO_POSITION=440
    MASTER_CONNECT_RETRY=441
    MASTER_DELAY=442
    MASTER_HEARTBEAT_PERIOD=443
    MASTER_HOST=444
    MASTER_LOG_FILE=445
    MASTER_LOG_POS=446
    MASTER_PASSWORD=447
    MASTER_PORT=448
    MASTER_RETRY_COUNT=449
    MASTER_SSL=450
    MASTER_SSL_CA=451
    MASTER_SSL_CAPATH=452
    MASTER_SSL_CERT=453
    MASTER_SSL_CIPHER=454
    MASTER_SSL_CRL=455
    MASTER_SSL_CRLPATH=456
    MASTER_SSL_KEY=457
    MASTER_TLS_VERSION=458
    MASTER_USER=459
    MAX_CONNECTIONS_PER_HOUR=460
    MAX_QUERIES_PER_HOUR=461
    MAX_ROWS=462
    MAX_SIZE=463
    MAX_UPDATES_PER_HOUR=464
    MAX_USER_CONNECTIONS=465
    MEDIUM=466
    MEMBER=467
    MERGE=468
    MESSAGE_TEXT=469
    MID=470
    MIGRATE=471
    MIN_ROWS=472
    MODE=473
    MODIFY=474
    MUTEX=475
    MYSQL=476
    MYSQL_ERRNO=477
    NAME=478
    NAMES=479
    NCHAR=480
    NEVER=481
    NEXT=482
    NO=483
    NODEGROUP=484
    NONE=485
    ODBC=486
    OFFLINE=487
    OFFSET=488
    OF=489
    OJ=490
    OLD_PASSWORD=491
    ONE=492
    ONLINE=493
    ONLY=494
    OPEN=495
    OPTIMIZER_COSTS=496
    OPTIONS=497
    OWNER=498
    PACK_KEYS=499
    PAGE=500
    PARSER=501
    PARTIAL=502
    PARTITIONING=503
    PARTITIONS=504
    PASSWORD=505
    PHASE=506
    PLUGIN=507
    PLUGIN_DIR=508
    PLUGINS=509
    PORT=510
    PRECEDES=511
    PREPARE=512
    PRESERVE=513
    PREV=514
    PROCESSLIST=515
    PROFILE=516
    PROFILES=517
    PROXY=518
    QUERY=519
    QUICK=520
    REBUILD=521
    RECOVER=522
    REDO_BUFFER_SIZE=523
    REDUNDANT=524
    RELAY=525
    RELAY_LOG_FILE=526
    RELAY_LOG_POS=527
    RELAYLOG=528
    REMOVE=529
    REORGANIZE=530
    REPAIR=531
    REPLICATE_DO_DB=532
    REPLICATE_DO_TABLE=533
    REPLICATE_IGNORE_DB=534
    REPLICATE_IGNORE_TABLE=535
    REPLICATE_REWRITE_DB=536
    REPLICATE_WILD_DO_TABLE=537
    REPLICATE_WILD_IGNORE_TABLE=538
    REPLICATION=539
    RESET=540
    RESUME=541
    RETURNED_SQLSTATE=542
    RETURNING=543
    RETURNS=544
    ROLE=545
    ROLLBACK=546
    ROLLUP=547
    ROTATE=548
    ROW=549
    ROWS=550
    ROW_FORMAT=551
    SAVEPOINT=552
    SCHEDULE=553
    SECURITY=554
    SERVER=555
    SESSION=556
    SHARE=557
    SHARED=558
    SIGNED=559
    SIMPLE=560
    SLAVE=561
    SLOW=562
    SNAPSHOT=563
    SOCKET=564
    SOME=565
    SONAME=566
    SOUNDS=567
    SOURCE=568
    SQL_AFTER_GTIDS=569
    SQL_AFTER_MTS_GAPS=570
    SQL_BEFORE_GTIDS=571
    SQL_BUFFER_RESULT=572
    SQL_CACHE=573
    SQL_NO_CACHE=574
    SQL_THREAD=575
    START=576
    STARTS=577
    STATS_AUTO_RECALC=578
    STATS_PERSISTENT=579
    STATS_SAMPLE_PAGES=580
    STATUS=581
    STOP=582
    STORAGE=583
    STORED=584
    STRING=585
    SUBCLASS_ORIGIN=586
    SUBJECT=587
    SUBPARTITION=588
    SUBPARTITIONS=589
    SUSPEND=590
    SWAPS=591
    SWITCHES=592
    TABLE_NAME=593
    TABLESPACE=594
    TABLE_TYPE=595
    TEMPORARY=596
    TEMPTABLE=597
    THAN=598
    TRADITIONAL=599
    TRANSACTION=600
    TRANSACTIONAL=601
    TRIGGERS=602
    TRUNCATE=603
    UNDEFINED=604
    UNDOFILE=605
    UNDO_BUFFER_SIZE=606
    UNINSTALL=607
    UNKNOWN=608
    UNTIL=609
    UPGRADE=610
    USER=611
    USE_FRM=612
    USER_RESOURCES=613
    VALIDATION=614
    VALUE=615
    VARIABLES=616
    VIEW=617
    VIRTUAL=618
    VISIBLE=619
    WAIT=620
    WARNINGS=621
    WITHOUT=622
    WORK=623
    WRAPPER=624
    X509=625
    XA=626
    XML=627
    EUR=628
    USA=629
    JIS=630
    ISO=631
    INTERNAL=632
    QUARTER=633
    MONTH=634
    DAY=635
    HOUR=636
    MINUTE=637
    WEEK=638
    SECOND=639
    MICROSECOND=640
    TABLES=641
    ROUTINE=642
    EXECUTE=643
    FILE=644
    PROCESS=645
    RELOAD=646
    SHUTDOWN=647
    SUPER=648
    PRIVILEGES=649
    APPLICATION_PASSWORD_ADMIN=650
    AUDIT_ADMIN=651
    BACKUP_ADMIN=652
    BINLOG_ADMIN=653
    BINLOG_ENCRYPTION_ADMIN=654
    CLONE_ADMIN=655
    CONNECTION_ADMIN=656
    ENCRYPTION_KEY_ADMIN=657
    FIREWALL_ADMIN=658
    FIREWALL_USER=659
    FLUSH_OPTIMIZER_COSTS=660
    FLUSH_STATUS=661
    FLUSH_TABLES=662
    FLUSH_USER_RESOURCES=663
    GROUP_REPLICATION_ADMIN=664
    INNODB_REDO_LOG_ARCHIVE=665
    INNODB_REDO_LOG_ENABLE=666
    NDB_STORED_USER=667
    PERSIST_RO_VARIABLES_ADMIN=668
    REPLICATION_APPLIER=669
    REPLICATION_SLAVE_ADMIN=670
    RESOURCE_GROUP_ADMIN=671
    RESOURCE_GROUP_USER=672
    ROLE_ADMIN=673
    SERVICE_CONNECTION_ADMIN=674
    SESSION_VARIABLES_ADMIN=675
    SET_USER_ID=676
    SHOW_ROUTINE=677
    SYSTEM_VARIABLES_ADMIN=678
    TABLE_ENCRYPTION_ADMIN=679
    VERSION_TOKEN_ADMIN=680
    XA_RECOVER_ADMIN=681
    ARMSCII8=682
    ASCII=683
    BIG5=684
    CP1250=685
    CP1251=686
    CP1256=687
    CP1257=688
    CP850=689
    CP852=690
    CP866=691
    CP932=692
    DEC8=693
    EUCJPMS=694
    EUCKR=695
    GB2312=696
    GBK=697
    GEOSTD8=698
    GREEK=699
    HEBREW=700
    HP8=701
    KEYBCS2=702
    KOI8R=703
    KOI8U=704
    LATIN1=705
    LATIN2=706
    LATIN5=707
    LATIN7=708
    MACCE=709
    MACROMAN=710
    SJIS=711
    SWE7=712
    TIS620=713
    UCS2=714
    UJIS=715
    UTF16=716
    UTF16LE=717
    UTF32=718
    UTF8=719
    UTF8MB3=720
    UTF8MB4=721
    ARCHIVE=722
    BLACKHOLE=723
    CSV=724
    FEDERATED=725
    INNODB=726
    MEMORY=727
    MRG_MYISAM=728
    MYISAM=729
    NDB=730
    NDBCLUSTER=731
    PERFORMANCE_SCHEMA=732
    TOKUDB=733
    REPEATABLE=734
    COMMITTED=735
    UNCOMMITTED=736
    SERIALIZABLE=737
    GEOMETRYCOLLECTION=738
    GEOMCOLLECTION=739
    GEOMETRY=740
    LINESTRING=741
    MULTILINESTRING=742
    MULTIPOINT=743
    MULTIPOLYGON=744
    POINT=745
    POLYGON=746
    ABS=747
    ACOS=748
    ADDDATE=749
    ADDTIME=750
    AES_DECRYPT=751
    AES_ENCRYPT=752
    AREA=753
    ASBINARY=754
    ASIN=755
    ASTEXT=756
    ASWKB=757
    ASWKT=758
    ASYMMETRIC_DECRYPT=759
    ASYMMETRIC_DERIVE=760
    ASYMMETRIC_ENCRYPT=761
    ASYMMETRIC_SIGN=762
    ASYMMETRIC_VERIFY=763
    ATAN=764
    ATAN2=765
    BENCHMARK=766
    BIN=767
    BIT_COUNT=768
    BIT_LENGTH=769
    BUFFER=770
    CATALOG_NAME=771
    CEIL=772
    CEILING=773
    CENTROID=774
    CHARACTER_LENGTH=775
    CHARSET=776
    CHAR_LENGTH=777
    COERCIBILITY=778
    COLLATION=779
    COMPRESS=780
    CONCAT=781
    CONCAT_WS=782
    CONNECTION_ID=783
    CONV=784
    CONVERT_TZ=785
    COS=786
    COT=787
    CRC32=788
    CREATE_ASYMMETRIC_PRIV_KEY=789
    CREATE_ASYMMETRIC_PUB_KEY=790
    CREATE_DH_PARAMETERS=791
    CREATE_DIGEST=792
    CROSSES=793
    DATEDIFF=794
    DATE_FORMAT=795
    DAYNAME=796
    DAYOFMONTH=797
    DAYOFWEEK=798
    DAYOFYEAR=799
    DECODE=800
    DEGREES=801
    DES_DECRYPT=802
    DES_ENCRYPT=803
    DIMENSION=804
    DISJOINT=805
    ELT=806
    ENCODE=807
    ENCRYPT=808
    ENDPOINT=809
    ENVELOPE=810
    EQUALS=811
    EXP=812
    EXPORT_SET=813
    EXTERIORRING=814
    EXTRACTVALUE=815
    FIELD=816
    FIND_IN_SET=817
    FLOOR=818
    FORMAT=819
    FOUND_ROWS=820
    FROM_BASE64=821
    FROM_DAYS=822
    FROM_UNIXTIME=823
    GEOMCOLLFROMTEXT=824
    GEOMCOLLFROMWKB=825
    GEOMETRYCOLLECTIONFROMTEXT=826
    GEOMETRYCOLLECTIONFROMWKB=827
    GEOMETRYFROMTEXT=828
    GEOMETRYFROMWKB=829
    GEOMETRYN=830
    GEOMETRYTYPE=831
    GEOMFROMTEXT=832
    GEOMFROMWKB=833
    GET_FORMAT=834
    GET_LOCK=835
    GLENGTH=836
    GREATEST=837
    GTID_SUBSET=838
    GTID_SUBTRACT=839
    HEX=840
    IFNULL=841
    INET6_ATON=842
    INET6_NTOA=843
    INET_ATON=844
    INET_NTOA=845
    INSTR=846
    INTERIORRINGN=847
    INTERSECTS=848
    ISCLOSED=849
    ISEMPTY=850
    ISNULL=851
    ISSIMPLE=852
    IS_FREE_LOCK=853
    IS_IPV4=854
    IS_IPV4_COMPAT=855
    IS_IPV4_MAPPED=856
    IS_IPV6=857
    IS_USED_LOCK=858
    LAST_INSERT_ID=859
    LCASE=860
    LEAST=861
    LENGTH=862
    LINEFROMTEXT=863
    LINEFROMWKB=864
    LINESTRINGFROMTEXT=865
    LINESTRINGFROMWKB=866
    LN=867
    LOAD_FILE=868
    LOCATE=869
    LOG=870
    LOG10=871
    LOG2=872
    LOWER=873
    LPAD=874
    LTRIM=875
    MAKEDATE=876
    MAKETIME=877
    MAKE_SET=878
    MASTER_POS_WAIT=879
    MBRCONTAINS=880
    MBRDISJOINT=881
    MBREQUAL=882
    MBRINTERSECTS=883
    MBROVERLAPS=884
    MBRTOUCHES=885
    MBRWITHIN=886
    MD5=887
    MLINEFROMTEXT=888
    MLINEFROMWKB=889
    MONTHNAME=890
    MPOINTFROMTEXT=891
    MPOINTFROMWKB=892
    MPOLYFROMTEXT=893
    MPOLYFROMWKB=894
    MULTILINESTRINGFROMTEXT=895
    MULTILINESTRINGFROMWKB=896
    MULTIPOINTFROMTEXT=897
    MULTIPOINTFROMWKB=898
    MULTIPOLYGONFROMTEXT=899
    MULTIPOLYGONFROMWKB=900
    NAME_CONST=901
    NULLIF=902
    NUMGEOMETRIES=903
    NUMINTERIORRINGS=904
    NUMPOINTS=905
    OCT=906
    OCTET_LENGTH=907
    ORD=908
    OVERLAPS=909
    PERIOD_ADD=910
    PERIOD_DIFF=911
    PI=912
    POINTFROMTEXT=913
    POINTFROMWKB=914
    POINTN=915
    POLYFROMTEXT=916
    POLYFROMWKB=917
    POLYGONFROMTEXT=918
    POLYGONFROMWKB=919
    POW=920
    POWER=921
    QUOTE=922
    RADIANS=923
    RAND=924
    RANDOM_BYTES=925
    RELEASE_LOCK=926
    REVERSE=927
    ROUND=928
    ROW_COUNT=929
    RPAD=930
    RTRIM=931
    SEC_TO_TIME=932
    SESSION_USER=933
    SHA=934
    SHA1=935
    SHA2=936
    SCHEMA_NAME=937
    SIGN=938
    SIN=939
    SLEEP=940
    SOUNDEX=941
    SQL_THREAD_WAIT_AFTER_GTIDS=942
    SQRT=943
    SRID=944
    STARTPOINT=945
    STRCMP=946
    STR_TO_DATE=947
    ST_AREA=948
    ST_ASBINARY=949
    ST_ASTEXT=950
    ST_ASWKB=951
    ST_ASWKT=952
    ST_BUFFER=953
    ST_CENTROID=954
    ST_CONTAINS=955
    ST_CROSSES=956
    ST_DIFFERENCE=957
    ST_DIMENSION=958
    ST_DISJOINT=959
    ST_DISTANCE=960
    ST_ENDPOINT=961
    ST_ENVELOPE=962
    ST_EQUALS=963
    ST_EXTERIORRING=964
    ST_GEOMCOLLFROMTEXT=965
    ST_GEOMCOLLFROMTXT=966
    ST_GEOMCOLLFROMWKB=967
    ST_GEOMETRYCOLLECTIONFROMTEXT=968
    ST_GEOMETRYCOLLECTIONFROMWKB=969
    ST_GEOMETRYFROMTEXT=970
    ST_GEOMETRYFROMWKB=971
    ST_GEOMETRYN=972
    ST_GEOMETRYTYPE=973
    ST_GEOMFROMTEXT=974
    ST_GEOMFROMWKB=975
    ST_INTERIORRINGN=976
    ST_INTERSECTION=977
    ST_INTERSECTS=978
    ST_ISCLOSED=979
    ST_ISEMPTY=980
    ST_ISSIMPLE=981
    ST_LINEFROMTEXT=982
    ST_LINEFROMWKB=983
    ST_LINESTRINGFROMTEXT=984
    ST_LINESTRINGFROMWKB=985
    ST_NUMGEOMETRIES=986
    ST_NUMINTERIORRING=987
    ST_NUMINTERIORRINGS=988
    ST_NUMPOINTS=989
    ST_OVERLAPS=990
    ST_POINTFROMTEXT=991
    ST_POINTFROMWKB=992
    ST_POINTN=993
    ST_POLYFROMTEXT=994
    ST_POLYFROMWKB=995
    ST_POLYGONFROMTEXT=996
    ST_POLYGONFROMWKB=997
    ST_SRID=998
    ST_STARTPOINT=999
    ST_SYMDIFFERENCE=1000
    ST_TOUCHES=1001
    ST_UNION=1002
    ST_WITHIN=1003
    ST_X=1004
    ST_Y=1005
    SUBDATE=1006
    SUBSTRING_INDEX=1007
    SUBTIME=1008
    SYSTEM_USER=1009
    TAN=1010
    TIMEDIFF=1011
    TIMESTAMPADD=1012
    TIMESTAMPDIFF=1013
    TIME_FORMAT=1014
    TIME_TO_SEC=1015
    TOUCHES=1016
    TO_BASE64=1017
    TO_DAYS=1018
    TO_SECONDS=1019
    UCASE=1020
    UNCOMPRESS=1021
    UNCOMPRESSED_LENGTH=1022
    UNHEX=1023
    UNIX_TIMESTAMP=1024
    UPDATEXML=1025
    UPPER=1026
    UUID=1027
    UUID_SHORT=1028
    VALIDATE_PASSWORD_STRENGTH=1029
    VERSION=1030
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1031
    WEEKDAY=1032
    WEEKOFYEAR=1033
    WEIGHT_STRING=1034
    WITHIN=1035
    YEARWEEK=1036
    Y_FUNCTION=1037
    X_FUNCTION=1038
    VAR_ASSIGN=1039
    PLUS_ASSIGN=1040
    MINUS_ASSIGN=1041
    MULT_ASSIGN=1042
    DIV_ASSIGN=1043
    MOD_ASSIGN=1044
    AND_ASSIGN=1045
    XOR_ASSIGN=1046
    OR_ASSIGN=1047
    STAR=1048
    DIVIDE=1049
    MODULE=1050
    PLUS=1051
    MINUSMINUS=1052
    MINUS=1053
    DIV=1054
    MOD=1055
    EQUAL_SYMBOL=1056
    GREATER_SYMBOL=1057
    LESS_SYMBOL=1058
    EXCLAMATION_SYMBOL=1059
    BIT_NOT_OP=1060
    BIT_OR_OP=1061
    BIT_AND_OP=1062
    BIT_XOR_OP=1063
    DOT=1064
    LR_BRACKET=1065
    RR_BRACKET=1066
    COMMA=1067
    SEMI=1068
    AT_SIGN=1069
    ZERO_DECIMAL=1070
    ONE_DECIMAL=1071
    TWO_DECIMAL=1072
    SINGLE_QUOTE_SYMB=1073
    DOUBLE_QUOTE_SYMB=1074
    REVERSE_QUOTE_SYMB=1075
    COLON_SYMB=1076
    CHARSET_REVERSE_QOUTE_STRING=1077
    FILESIZE_LITERAL=1078
    START_NATIONAL_STRING_LITERAL=1079
    STRING_LITERAL=1080
    DECIMAL_LITERAL=1081
    HEXADECIMAL_LITERAL=1082
    REAL_LITERAL=1083
    NULL_SPEC_LITERAL=1084
    BIT_STRING=1085
    STRING_CHARSET_NAME=1086
    DOT_ID=1087
    ID=1088
    REVERSE_QUOTE_ID=1089
    STRING_USER_NAME=1090
    IP_ADDRESS=1091
    LOCAL_ID=1092
    GLOBAL_ID=1093
    ERROR_RECONGNIGION=1094
    ADMIN=1095
    NULL=1096
    OPTIONAL=1097

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MySqlParser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementsContext,0)


        def MINUSMINUS(self):
            return self.getToken(MySqlParser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = MySqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.ALTER) | (1 << MySqlParser.ANALYZE) | (1 << MySqlParser.CALL) | (1 << MySqlParser.CHANGE) | (1 << MySqlParser.CHECK) | (1 << MySqlParser.CREATE) | (1 << MySqlParser.DELETE) | (1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.DROP) | (1 << MySqlParser.EXPLAIN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (MySqlParser.GET - 67)) | (1 << (MySqlParser.GRANT - 67)) | (1 << (MySqlParser.INSERT - 67)) | (1 << (MySqlParser.KILL - 67)) | (1 << (MySqlParser.LOAD - 67)) | (1 << (MySqlParser.LOCK - 67)) | (1 << (MySqlParser.OPTIMIZE - 67)) | (1 << (MySqlParser.PURGE - 67)) | (1 << (MySqlParser.RELEASE - 67)) | (1 << (MySqlParser.RENAME - 67)) | (1 << (MySqlParser.REPLACE - 67)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (MySqlParser.RESIGNAL - 132)) | (1 << (MySqlParser.REVOKE - 132)) | (1 << (MySqlParser.SELECT - 132)) | (1 << (MySqlParser.SET - 132)) | (1 << (MySqlParser.SHOW - 132)) | (1 << (MySqlParser.SIGNAL - 132)) | (1 << (MySqlParser.UNLOCK - 132)) | (1 << (MySqlParser.UPDATE - 132)) | (1 << (MySqlParser.USE - 132)))) != 0) or ((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & ((1 << (MySqlParser.BEGIN - 315)) | (1 << (MySqlParser.BINLOG - 315)) | (1 << (MySqlParser.CACHE - 315)) | (1 << (MySqlParser.CHECKSUM - 315)) | (1 << (MySqlParser.COMMIT - 315)) | (1 << (MySqlParser.DEALLOCATE - 315)) | (1 << (MySqlParser.DO - 315)))) != 0) or ((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (MySqlParser.FLUSH - 398)) | (1 << (MySqlParser.HANDLER - 398)) | (1 << (MySqlParser.HELP - 398)) | (1 << (MySqlParser.INSTALL - 398)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (MySqlParser.PREPARE - 512)) | (1 << (MySqlParser.REPAIR - 512)) | (1 << (MySqlParser.RESET - 512)) | (1 << (MySqlParser.ROLLBACK - 512)) | (1 << (MySqlParser.SAVEPOINT - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (MySqlParser.START - 576)) | (1 << (MySqlParser.STOP - 576)) | (1 << (MySqlParser.TRUNCATE - 576)) | (1 << (MySqlParser.UNINSTALL - 576)) | (1 << (MySqlParser.XA - 576)))) != 0) or _la==MySqlParser.EXECUTE or _la==MySqlParser.SHUTDOWN or _la==MySqlParser.LR_BRACKET or _la==MySqlParser.SEMI:
                self.state = 640
                self.sqlStatements()


            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MINUSMINUS:
                self.state = 643
                self.match(MySqlParser.MINUSMINUS)


            self.state = 646
            self.match(MySqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SqlStatementContext,i)


        def emptyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.EmptyStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.EmptyStatementContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SEMI)
            else:
                return self.getToken(MySqlParser.SEMI, i)

        def MINUSMINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUSMINUS)
            else:
                return self.getToken(MySqlParser.MINUSMINUS, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)




    def sqlStatements(self):

        localctx = MySqlParser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 656
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.LR_BRACKET]:
                        self.state = 648
                        self.sqlStatement()
                        self.state = 650
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.MINUSMINUS:
                            self.state = 649
                            self.match(MySqlParser.MINUSMINUS)


                        self.state = 653
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                        if la_ == 1:
                            self.state = 652
                            self.match(MySqlParser.SEMI)


                        pass
                    elif token in [MySqlParser.SEMI]:
                        self.state = 655
                        self.emptyStatement()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 660
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 669
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.LR_BRACKET]:
                self.state = 661
                self.sqlStatement()
                self.state = 666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.MINUSMINUS:
                        self.state = 662
                        self.match(MySqlParser.MINUSMINUS)


                    self.state = 665
                    self.match(MySqlParser.SEMI)


                pass
            elif token in [MySqlParser.SEMI]:
                self.state = 668
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DmlStatementContext,0)


        def transactionStatement(self):
            return self.getTypedRuleContext(MySqlParser.TransactionStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(MySqlParser.PreparedStatementContext,0)


        def administrationStatement(self):
            return self.getTypedRuleContext(MySqlParser.AdministrationStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(MySqlParser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)




    def sqlStatement(self):

        localctx = MySqlParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.ddlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 672
                self.dmlStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 673
                self.transactionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 674
                self.replicationStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 675
                self.preparedStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 676
                self.administrationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 677
                self.utilityStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MySqlParser.SEMI, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)




    def emptyStatement(self):

        localctx = MySqlParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(MySqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(MySqlParser.CreateDatabaseContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(MySqlParser.CreateEventContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(MySqlParser.CreateIndexContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.CreateLogfileGroupContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(MySqlParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(MySqlParser.CreateFunctionContext,0)


        def createServer(self):
            return self.getTypedRuleContext(MySqlParser.CreateServerContext,0)


        def createTable(self):
            return self.getTypedRuleContext(MySqlParser.CreateTableContext,0)


        def createTablespaceInnodb(self):
            return self.getTypedRuleContext(MySqlParser.CreateTablespaceInnodbContext,0)


        def createTablespaceNdb(self):
            return self.getTypedRuleContext(MySqlParser.CreateTablespaceNdbContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(MySqlParser.CreateTriggerContext,0)


        def createView(self):
            return self.getTypedRuleContext(MySqlParser.CreateViewContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(MySqlParser.AlterDatabaseContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(MySqlParser.AlterEventContext,0)


        def alterFunction(self):
            return self.getTypedRuleContext(MySqlParser.AlterFunctionContext,0)


        def alterInstance(self):
            return self.getTypedRuleContext(MySqlParser.AlterInstanceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.AlterLogfileGroupContext,0)


        def alterProcedure(self):
            return self.getTypedRuleContext(MySqlParser.AlterProcedureContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(MySqlParser.AlterServerContext,0)


        def alterTable(self):
            return self.getTypedRuleContext(MySqlParser.AlterTableContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(MySqlParser.AlterTablespaceContext,0)


        def alterView(self):
            return self.getTypedRuleContext(MySqlParser.AlterViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(MySqlParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(MySqlParser.DropEventContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(MySqlParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.DropLogfileGroupContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(MySqlParser.DropProcedureContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(MySqlParser.DropFunctionContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(MySqlParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(MySqlParser.DropTableContext,0)


        def dropTablespace(self):
            return self.getTypedRuleContext(MySqlParser.DropTablespaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(MySqlParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(MySqlParser.DropViewContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(MySqlParser.RenameTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(MySqlParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = MySqlParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 682
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 683
                self.createEvent()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 684
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 685
                self.createLogfileGroup()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 686
                self.createProcedure()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 687
                self.createFunction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 688
                self.createServer()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 689
                self.createTable()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 690
                self.createTablespaceInnodb()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 691
                self.createTablespaceNdb()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 692
                self.createTrigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 693
                self.createView()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 694
                self.alterDatabase()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 695
                self.alterEvent()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 696
                self.alterFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 697
                self.alterInstance()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 698
                self.alterLogfileGroup()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 699
                self.alterProcedure()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 700
                self.alterServer()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 701
                self.alterTable()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 702
                self.alterTablespace()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 703
                self.alterView()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 704
                self.dropDatabase()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 705
                self.dropEvent()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 706
                self.dropIndex()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 707
                self.dropLogfileGroup()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 708
                self.dropProcedure()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 709
                self.dropFunction()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 710
                self.dropServer()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 711
                self.dropTable()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 712
                self.dropTablespace()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 713
                self.dropTrigger()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 714
                self.dropView()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 715
                self.renameTable()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 716
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MySqlParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.DeleteStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplaceStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(MySqlParser.CallStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoadDataStatementContext,0)


        def loadXmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoadXmlStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(MySqlParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)




    def dmlStatement(self):

        localctx = MySqlParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 720
                self.insertStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 721
                self.updateStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 722
                self.deleteStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 723
                self.replaceStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 724
                self.callStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 725
                self.loadDataStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 726
                self.loadXmlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 727
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 728
                self.handlerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransaction(self):
            return self.getTypedRuleContext(MySqlParser.StartTransactionContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(MySqlParser.BeginWorkContext,0)


        def commitWork(self):
            return self.getTypedRuleContext(MySqlParser.CommitWorkContext,0)


        def rollbackWork(self):
            return self.getTypedRuleContext(MySqlParser.RollbackWorkContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(MySqlParser.SavepointStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(MySqlParser.RollbackStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReleaseStatementContext,0)


        def lockTables(self):
            return self.getTypedRuleContext(MySqlParser.LockTablesContext,0)


        def unlockTables(self):
            return self.getTypedRuleContext(MySqlParser.UnlockTablesContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)




    def transactionStatement(self):

        localctx = MySqlParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transactionStatement)
        try:
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.startTransaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.beginWork()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 733
                self.commitWork()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 734
                self.rollbackWork()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 735
                self.savepointStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 736
                self.rollbackStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 737
                self.releaseStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 738
                self.lockTables()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 739
                self.unlockTables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def changeMaster(self):
            return self.getTypedRuleContext(MySqlParser.ChangeMasterContext,0)


        def changeReplicationFilter(self):
            return self.getTypedRuleContext(MySqlParser.ChangeReplicationFilterContext,0)


        def purgeBinaryLogs(self):
            return self.getTypedRuleContext(MySqlParser.PurgeBinaryLogsContext,0)


        def resetMaster(self):
            return self.getTypedRuleContext(MySqlParser.ResetMasterContext,0)


        def resetSlave(self):
            return self.getTypedRuleContext(MySqlParser.ResetSlaveContext,0)


        def startSlave(self):
            return self.getTypedRuleContext(MySqlParser.StartSlaveContext,0)


        def stopSlave(self):
            return self.getTypedRuleContext(MySqlParser.StopSlaveContext,0)


        def startGroupReplication(self):
            return self.getTypedRuleContext(MySqlParser.StartGroupReplicationContext,0)


        def stopGroupReplication(self):
            return self.getTypedRuleContext(MySqlParser.StopGroupReplicationContext,0)


        def xaStartTransaction(self):
            return self.getTypedRuleContext(MySqlParser.XaStartTransactionContext,0)


        def xaEndTransaction(self):
            return self.getTypedRuleContext(MySqlParser.XaEndTransactionContext,0)


        def xaPrepareStatement(self):
            return self.getTypedRuleContext(MySqlParser.XaPrepareStatementContext,0)


        def xaCommitWork(self):
            return self.getTypedRuleContext(MySqlParser.XaCommitWorkContext,0)


        def xaRollbackWork(self):
            return self.getTypedRuleContext(MySqlParser.XaRollbackWorkContext,0)


        def xaRecoverWork(self):
            return self.getTypedRuleContext(MySqlParser.XaRecoverWorkContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)




    def replicationStatement(self):

        localctx = MySqlParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_replicationStatement)
        try:
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.changeMaster()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.changeReplicationFilter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.purgeBinaryLogs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                self.resetMaster()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 746
                self.resetSlave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 747
                self.startSlave()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 748
                self.stopSlave()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 749
                self.startGroupReplication()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 750
                self.stopGroupReplication()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 751
                self.xaStartTransaction()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 752
                self.xaEndTransaction()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 753
                self.xaPrepareStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 754
                self.xaCommitWork()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 755
                self.xaRollbackWork()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 756
                self.xaRecoverWork()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prepareStatement(self):
            return self.getTypedRuleContext(MySqlParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(MySqlParser.ExecuteStatementContext,0)


        def deallocatePrepare(self):
            return self.getTypedRuleContext(MySqlParser.DeallocatePrepareContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)




    def preparedStatement(self):

        localctx = MySqlParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_preparedStatement)
        try:
            self.state = 762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.PREPARE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.prepareStatement()
                pass
            elif token in [MySqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 760
                self.executeStatement()
                pass
            elif token in [MySqlParser.DROP, MySqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 761
                self.deallocatePrepare()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(MySqlParser.BlockStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(MySqlParser.CaseStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(MySqlParser.IfStatementContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(MySqlParser.LeaveStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoopStatementContext,0)


        def repeatStatement(self):
            return self.getTypedRuleContext(MySqlParser.RepeatStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(MySqlParser.WhileStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(MySqlParser.IterateStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReturnStatementContext,0)


        def cursorStatement(self):
            return self.getTypedRuleContext(MySqlParser.CursorStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = MySqlParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compoundStatement)
        try:
            self.state = 774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.caseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 766
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 767
                self.leaveStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 768
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 769
                self.repeatStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 770
                self.whileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 771
                self.iterateStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 772
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 773
                self.cursorStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdministrationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(MySqlParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(MySqlParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(MySqlParser.DropUserContext,0)


        def grantStatement(self):
            return self.getTypedRuleContext(MySqlParser.GrantStatementContext,0)


        def grantProxy(self):
            return self.getTypedRuleContext(MySqlParser.GrantProxyContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(MySqlParser.RenameUserContext,0)


        def revokeStatement(self):
            return self.getTypedRuleContext(MySqlParser.RevokeStatementContext,0)


        def revokeProxy(self):
            return self.getTypedRuleContext(MySqlParser.RevokeProxyContext,0)


        def analyzeTable(self):
            return self.getTypedRuleContext(MySqlParser.AnalyzeTableContext,0)


        def checkTable(self):
            return self.getTypedRuleContext(MySqlParser.CheckTableContext,0)


        def checksumTable(self):
            return self.getTypedRuleContext(MySqlParser.ChecksumTableContext,0)


        def optimizeTable(self):
            return self.getTypedRuleContext(MySqlParser.OptimizeTableContext,0)


        def repairTable(self):
            return self.getTypedRuleContext(MySqlParser.RepairTableContext,0)


        def createUdfunction(self):
            return self.getTypedRuleContext(MySqlParser.CreateUdfunctionContext,0)


        def installPlugin(self):
            return self.getTypedRuleContext(MySqlParser.InstallPluginContext,0)


        def uninstallPlugin(self):
            return self.getTypedRuleContext(MySqlParser.UninstallPluginContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(MySqlParser.ShowStatementContext,0)


        def binlogStatement(self):
            return self.getTypedRuleContext(MySqlParser.BinlogStatementContext,0)


        def cacheIndexStatement(self):
            return self.getTypedRuleContext(MySqlParser.CacheIndexStatementContext,0)


        def flushStatement(self):
            return self.getTypedRuleContext(MySqlParser.FlushStatementContext,0)


        def killStatement(self):
            return self.getTypedRuleContext(MySqlParser.KillStatementContext,0)


        def loadIndexIntoCache(self):
            return self.getTypedRuleContext(MySqlParser.LoadIndexIntoCacheContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(MySqlParser.ResetStatementContext,0)


        def shutdownStatement(self):
            return self.getTypedRuleContext(MySqlParser.ShutdownStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_administrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdministrationStatement" ):
                listener.enterAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdministrationStatement" ):
                listener.exitAdministrationStatement(self)




    def administrationStatement(self):

        localctx = MySqlParser.AdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_administrationStatement)
        try:
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 778
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 779
                self.grantStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 780
                self.grantProxy()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 781
                self.renameUser()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 782
                self.revokeStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 783
                self.revokeProxy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 784
                self.analyzeTable()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 785
                self.checkTable()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 786
                self.checksumTable()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 787
                self.optimizeTable()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 788
                self.repairTable()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 789
                self.createUdfunction()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 790
                self.installPlugin()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 791
                self.uninstallPlugin()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 792
                self.setStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 793
                self.showStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 794
                self.binlogStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 795
                self.cacheIndexStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 796
                self.flushStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 797
                self.killStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 798
                self.loadIndexIntoCache()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 799
                self.resetStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 800
                self.shutdownStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(MySqlParser.SimpleDescribeStatementContext,0)


        def fullDescribeStatement(self):
            return self.getTypedRuleContext(MySqlParser.FullDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(MySqlParser.HelpStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MySqlParser.UseStatementContext,0)


        def signalStatement(self):
            return self.getTypedRuleContext(MySqlParser.SignalStatementContext,0)


        def resignalStatement(self):
            return self.getTypedRuleContext(MySqlParser.ResignalStatementContext,0)


        def diagnosticsStatement(self):
            return self.getTypedRuleContext(MySqlParser.DiagnosticsStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)




    def utilityStatement(self):

        localctx = MySqlParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_utilityStatement)
        try:
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.simpleDescribeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.fullDescribeStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 805
                self.helpStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 806
                self.useStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 807
                self.signalStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 808
                self.resignalStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 809
                self.diagnosticsStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = MySqlParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(MySqlParser.CREATE)
            self.state = 813
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 814
                self.ifNotExists()


            self.state = 817
            self.uid()
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.CHARACTER) | (1 << MySqlParser.COLLATE) | (1 << MySqlParser.DEFAULT))) != 0) or _la==MySqlParser.CHARSET:
                self.state = 818
                self.createDatabaseOption()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(MySqlParser.ScheduleExpressionContext,0)


        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def enableType(self):
            return self.getTypedRuleContext(MySqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)




    def createEvent(self):

        localctx = MySqlParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(MySqlParser.CREATE)
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 825
                self.ownerStatement()


            self.state = 828
            self.match(MySqlParser.EVENT)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 829
                self.ifNotExists()


            self.state = 832
            self.fullId()
            self.state = 833
            self.match(MySqlParser.ON)
            self.state = 834
            self.match(MySqlParser.SCHEDULE)
            self.state = 835
            self.scheduleExpression()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 836
                self.match(MySqlParser.ON)
                self.state = 837
                self.match(MySqlParser.COMPLETION)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 838
                    self.match(MySqlParser.NOT)


                self.state = 841
                self.match(MySqlParser.PRESERVE)


            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DISABLE or _la==MySqlParser.ENABLE:
                self.state = 844
                self.enableType()


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 847
                self.match(MySqlParser.COMMENT)
                self.state = 848
                self.match(MySqlParser.STRING_LITERAL)


            self.state = 851
            self.match(MySqlParser.DO)
            self.state = 852
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.indexCategory = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ALGORITHM)
            else:
                return self.getToken(MySqlParser.ALGORITHM, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCK)
            else:
                return self.getToken(MySqlParser.LOCK, i)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)

        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def INPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.INPLACE)
            else:
                return self.getToken(MySqlParser.INPLACE, i)

        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COPY)
            else:
                return self.getToken(MySqlParser.COPY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NONE)
            else:
                return self.getToken(MySqlParser.NONE, i)

        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SHARED)
            else:
                return self.getToken(MySqlParser.SHARED, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EXCLUSIVE)
            else:
                return self.getToken(MySqlParser.EXCLUSIVE, i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = MySqlParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(MySqlParser.CREATE)
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE:
                self.state = 855
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL or _la==MySqlParser.UNIQUE:
                self.state = 858
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL or _la==MySqlParser.UNIQUE):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 861
            self.match(MySqlParser.INDEX)
            self.state = 862
            self.uid()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USING:
                self.state = 863
                self.indexType()


            self.state = 866
            self.match(MySqlParser.ON)
            self.state = 867
            self.tableName()
            self.state = 868
            self.indexColumnNames()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                self.state = 869
                self.indexOption()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 885
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.ALGORITHM]:
                        self.state = 875
                        self.match(MySqlParser.ALGORITHM)
                        self.state = 877
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.EQUAL_SYMBOL:
                            self.state = 876
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 879
                        localctx.algType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE):
                            localctx.algType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [MySqlParser.LOCK]:
                        self.state = 880
                        self.match(MySqlParser.LOCK)
                        self.state = 882
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.EQUAL_SYMBOL:
                            self.state = 881
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 884
                        localctx.lockType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                            localctx.lockType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.undoFile = None # Token
            self.initSize = None # FileSizeLiteralContext
            self.undoSize = None # FileSizeLiteralContext
            self.redoSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.REDO_BUFFER_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)




    def createLogfileGroup(self):

        localctx = MySqlParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(MySqlParser.CREATE)
            self.state = 891
            self.match(MySqlParser.LOGFILE)
            self.state = 892
            self.match(MySqlParser.GROUP)
            self.state = 893
            self.uid()
            self.state = 894
            self.match(MySqlParser.ADD)
            self.state = 895
            self.match(MySqlParser.UNDOFILE)
            self.state = 896
            localctx.undoFile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 897
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 898
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 901
                localctx.initSize = self.fileSizeLiteral()


            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.UNDO_BUFFER_SIZE:
                self.state = 904
                self.match(MySqlParser.UNDO_BUFFER_SIZE)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 905
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 908
                localctx.undoSize = self.fileSizeLiteral()


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.REDO_BUFFER_SIZE:
                self.state = 911
                self.match(MySqlParser.REDO_BUFFER_SIZE)
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 912
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 915
                localctx.redoSize = self.fileSizeLiteral()


            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NODEGROUP:
                self.state = 918
                self.match(MySqlParser.NODEGROUP)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 919
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 922
                self.uid()


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 925
                self.match(MySqlParser.WAIT)


            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 928
                self.match(MySqlParser.COMMENT)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 929
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 932
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)


            self.state = 935
            self.match(MySqlParser.ENGINE)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 936
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 939
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)




    def createProcedure(self):

        localctx = MySqlParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(MySqlParser.CREATE)
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 942
                self.ownerStatement()


            self.state = 945
            self.match(MySqlParser.PROCEDURE)
            self.state = 946
            self.fullId()
            self.state = 947
            self.match(MySqlParser.LR_BRACKET)
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.IN - 69)) | (1 << (MySqlParser.INOUT - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)) | (1 << (MySqlParser.OUT - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 948
                self.procedureParameter()


            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 951
                self.match(MySqlParser.COMMA)
                self.state = 952
                self.procedureParameter()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 958
            self.match(MySqlParser.RR_BRACKET)
            self.state = 962
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 959
                    self.routineOption() 
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 965
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReturnStatementContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)




    def createFunction(self):

        localctx = MySqlParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(MySqlParser.CREATE)
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 968
                self.ownerStatement()


            self.state = 971
            self.match(MySqlParser.FUNCTION)
            self.state = 972
            self.fullId()
            self.state = 973
            self.match(MySqlParser.LR_BRACKET)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 974
                self.functionParameter()


            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 977
                self.match(MySqlParser.COMMA)
                self.state = 978
                self.functionParameter()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 984
            self.match(MySqlParser.RR_BRACKET)
            self.state = 985
            self.match(MySqlParser.RETURNS)
            self.state = 986
            self.dataType()
            self.state = 990
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 987
                    self.routineOption() 
                self.state = 992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DIAGNOSTICS, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.GROUP, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LEFT, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.NUMBER, MySqlParser.OPTIMIZE, MySqlParser.ORDER, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.STACKED, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.LR_BRACKET, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                self.state = 993
                self.routineBody()
                pass
            elif token in [MySqlParser.RETURN]:
                self.state = 994
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.wrapperName = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def WRAPPER(self):
            return self.getToken(MySqlParser.WRAPPER, 0)

        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)




    def createServer(self):

        localctx = MySqlParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(MySqlParser.CREATE)
            self.state = 998
            self.match(MySqlParser.SERVER)
            self.state = 999
            self.uid()
            self.state = 1000
            self.match(MySqlParser.FOREIGN)
            self.state = 1001
            self.match(MySqlParser.DATA)
            self.state = 1002
            self.match(MySqlParser.WRAPPER)
            self.state = 1003
            localctx.wrapperName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MYSQL or _la==MySqlParser.STRING_LITERAL):
                localctx.wrapperName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1004
            self.match(MySqlParser.OPTIONS)
            self.state = 1005
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1006
            self.serverOption()
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 1007
                self.match(MySqlParser.COMMA)
                self.state = 1008
                self.serverOption()
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1014
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.parenthesisTable = None # TableNameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyCreateTable" ):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyCreateTable" ):
                listener.exitCopyCreateTable(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.CreateDefinitionsContext,0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.keyViolate = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.CreateDefinitionsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)
        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCreateTable" ):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCreateTable" ):
                listener.exitQueryCreateTable(self)



    def createTable(self):

        localctx = MySqlParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                self.match(MySqlParser.CREATE)
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 1017
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1020
                self.match(MySqlParser.TABLE)
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 1021
                    self.ifNotExists()


                self.state = 1024
                self.tableName()
                self.state = 1032
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LIKE]:
                    self.state = 1025
                    self.match(MySqlParser.LIKE)
                    self.state = 1026
                    self.tableName()
                    pass
                elif token in [MySqlParser.LR_BRACKET]:
                    self.state = 1027
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1028
                    self.match(MySqlParser.LIKE)
                    self.state = 1029
                    localctx.parenthesisTable = self.tableName()
                    self.state = 1030
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = MySqlParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.match(MySqlParser.CREATE)
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 1035
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1038
                self.match(MySqlParser.TABLE)
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 1039
                    self.ifNotExists()


                self.state = 1042
                self.tableName()
                self.state = 1044
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 1043
                    self.createDefinitions()


                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (MySqlParser.CHARACTER - 24)) | (1 << (MySqlParser.COLLATE - 24)) | (1 << (MySqlParser.DEFAULT - 24)) | (1 << (MySqlParser.INDEX - 24)))) != 0) or _la==MySqlParser.UNION or ((((_la - 313)) & ~0x3f) == 0 and ((1 << (_la - 313)) & ((1 << (MySqlParser.AUTO_INCREMENT - 313)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 313)) | (1 << (MySqlParser.CHECKSUM - 313)) | (1 << (MySqlParser.PAGE_CHECKSUM - 313)) | (1 << (MySqlParser.COMMENT - 313)) | (1 << (MySqlParser.COMPRESSION - 313)) | (1 << (MySqlParser.CONNECTION - 313)) | (1 << (MySqlParser.DATA - 313)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 313)) | (1 << (MySqlParser.ENCRYPTION - 313)) | (1 << (MySqlParser.ENGINE - 313)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (MySqlParser.INSERT_METHOD - 418)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 418)) | (1 << (MySqlParser.MAX_ROWS - 418)) | (1 << (MySqlParser.MIN_ROWS - 418)))) != 0) or ((((_la - 499)) & ~0x3f) == 0 and ((1 << (_la - 499)) & ((1 << (MySqlParser.PACK_KEYS - 499)) | (1 << (MySqlParser.PASSWORD - 499)) | (1 << (MySqlParser.ROW_FORMAT - 499)))) != 0) or ((((_la - 578)) & ~0x3f) == 0 and ((1 << (_la - 578)) & ((1 << (MySqlParser.STATS_AUTO_RECALC - 578)) | (1 << (MySqlParser.STATS_PERSISTENT - 578)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 578)) | (1 << (MySqlParser.STORAGE - 578)) | (1 << (MySqlParser.TABLESPACE - 578)) | (1 << (MySqlParser.TABLE_TYPE - 578)))) != 0) or _la==MySqlParser.CHARSET:
                    self.state = 1046
                    self.tableOption()
                    self.state = 1053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (MySqlParser.CHARACTER - 24)) | (1 << (MySqlParser.COLLATE - 24)) | (1 << (MySqlParser.DEFAULT - 24)) | (1 << (MySqlParser.INDEX - 24)))) != 0) or _la==MySqlParser.UNION or ((((_la - 313)) & ~0x3f) == 0 and ((1 << (_la - 313)) & ((1 << (MySqlParser.AUTO_INCREMENT - 313)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 313)) | (1 << (MySqlParser.CHECKSUM - 313)) | (1 << (MySqlParser.PAGE_CHECKSUM - 313)) | (1 << (MySqlParser.COMMENT - 313)) | (1 << (MySqlParser.COMPRESSION - 313)) | (1 << (MySqlParser.CONNECTION - 313)) | (1 << (MySqlParser.DATA - 313)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 313)) | (1 << (MySqlParser.ENCRYPTION - 313)) | (1 << (MySqlParser.ENGINE - 313)))) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (MySqlParser.INSERT_METHOD - 418)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 418)) | (1 << (MySqlParser.MAX_ROWS - 418)) | (1 << (MySqlParser.MIN_ROWS - 418)))) != 0) or ((((_la - 499)) & ~0x3f) == 0 and ((1 << (_la - 499)) & ((1 << (MySqlParser.PACK_KEYS - 499)) | (1 << (MySqlParser.PASSWORD - 499)) | (1 << (MySqlParser.ROW_FORMAT - 499)))) != 0) or ((((_la - 578)) & ~0x3f) == 0 and ((1 << (_la - 578)) & ((1 << (MySqlParser.STATS_AUTO_RECALC - 578)) | (1 << (MySqlParser.STATS_PERSISTENT - 578)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 578)) | (1 << (MySqlParser.STORAGE - 578)) | (1 << (MySqlParser.TABLESPACE - 578)) | (1 << (MySqlParser.TABLE_TYPE - 578)))) != 0) or _la==MySqlParser.CHARSET or _la==MySqlParser.COMMA:
                        self.state = 1048
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.COMMA:
                            self.state = 1047
                            self.match(MySqlParser.COMMA)


                        self.state = 1050
                        self.tableOption()
                        self.state = 1055
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 1058
                    self.partitionDefinitions()


                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                    self.state = 1061
                    localctx.keyViolate = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                        localctx.keyViolate = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 1064
                    self.match(MySqlParser.AS)


                self.state = 1067
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = MySqlParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1069
                self.match(MySqlParser.CREATE)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 1070
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1073
                self.match(MySqlParser.TABLE)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 1074
                    self.ifNotExists()


                self.state = 1077
                self.tableName()
                self.state = 1078
                self.createDefinitions()
                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 1079
                    self.tableOption()
                    self.state = 1086
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1081
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.COMMA:
                                self.state = 1080
                                self.match(MySqlParser.COMMA)


                            self.state = 1083
                            self.tableOption() 
                        self.state = 1088
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)



                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 1091
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceInnodbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.fileBlockSize = None # FileSizeLiteralContext

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.FILE_BLOCK_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_createTablespaceInnodb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceInnodb" ):
                listener.enterCreateTablespaceInnodb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceInnodb" ):
                listener.exitCreateTablespaceInnodb(self)




    def createTablespaceInnodb(self):

        localctx = MySqlParser.CreateTablespaceInnodbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createTablespaceInnodb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(MySqlParser.CREATE)
            self.state = 1097
            self.match(MySqlParser.TABLESPACE)
            self.state = 1098
            self.uid()
            self.state = 1099
            self.match(MySqlParser.ADD)
            self.state = 1100
            self.match(MySqlParser.DATAFILE)
            self.state = 1101
            localctx.datafile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FILE_BLOCK_SIZE:
                self.state = 1102
                self.match(MySqlParser.FILE_BLOCK_SIZE)
                self.state = 1103
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1104
                localctx.fileBlockSize = self.fileSizeLiteral()


            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ENGINE:
                self.state = 1107
                self.match(MySqlParser.ENGINE)
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1108
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1111
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceNdbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.extentSize = None # FileSizeLiteralContext
            self.initialSize = None # FileSizeLiteralContext
            self.autoextendSize = None # FileSizeLiteralContext
            self.maxSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def EXTENT_SIZE(self):
            return self.getToken(MySqlParser.EXTENT_SIZE, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)

        def MAX_SIZE(self):
            return self.getToken(MySqlParser.MAX_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createTablespaceNdb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceNdb" ):
                listener.enterCreateTablespaceNdb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceNdb" ):
                listener.exitCreateTablespaceNdb(self)




    def createTablespaceNdb(self):

        localctx = MySqlParser.CreateTablespaceNdbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_createTablespaceNdb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(MySqlParser.CREATE)
            self.state = 1115
            self.match(MySqlParser.TABLESPACE)
            self.state = 1116
            self.uid()
            self.state = 1117
            self.match(MySqlParser.ADD)
            self.state = 1118
            self.match(MySqlParser.DATAFILE)
            self.state = 1119
            localctx.datafile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 1120
            self.match(MySqlParser.USE)
            self.state = 1121
            self.match(MySqlParser.LOGFILE)
            self.state = 1122
            self.match(MySqlParser.GROUP)
            self.state = 1123
            self.uid()
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENT_SIZE:
                self.state = 1124
                self.match(MySqlParser.EXTENT_SIZE)
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1125
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1128
                localctx.extentSize = self.fileSizeLiteral()


            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 1131
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1132
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1135
                localctx.initialSize = self.fileSizeLiteral()


            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AUTOEXTEND_SIZE:
                self.state = 1138
                self.match(MySqlParser.AUTOEXTEND_SIZE)
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1139
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1142
                localctx.autoextendSize = self.fileSizeLiteral()


            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MAX_SIZE:
                self.state = 1145
                self.match(MySqlParser.MAX_SIZE)
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1146
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1149
                localctx.maxSize = self.fileSizeLiteral()


            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NODEGROUP:
                self.state = 1152
                self.match(MySqlParser.NODEGROUP)
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1153
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1156
                self.uid()


            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 1159
                self.match(MySqlParser.WAIT)


            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 1162
                self.match(MySqlParser.COMMENT)
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1163
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1166
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)


            self.state = 1169
            self.match(MySqlParser.ENGINE)
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 1170
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 1173
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.thisTrigger = None # FullIdContext
            self.triggerTime = None # Token
            self.triggerEvent = None # Token
            self.triggerPlace = None # Token
            self.otherTrigger = None # FullIdContext

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(MySqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def BEFORE(self):
            return self.getToken(MySqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def FOLLOWS(self):
            return self.getToken(MySqlParser.FOLLOWS, 0)

        def PRECEDES(self):
            return self.getToken(MySqlParser.PRECEDES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)




    def createTrigger(self):

        localctx = MySqlParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(MySqlParser.CREATE)
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1176
                self.ownerStatement()


            self.state = 1179
            self.match(MySqlParser.TRIGGER)
            self.state = 1180
            localctx.thisTrigger = self.fullId()
            self.state = 1181
            localctx.triggerTime = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BEFORE or _la==MySqlParser.AFTER):
                localctx.triggerTime = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1182
            localctx.triggerEvent = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DELETE or _la==MySqlParser.INSERT or _la==MySqlParser.UPDATE):
                localctx.triggerEvent = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1183
            self.match(MySqlParser.ON)
            self.state = 1184
            self.tableName()
            self.state = 1185
            self.match(MySqlParser.FOR)
            self.state = 1186
            self.match(MySqlParser.EACH)
            self.state = 1187
            self.match(MySqlParser.ROW)
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1188
                localctx.triggerPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FOLLOWS or _la==MySqlParser.PRECEDES):
                    localctx.triggerPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1189
                localctx.otherTrigger = self.fullId()


            self.state = 1192
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOption = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)




    def createView(self):

        localctx = MySqlParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.match(MySqlParser.CREATE)
            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OR:
                self.state = 1195
                self.match(MySqlParser.OR)
                self.state = 1196
                self.match(MySqlParser.REPLACE)


            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALGORITHM:
                self.state = 1199
                self.match(MySqlParser.ALGORITHM)
                self.state = 1200
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1201
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MERGE or _la==MySqlParser.TEMPTABLE or _la==MySqlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1204
                self.ownerStatement()


            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SQL:
                self.state = 1207
                self.match(MySqlParser.SQL)
                self.state = 1208
                self.match(MySqlParser.SECURITY)
                self.state = 1209
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1212
            self.match(MySqlParser.VIEW)
            self.state = 1213
            self.fullId()
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 1214
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1215
                self.uidList()
                self.state = 1216
                self.match(MySqlParser.RR_BRACKET)


            self.state = 1220
            self.match(MySqlParser.AS)
            self.state = 1221
            self.selectStatement()
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 1222
                self.match(MySqlParser.WITH)
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL:
                    self.state = 1223
                    localctx.checkOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL):
                        localctx.checkOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1226
                self.match(MySqlParser.CHECK)
                self.state = 1227
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)




    def createDatabaseOption(self):

        localctx = MySqlParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createDatabaseOption)
        self._la = 0 # Token type
        try:
            self.state = 1253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1230
                    self.match(MySqlParser.DEFAULT)


                self.state = 1236
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CHARACTER]:
                    self.state = 1233
                    self.match(MySqlParser.CHARACTER)
                    self.state = 1234
                    self.match(MySqlParser.SET)
                    pass
                elif token in [MySqlParser.CHARSET]:
                    self.state = 1235
                    self.match(MySqlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1238
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 1241
                    self.charsetName()
                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 1242
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1245
                    self.match(MySqlParser.DEFAULT)


                self.state = 1248
                self.match(MySqlParser.COLLATE)
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1249
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1252
                self.collationName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OwnerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ownerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwnerStatement" ):
                listener.enterOwnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwnerStatement" ):
                listener.exitOwnerStatement(self)




    def ownerStatement(self):

        localctx = MySqlParser.OwnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ownerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(MySqlParser.DEFINER)
            self.state = 1256
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 1263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.STRING_USER_NAME]:
                self.state = 1257
                self.userName()
                pass
            elif token in [MySqlParser.CURRENT_USER]:
                self.state = 1258
                self.match(MySqlParser.CURRENT_USER)
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 1259
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1260
                    self.match(MySqlParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_scheduleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PreciseScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(MySqlParser.AT, 0)
        def timestampValue(self):
            return self.getTypedRuleContext(MySqlParser.TimestampValueContext,0)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreciseSchedule" ):
                listener.enterPreciseSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreciseSchedule" ):
                listener.exitPreciseSchedule(self)


    class IntervalScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.startTimestamp = None # TimestampValueContext
            self._intervalExpr = None # IntervalExprContext
            self.startIntervals = list() # of IntervalExprContexts
            self.endTimestamp = None # TimestampValueContext
            self.endIntervals = list() # of IntervalExprContexts
            self.copyFrom(ctx)

        def EVERY(self):
            return self.getToken(MySqlParser.EVERY, 0)
        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def STARTS(self):
            return self.getToken(MySqlParser.STARTS, 0)
        def ENDS(self):
            return self.getToken(MySqlParser.ENDS, 0)
        def timestampValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TimestampValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TimestampValueContext,i)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSchedule" ):
                listener.enterIntervalSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSchedule" ):
                listener.exitIntervalSchedule(self)



    def scheduleExpression(self):

        localctx = MySqlParser.ScheduleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_scheduleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.AT]:
                localctx = MySqlParser.PreciseScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.match(MySqlParser.AT)
                self.state = 1266
                self.timestampValue()
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.PLUS:
                    self.state = 1267
                    self.intervalExpr()
                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.EVERY]:
                localctx = MySqlParser.IntervalScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1273
                self.match(MySqlParser.EVERY)
                self.state = 1276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1274
                    self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1275
                    self.expression(0)
                    pass


                self.state = 1278
                self.intervalType()
                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STARTS:
                    self.state = 1279
                    self.match(MySqlParser.STARTS)
                    self.state = 1280
                    localctx.startTimestamp = self.timestampValue()
                    self.state = 1284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.PLUS:
                        self.state = 1281
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.startIntervals.append(localctx._intervalExpr)
                        self.state = 1286
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ENDS:
                    self.state = 1289
                    self.match(MySqlParser.ENDS)
                    self.state = 1290
                    localctx.endTimestamp = self.timestampValue()
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.PLUS:
                        self.state = 1291
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.endIntervals.append(localctx._intervalExpr)
                        self.state = 1296
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_timestampValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampValue" ):
                listener.enterTimestampValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampValue" ):
                listener.exitTimestampValue(self)




    def timestampValue(self):

        localctx = MySqlParser.TimestampValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_timestampValue)
        try:
            self.state = 1305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.match(MySqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1303
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1304
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)

        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_intervalExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)




    def intervalExpr(self):

        localctx = MySqlParser.IntervalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_intervalExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.match(MySqlParser.PLUS)
            self.state = 1308
            self.match(MySqlParser.INTERVAL)
            self.state = 1311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1309
                self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 1310
                self.expression(0)
                pass


            self.state = 1313
            self.intervalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeBaseContext,0)


        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def YEAR_MONTH(self):
            return self.getToken(MySqlParser.YEAR_MONTH, 0)

        def DAY_HOUR(self):
            return self.getToken(MySqlParser.DAY_HOUR, 0)

        def DAY_MINUTE(self):
            return self.getToken(MySqlParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(MySqlParser.DAY_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(MySqlParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(MySqlParser.HOUR_SECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(MySqlParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(MySqlParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(MySqlParser.MINUTE_MICROSECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(MySqlParser.HOUR_MICROSECOND, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(MySqlParser.DAY_MICROSECOND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_intervalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)




    def intervalType(self):

        localctx = MySqlParser.IntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_intervalType)
        try:
            self.state = 1328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1315
                self.intervalTypeBase()
                pass
            elif token in [MySqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1316
                self.match(MySqlParser.YEAR)
                pass
            elif token in [MySqlParser.YEAR_MONTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1317
                self.match(MySqlParser.YEAR_MONTH)
                pass
            elif token in [MySqlParser.DAY_HOUR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1318
                self.match(MySqlParser.DAY_HOUR)
                pass
            elif token in [MySqlParser.DAY_MINUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1319
                self.match(MySqlParser.DAY_MINUTE)
                pass
            elif token in [MySqlParser.DAY_SECOND]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1320
                self.match(MySqlParser.DAY_SECOND)
                pass
            elif token in [MySqlParser.HOUR_MINUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1321
                self.match(MySqlParser.HOUR_MINUTE)
                pass
            elif token in [MySqlParser.HOUR_SECOND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1322
                self.match(MySqlParser.HOUR_SECOND)
                pass
            elif token in [MySqlParser.MINUTE_SECOND]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1323
                self.match(MySqlParser.MINUTE_SECOND)
                pass
            elif token in [MySqlParser.SECOND_MICROSECOND]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1324
                self.match(MySqlParser.SECOND_MICROSECOND)
                pass
            elif token in [MySqlParser.MINUTE_MICROSECOND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1325
                self.match(MySqlParser.MINUTE_MICROSECOND)
                pass
            elif token in [MySqlParser.HOUR_MICROSECOND]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1326
                self.match(MySqlParser.HOUR_MICROSECOND)
                pass
            elif token in [MySqlParser.DAY_MICROSECOND]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1327
                self.match(MySqlParser.DAY_MICROSECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_enableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableType" ):
                listener.enterEnableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableType" ):
                listener.exitEnableType(self)




    def enableType(self):

        localctx = MySqlParser.EnableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_enableType)
        try:
            self.state = 1335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1330
                self.match(MySqlParser.ENABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1331
                self.match(MySqlParser.DISABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1332
                self.match(MySqlParser.DISABLE)
                self.state = 1333
                self.match(MySqlParser.ON)
                self.state = 1334
                self.match(MySqlParser.SLAVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def BTREE(self):
            return self.getToken(MySqlParser.BTREE, 0)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = MySqlParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(MySqlParser.USING)
            self.state = 1338
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BTREE or _la==MySqlParser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)


        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def PARSER(self):
            return self.getToken(MySqlParser.PARSER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)




    def indexOption(self):

        localctx = MySqlParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_indexOption)
        self._la = 0 # Token type
        try:
            self.state = 1353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.KEY_BLOCK_SIZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1340
                self.match(MySqlParser.KEY_BLOCK_SIZE)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1341
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1344
                self.fileSizeLiteral()
                pass
            elif token in [MySqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.indexType()
                pass
            elif token in [MySqlParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1346
                self.match(MySqlParser.WITH)
                self.state = 1347
                self.match(MySqlParser.PARSER)
                self.state = 1348
                self.uid()
                pass
            elif token in [MySqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1349
                self.match(MySqlParser.COMMENT)
                self.state = 1350
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.INVISIBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1351
                self.match(MySqlParser.INVISIBLE)
                pass
            elif token in [MySqlParser.VISIBLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1352
                self.match(MySqlParser.VISIBLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def OUT(self):
            return self.getToken(MySqlParser.OUT, 0)

        def INOUT(self):
            return self.getToken(MySqlParser.INOUT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)




    def procedureParameter(self):

        localctx = MySqlParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (MySqlParser.IN - 74)) | (1 << (MySqlParser.INOUT - 74)) | (1 << (MySqlParser.OUT - 74)))) != 0):
                self.state = 1355
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (MySqlParser.IN - 74)) | (1 << (MySqlParser.INOUT - 74)) | (1 << (MySqlParser.OUT - 74)))) != 0)):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1358
            self.uid()
            self.state = 1359
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)




    def functionParameter(self):

        localctx = MySqlParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.uid()
            self.state = 1362
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_routineOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RoutineBehaviorContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(MySqlParser.DETERMINISTIC, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBehavior" ):
                listener.enterRoutineBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBehavior" ):
                listener.exitRoutineBehavior(self)


    class RoutineLanguageContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGUAGE(self):
            return self.getToken(MySqlParser.LANGUAGE, 0)
        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineLanguage" ):
                listener.enterRoutineLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineLanguage" ):
                listener.exitRoutineLanguage(self)


    class RoutineCommentContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineComment" ):
                listener.enterRoutineComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineComment" ):
                listener.exitRoutineComment(self)


    class RoutineSecurityContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.context = None # Token
            self.copyFrom(ctx)

        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)
        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineSecurity" ):
                listener.enterRoutineSecurity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineSecurity" ):
                listener.exitRoutineSecurity(self)


    class RoutineDataContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(MySqlParser.CONTAINS, 0)
        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)
        def NO(self):
            return self.getToken(MySqlParser.NO, 0)
        def READS(self):
            return self.getToken(MySqlParser.READS, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def MODIFIES(self):
            return self.getToken(MySqlParser.MODIFIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineData" ):
                listener.enterRoutineData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineData" ):
                listener.exitRoutineData(self)



    def routineOption(self):

        localctx = MySqlParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 1387
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.RoutineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.match(MySqlParser.COMMENT)
                self.state = 1365
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.LANGUAGE]:
                localctx = MySqlParser.RoutineLanguageContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.match(MySqlParser.LANGUAGE)
                self.state = 1367
                self.match(MySqlParser.SQL)
                pass
            elif token in [MySqlParser.DETERMINISTIC, MySqlParser.NOT]:
                localctx = MySqlParser.RoutineBehaviorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 1368
                    self.match(MySqlParser.NOT)


                self.state = 1371
                self.match(MySqlParser.DETERMINISTIC)
                pass
            elif token in [MySqlParser.MODIFIES, MySqlParser.READS, MySqlParser.CONTAINS, MySqlParser.NO]:
                localctx = MySqlParser.RoutineDataContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1382
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CONTAINS]:
                    self.state = 1372
                    self.match(MySqlParser.CONTAINS)
                    self.state = 1373
                    self.match(MySqlParser.SQL)
                    pass
                elif token in [MySqlParser.NO]:
                    self.state = 1374
                    self.match(MySqlParser.NO)
                    self.state = 1375
                    self.match(MySqlParser.SQL)
                    pass
                elif token in [MySqlParser.READS]:
                    self.state = 1376
                    self.match(MySqlParser.READS)
                    self.state = 1377
                    self.match(MySqlParser.SQL)
                    self.state = 1378
                    self.match(MySqlParser.DATA)
                    pass
                elif token in [MySqlParser.MODIFIES]:
                    self.state = 1379
                    self.match(MySqlParser.MODIFIES)
                    self.state = 1380
                    self.match(MySqlParser.SQL)
                    self.state = 1381
                    self.match(MySqlParser.DATA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.SQL]:
                localctx = MySqlParser.RoutineSecurityContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1384
                self.match(MySqlParser.SQL)
                self.state = 1385
                self.match(MySqlParser.SECURITY)
                self.state = 1386
                localctx.context = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.context = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(MySqlParser.HOST, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def SOCKET(self):
            return self.getToken(MySqlParser.SOCKET, 0)

        def OWNER(self):
            return self.getToken(MySqlParser.OWNER, 0)

        def PORT(self):
            return self.getToken(MySqlParser.PORT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)




    def serverOption(self):

        localctx = MySqlParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_serverOption)
        try:
            self.state = 1403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.HOST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self.match(MySqlParser.HOST)
                self.state = 1390
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.match(MySqlParser.DATABASE)
                self.state = 1392
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.USER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1393
                self.match(MySqlParser.USER)
                self.state = 1394
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1395
                self.match(MySqlParser.PASSWORD)
                self.state = 1396
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.SOCKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1397
                self.match(MySqlParser.SOCKET)
                self.state = 1398
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.OWNER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1399
                self.match(MySqlParser.OWNER)
                self.state = 1400
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PORT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1401
                self.match(MySqlParser.PORT)
                self.state = 1402
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)




    def createDefinitions(self):

        localctx = MySqlParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1406
            self.createDefinition()
            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 1407
                self.match(MySqlParser.COMMA)
                self.state = 1408
                self.createDefinition()
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1414
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(MySqlParser.TableConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDeclaration" ):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDeclaration" ):
                listener.exitConstraintDeclaration(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)



    def createDefinition(self):

        localctx = MySqlParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createDefinition)
        try:
            self.state = 1421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                localctx = MySqlParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1416
                self.uid()
                self.state = 1417
                self.columnDefinition()
                pass
            elif token in [MySqlParser.CHECK, MySqlParser.CONSTRAINT, MySqlParser.FOREIGN, MySqlParser.PRIMARY, MySqlParser.UNIQUE]:
                localctx = MySqlParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1419
                self.tableConstraint()
                pass
            elif token in [MySqlParser.FULLTEXT, MySqlParser.INDEX, MySqlParser.KEY, MySqlParser.SPATIAL]:
                localctx = MySqlParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1420
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = MySqlParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.dataType()
            self.state = 1427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1424
                    self.columnConstraint() 
                self.state = 1429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StorageColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.storageval = None # Token
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)
        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)
        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageColumnConstraint" ):
                listener.enterStorageColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageColumnConstraint" ):
                listener.exitStorageColumnConstraint(self)


    class VisibilityColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)
        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityColumnConstraint" ):
                listener.enterVisibilityColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityColumnConstraint" ):
                listener.exitVisibilityColumnConstraint(self)


    class AutoIncrementColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)
        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)
        def currentTimestamp(self):
            return self.getTypedRuleContext(MySqlParser.CurrentTimestampContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoIncrementColumnConstraint" ):
                listener.enterAutoIncrementColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoIncrementColumnConstraint" ):
                listener.exitAutoIncrementColumnConstraint(self)


    class CommentColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumnConstraint" ):
                listener.enterCommentColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumnConstraint" ):
                listener.exitCommentColumnConstraint(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)


    class SerialDefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerialDefaultColumnConstraint" ):
                listener.enterSerialDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerialDefaultColumnConstraint" ):
                listener.exitSerialDefaultColumnConstraint(self)


    class GeneratedColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def GENERATED(self):
            return self.getToken(MySqlParser.GENERATED, 0)
        def ALWAYS(self):
            return self.getToken(MySqlParser.ALWAYS, 0)
        def VIRTUAL(self):
            return self.getToken(MySqlParser.VIRTUAL, 0)
        def STORED(self):
            return self.getToken(MySqlParser.STORED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratedColumnConstraint" ):
                listener.enterGeneratedColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratedColumnConstraint" ):
                listener.exitGeneratedColumnConstraint(self)


    class FormatColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.colformat = None # Token
            self.copyFrom(ctx)

        def COLUMN_FORMAT(self):
            return self.getToken(MySqlParser.COLUMN_FORMAT, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatColumnConstraint" ):
                listener.enterFormatColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatColumnConstraint" ):
                listener.exitFormatColumnConstraint(self)


    class CollateColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateColumnConstraint" ):
                listener.enterCollateColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateColumnConstraint" ):
                listener.exitCollateColumnConstraint(self)


    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)


    class CheckColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckColumnConstraint" ):
                listener.enterCheckColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckColumnConstraint" ):
                listener.exitCheckColumnConstraint(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(MySqlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)


    class ReferenceColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceColumnConstraint" ):
                listener.enterReferenceColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceColumnConstraint" ):
                listener.exitReferenceColumnConstraint(self)



    def columnConstraint(self):

        localctx = MySqlParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1483
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.NOT, MySqlParser.NULL_LITERAL, MySqlParser.NULL_SPEC_LITERAL]:
                localctx = MySqlParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1430
                self.nullNotnull()
                pass
            elif token in [MySqlParser.DEFAULT]:
                localctx = MySqlParser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1431
                self.match(MySqlParser.DEFAULT)
                self.state = 1432
                self.defaultValue()
                pass
            elif token in [MySqlParser.VISIBLE]:
                localctx = MySqlParser.VisibilityColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1433
                self.match(MySqlParser.VISIBLE)
                pass
            elif token in [MySqlParser.INVISIBLE]:
                localctx = MySqlParser.VisibilityColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1434
                self.match(MySqlParser.INVISIBLE)
                pass
            elif token in [MySqlParser.ON, MySqlParser.AUTO_INCREMENT]:
                localctx = MySqlParser.AutoIncrementColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1439
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.AUTO_INCREMENT]:
                    self.state = 1435
                    self.match(MySqlParser.AUTO_INCREMENT)
                    pass
                elif token in [MySqlParser.ON]:
                    self.state = 1436
                    self.match(MySqlParser.ON)
                    self.state = 1437
                    self.match(MySqlParser.UPDATE)
                    self.state = 1438
                    self.currentTimestamp()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.KEY, MySqlParser.PRIMARY]:
                localctx = MySqlParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIMARY:
                    self.state = 1441
                    self.match(MySqlParser.PRIMARY)


                self.state = 1444
                self.match(MySqlParser.KEY)
                pass
            elif token in [MySqlParser.UNIQUE]:
                localctx = MySqlParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1445
                self.match(MySqlParser.UNIQUE)
                self.state = 1447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1446
                    self.match(MySqlParser.KEY)


                pass
            elif token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.CommentColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1449
                self.match(MySqlParser.COMMENT)
                self.state = 1450
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.COLUMN_FORMAT]:
                localctx = MySqlParser.FormatColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1451
                self.match(MySqlParser.COLUMN_FORMAT)
                self.state = 1452
                localctx.colformat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DYNAMIC or _la==MySqlParser.FIXED):
                    localctx.colformat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.STORAGE]:
                localctx = MySqlParser.StorageColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1453
                self.match(MySqlParser.STORAGE)
                self.state = 1454
                localctx.storageval = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DISK or _la==MySqlParser.MEMORY):
                    localctx.storageval = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.REFERENCES]:
                localctx = MySqlParser.ReferenceColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1455
                self.referenceDefinition()
                pass
            elif token in [MySqlParser.COLLATE]:
                localctx = MySqlParser.CollateColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1456
                self.match(MySqlParser.COLLATE)
                self.state = 1457
                self.collationName()
                pass
            elif token in [MySqlParser.AS, MySqlParser.GENERATED]:
                localctx = MySqlParser.GeneratedColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.GENERATED:
                    self.state = 1458
                    self.match(MySqlParser.GENERATED)
                    self.state = 1459
                    self.match(MySqlParser.ALWAYS)


                self.state = 1462
                self.match(MySqlParser.AS)
                self.state = 1463
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1464
                self.expression(0)
                self.state = 1465
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORED or _la==MySqlParser.VIRTUAL:
                    self.state = 1466
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.STORED or _la==MySqlParser.VIRTUAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [MySqlParser.SERIAL]:
                localctx = MySqlParser.SerialDefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1469
                self.match(MySqlParser.SERIAL)
                self.state = 1470
                self.match(MySqlParser.DEFAULT)
                self.state = 1471
                self.match(MySqlParser.VALUE)
                pass
            elif token in [MySqlParser.CHECK, MySqlParser.CONSTRAINT]:
                localctx = MySqlParser.CheckColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1472
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 1473
                        localctx.name = self.uid()




                self.state = 1478
                self.match(MySqlParser.CHECK)
                self.state = 1479
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1480
                self.expression(0)
                self.state = 1481
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyTableConstraint" ):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyTableConstraint" ):
                listener.exitUniqueKeyTableConstraint(self)


    class CheckTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableConstraint" ):
                listener.enterCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableConstraint" ):
                listener.exitCheckTableConstraint(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyTableConstraint" ):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyTableConstraint" ):
                listener.exitPrimaryKeyTableConstraint(self)


    class ForeignKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignKeyTableConstraint" ):
                listener.enterForeignKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignKeyTableConstraint" ):
                listener.exitForeignKeyTableConstraint(self)



    def tableConstraint(self):

        localctx = MySqlParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1485
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 1486
                        localctx.name = self.uid()




                self.state = 1491
                self.match(MySqlParser.PRIMARY)
                self.state = 1492
                self.match(MySqlParser.KEY)
                self.state = 1494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 1493
                    localctx.index = self.uid()


                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1496
                    self.indexType()


                self.state = 1499
                self.indexColumnNames()
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                    self.state = 1500
                    self.indexOption()
                    self.state = 1505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1506
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 1507
                        localctx.name = self.uid()




                self.state = 1512
                self.match(MySqlParser.UNIQUE)
                self.state = 1514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 1513
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 1516
                    localctx.index = self.uid()


                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1519
                    self.indexType()


                self.state = 1522
                self.indexColumnNames()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                    self.state = 1523
                    self.indexOption()
                    self.state = 1528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = MySqlParser.ForeignKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1529
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 1530
                        localctx.name = self.uid()




                self.state = 1535
                self.match(MySqlParser.FOREIGN)
                self.state = 1536
                self.match(MySqlParser.KEY)
                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 1537
                    localctx.index = self.uid()


                self.state = 1540
                self.indexColumnNames()
                self.state = 1541
                self.referenceDefinition()
                pass

            elif la_ == 4:
                localctx = MySqlParser.CheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1543
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 1544
                        localctx.name = self.uid()




                self.state = 1549
                self.match(MySqlParser.CHECK)
                self.state = 1550
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1551
                self.expression(0)
                self.state = 1552
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchType = None # Token

        def REFERENCES(self):
            return self.getToken(MySqlParser.REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)


        def MATCH(self):
            return self.getToken(MySqlParser.MATCH, 0)

        def referenceAction(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceActionContext,0)


        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(MySqlParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(MySqlParser.SIMPLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceDefinition" ):
                listener.enterReferenceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceDefinition" ):
                listener.exitReferenceDefinition(self)




    def referenceDefinition(self):

        localctx = MySqlParser.ReferenceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_referenceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.match(MySqlParser.REFERENCES)
            self.state = 1557
            self.tableName()
            self.state = 1559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1558
                self.indexColumnNames()


            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MATCH:
                self.state = 1561
                self.match(MySqlParser.MATCH)
                self.state = 1562
                localctx.matchType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULL or _la==MySqlParser.PARTIAL or _la==MySqlParser.SIMPLE):
                    localctx.matchType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1565
                self.referenceAction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onDelete = None # ReferenceControlTypeContext
            self.onUpdate = None # ReferenceControlTypeContext

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def referenceControlType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ReferenceControlTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ReferenceControlTypeContext,i)


        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceAction" ):
                listener.enterReferenceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceAction" ):
                listener.exitReferenceAction(self)




    def referenceAction(self):

        localctx = MySqlParser.ReferenceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_referenceAction)
        try:
            self.state = 1584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                self.match(MySqlParser.ON)
                self.state = 1569
                self.match(MySqlParser.DELETE)
                self.state = 1570
                localctx.onDelete = self.referenceControlType()
                self.state = 1574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1571
                    self.match(MySqlParser.ON)
                    self.state = 1572
                    self.match(MySqlParser.UPDATE)
                    self.state = 1573
                    localctx.onUpdate = self.referenceControlType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self.match(MySqlParser.ON)
                self.state = 1577
                self.match(MySqlParser.UPDATE)
                self.state = 1578
                localctx.onUpdate = self.referenceControlType()
                self.state = 1582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1579
                    self.match(MySqlParser.ON)
                    self.state = 1580
                    self.match(MySqlParser.DELETE)
                    self.state = 1581
                    localctx.onDelete = self.referenceControlType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceControlTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(MySqlParser.ACTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceControlType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceControlType" ):
                listener.enterReferenceControlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceControlType" ):
                listener.exitReferenceControlType(self)




    def referenceControlType(self):

        localctx = MySqlParser.ReferenceControlTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_referenceControlType)
        try:
            self.state = 1592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.RESTRICT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1586
                self.match(MySqlParser.RESTRICT)
                pass
            elif token in [MySqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1587
                self.match(MySqlParser.CASCADE)
                pass
            elif token in [MySqlParser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1588
                self.match(MySqlParser.SET)
                self.state = 1589
                self.match(MySqlParser.NULL_LITERAL)
                pass
            elif token in [MySqlParser.NO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1590
                self.match(MySqlParser.NO)
                self.state = 1591
                self.match(MySqlParser.ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecialIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialIndexDeclaration" ):
                listener.enterSpecialIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialIndexDeclaration" ):
                listener.exitSpecialIndexDeclaration(self)


    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)



    def indexColumnDefinition(self):

        localctx = MySqlParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.INDEX, MySqlParser.KEY]:
                localctx = MySqlParser.SimpleIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 1595
                    self.uid()


                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1598
                    self.indexType()


                self.state = 1601
                self.indexColumnNames()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                    self.state = 1602
                    self.indexOption()
                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.FULLTEXT, MySqlParser.SPATIAL]:
                localctx = MySqlParser.SpecialIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1608
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 1609
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 1612
                    self.uid()


                self.state = 1615
                self.indexColumnNames()
                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                    self.state = 1616
                    self.indexOption()
                    self.state = 1621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableOptionEngineContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEngine" ):
                listener.enterTableOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEngine" ):
                listener.exitTableOptionEngine(self)


    class TableOptionMaxRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMaxRows" ):
                listener.enterTableOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMaxRows" ):
                listener.exitTableOptionMaxRows(self)


    class TableOptionCollateContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCollate" ):
                listener.enterTableOptionCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCollate" ):
                listener.exitTableOptionCollate(self)


    class TableOptionPersistentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_PERSISTENT(self):
            return self.getToken(MySqlParser.STATS_PERSISTENT, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPersistent" ):
                listener.enterTableOptionPersistent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPersistent" ):
                listener.exitTableOptionPersistent(self)


    class TableOptionTablespaceContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def tablespaceStorage(self):
            return self.getTypedRuleContext(MySqlParser.TablespaceStorageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTablespace" ):
                listener.enterTableOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTablespace" ):
                listener.exitTableOptionTablespace(self)


    class TableOptionPackKeysContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def PACK_KEYS(self):
            return self.getToken(MySqlParser.PACK_KEYS, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPackKeys" ):
                listener.enterTableOptionPackKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPackKeys" ):
                listener.exitTableOptionPackKeys(self)


    class TableOptionPasswordContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPassword" ):
                listener.enterTableOptionPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPassword" ):
                listener.exitTableOptionPassword(self)


    class TableOptionUnionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionUnion" ):
                listener.enterTableOptionUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionUnion" ):
                listener.exitTableOptionUnion(self)


    class TableOptionSamplePageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionSamplePage" ):
                listener.enterTableOptionSamplePage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionSamplePage" ):
                listener.exitTableOptionSamplePage(self)


    class TableOptionCharsetContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCharset" ):
                listener.enterTableOptionCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCharset" ):
                listener.exitTableOptionCharset(self)


    class TableOptionIndexDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionIndexDirectory" ):
                listener.enterTableOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionIndexDirectory" ):
                listener.exitTableOptionIndexDirectory(self)


    class TableOptionTableTypeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE_TYPE(self):
            return self.getToken(MySqlParser.TABLE_TYPE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def tableType(self):
            return self.getTypedRuleContext(MySqlParser.TableTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTableType" ):
                listener.enterTableOptionTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTableType" ):
                listener.exitTableOptionTableType(self)


    class TableOptionKeyBlockSizeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)
        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionKeyBlockSize" ):
                listener.enterTableOptionKeyBlockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionKeyBlockSize" ):
                listener.exitTableOptionKeyBlockSize(self)


    class TableOptionEncryptionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEncryption" ):
                listener.enterTableOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEncryption" ):
                listener.exitTableOptionEncryption(self)


    class TableOptionDataDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDataDirectory" ):
                listener.enterTableOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDataDirectory" ):
                listener.exitTableOptionDataDirectory(self)


    class TableOptionRecalculationContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_AUTO_RECALC(self):
            return self.getToken(MySqlParser.STATS_AUTO_RECALC, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRecalculation" ):
                listener.enterTableOptionRecalculation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRecalculation" ):
                listener.exitTableOptionRecalculation(self)


    class TableOptionAutoIncrementContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAutoIncrement" ):
                listener.enterTableOptionAutoIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAutoIncrement" ):
                listener.exitTableOptionAutoIncrement(self)


    class TableOptionChecksumContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)
        def PAGE_CHECKSUM(self):
            return self.getToken(MySqlParser.PAGE_CHECKSUM, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionChecksum" ):
                listener.enterTableOptionChecksum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionChecksum" ):
                listener.exitTableOptionChecksum(self)


    class TableOptionDelayContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def DELAY_KEY_WRITE(self):
            return self.getToken(MySqlParser.DELAY_KEY_WRITE, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDelay" ):
                listener.enterTableOptionDelay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDelay" ):
                listener.exitTableOptionDelay(self)


    class TableOptionConnectionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionConnection" ):
                listener.enterTableOptionConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionConnection" ):
                listener.exitTableOptionConnection(self)


    class TableOptionCommentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionComment" ):
                listener.enterTableOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionComment" ):
                listener.exitTableOptionComment(self)


    class TableOptionAverageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AVG_ROW_LENGTH(self):
            return self.getToken(MySqlParser.AVG_ROW_LENGTH, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAverage" ):
                listener.enterTableOptionAverage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAverage" ):
                listener.exitTableOptionAverage(self)


    class TableOptionRowFormatContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.rowFormat = None # Token
            self.copyFrom(ctx)

        def ROW_FORMAT(self):
            return self.getToken(MySqlParser.ROW_FORMAT, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def COMPRESSED(self):
            return self.getToken(MySqlParser.COMPRESSED, 0)
        def REDUNDANT(self):
            return self.getToken(MySqlParser.REDUNDANT, 0)
        def COMPACT(self):
            return self.getToken(MySqlParser.COMPACT, 0)
        def ID(self):
            return self.getToken(MySqlParser.ID, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRowFormat" ):
                listener.enterTableOptionRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRowFormat" ):
                listener.exitTableOptionRowFormat(self)


    class TableOptionCompressionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMPRESSION(self):
            return self.getToken(MySqlParser.COMPRESSION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def ID(self):
            return self.getToken(MySqlParser.ID, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCompression" ):
                listener.enterTableOptionCompression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCompression" ):
                listener.exitTableOptionCompression(self)


    class TableOptionInsertMethodContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.insertMethod = None # Token
            self.copyFrom(ctx)

        def INSERT_METHOD(self):
            return self.getToken(MySqlParser.INSERT_METHOD, 0)
        def NO(self):
            return self.getToken(MySqlParser.NO, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionInsertMethod" ):
                listener.enterTableOptionInsertMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionInsertMethod" ):
                listener.exitTableOptionInsertMethod(self)


    class TableOptionMinRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMinRows" ):
                listener.enterTableOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMinRows" ):
                listener.exitTableOptionMinRows(self)



    def tableOption(self):

        localctx = MySqlParser.TableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tableOption)
        self._la = 0 # Token type
        try:
            self.state = 1773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.TableOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.match(MySqlParser.ENGINE)
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1625
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONNECT or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (MySqlParser.ARCHIVE - 722)) | (1 << (MySqlParser.BLACKHOLE - 722)) | (1 << (MySqlParser.CSV - 722)) | (1 << (MySqlParser.FEDERATED - 722)) | (1 << (MySqlParser.INNODB - 722)) | (1 << (MySqlParser.MEMORY - 722)) | (1 << (MySqlParser.MRG_MYISAM - 722)) | (1 << (MySqlParser.MYISAM - 722)) | (1 << (MySqlParser.NDB - 722)) | (1 << (MySqlParser.NDBCLUSTER - 722)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 722)) | (1 << (MySqlParser.TOKUDB - 722)))) != 0) or ((((_la - 1080)) & ~0x3f) == 0 and ((1 << (_la - 1080)) & ((1 << (MySqlParser.STRING_LITERAL - 1080)) | (1 << (MySqlParser.ID - 1080)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1080)))) != 0):
                    self.state = 1628
                    self.engineName()


                pass

            elif la_ == 2:
                localctx = MySqlParser.TableOptionAutoIncrementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1631
                self.match(MySqlParser.AUTO_INCREMENT)
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1632
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1635
                self.decimalLiteral()
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableOptionAverageContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1636
                self.match(MySqlParser.AVG_ROW_LENGTH)
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1637
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1640
                self.decimalLiteral()
                pass

            elif la_ == 4:
                localctx = MySqlParser.TableOptionCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1641
                    self.match(MySqlParser.DEFAULT)


                self.state = 1647
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CHARACTER]:
                    self.state = 1644
                    self.match(MySqlParser.CHARACTER)
                    self.state = 1645
                    self.match(MySqlParser.SET)
                    pass
                elif token in [MySqlParser.CHARSET]:
                    self.state = 1646
                    self.match(MySqlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1649
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1654
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 1652
                    self.charsetName()
                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 1653
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = MySqlParser.TableOptionChecksumContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1656
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHECKSUM or _la==MySqlParser.PAGE_CHECKSUM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1657
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1660
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                localctx = MySqlParser.TableOptionCollateContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1661
                    self.match(MySqlParser.DEFAULT)


                self.state = 1664
                self.match(MySqlParser.COLLATE)
                self.state = 1666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1665
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1668
                self.collationName()
                pass

            elif la_ == 7:
                localctx = MySqlParser.TableOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1669
                self.match(MySqlParser.COMMENT)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1670
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1673
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = MySqlParser.TableOptionCompressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1674
                self.match(MySqlParser.COMPRESSION)
                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1675
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1678
                _la = self._input.LA(1)
                if not(_la==MySqlParser.STRING_LITERAL or _la==MySqlParser.ID):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = MySqlParser.TableOptionConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1679
                self.match(MySqlParser.CONNECTION)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1680
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1683
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 10:
                localctx = MySqlParser.TableOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1684
                self.match(MySqlParser.DATA)
                self.state = 1685
                self.match(MySqlParser.DIRECTORY)
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1686
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1689
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 11:
                localctx = MySqlParser.TableOptionDelayContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1690
                self.match(MySqlParser.DELAY_KEY_WRITE)
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1691
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1694
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = MySqlParser.TableOptionEncryptionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1695
                self.match(MySqlParser.ENCRYPTION)
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1696
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1699
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 13:
                localctx = MySqlParser.TableOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1700
                self.match(MySqlParser.INDEX)
                self.state = 1701
                self.match(MySqlParser.DIRECTORY)
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1702
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1705
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 14:
                localctx = MySqlParser.TableOptionInsertMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1706
                self.match(MySqlParser.INSERT_METHOD)
                self.state = 1708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1707
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1710
                localctx.insertMethod = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FIRST or _la==MySqlParser.LAST or _la==MySqlParser.NO):
                    localctx.insertMethod = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = MySqlParser.TableOptionKeyBlockSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1711
                self.match(MySqlParser.KEY_BLOCK_SIZE)
                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1712
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1715
                self.fileSizeLiteral()
                pass

            elif la_ == 16:
                localctx = MySqlParser.TableOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1716
                self.match(MySqlParser.MAX_ROWS)
                self.state = 1718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1717
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1720
                self.decimalLiteral()
                pass

            elif la_ == 17:
                localctx = MySqlParser.TableOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1721
                self.match(MySqlParser.MIN_ROWS)
                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1722
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1725
                self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = MySqlParser.TableOptionPackKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1726
                self.match(MySqlParser.PACK_KEYS)
                self.state = 1728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1727
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1730
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 19:
                localctx = MySqlParser.TableOptionPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1731
                self.match(MySqlParser.PASSWORD)
                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1732
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1735
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 20:
                localctx = MySqlParser.TableOptionRowFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1736
                self.match(MySqlParser.ROW_FORMAT)
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1737
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1740
                localctx.rowFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or ((((_la - 340)) & ~0x3f) == 0 and ((1 << (_la - 340)) & ((1 << (MySqlParser.COMPACT - 340)) | (1 << (MySqlParser.COMPRESSED - 340)) | (1 << (MySqlParser.DYNAMIC - 340)) | (1 << (MySqlParser.FIXED - 340)))) != 0) or _la==MySqlParser.REDUNDANT or _la==MySqlParser.ID):
                    localctx.rowFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = MySqlParser.TableOptionRecalculationContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1741
                self.match(MySqlParser.STATS_AUTO_RECALC)
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1742
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1745
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 22:
                localctx = MySqlParser.TableOptionPersistentContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1746
                self.match(MySqlParser.STATS_PERSISTENT)
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1747
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1750
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                localctx = MySqlParser.TableOptionSamplePageContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1751
                self.match(MySqlParser.STATS_SAMPLE_PAGES)
                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1752
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1755
                self.decimalLiteral()
                pass

            elif la_ == 24:
                localctx = MySqlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1756
                self.match(MySqlParser.TABLESPACE)
                self.state = 1757
                self.uid()
                self.state = 1759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1758
                    self.tablespaceStorage()


                pass

            elif la_ == 25:
                localctx = MySqlParser.TableOptionTableTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1761
                self.match(MySqlParser.TABLE_TYPE)
                self.state = 1762
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1763
                self.tableType()
                pass

            elif la_ == 26:
                localctx = MySqlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1764
                self.tablespaceStorage()
                pass

            elif la_ == 27:
                localctx = MySqlParser.TableOptionUnionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1765
                self.match(MySqlParser.UNION)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1766
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1769
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1770
                self.tables()
                self.state = 1771
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def ODBC(self):
            return self.getToken(MySqlParser.ODBC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableType" ):
                listener.enterTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableType" ):
                listener.exitTableType(self)




    def tableType(self):

        localctx = MySqlParser.TableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MYSQL or _la==MySqlParser.ODBC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceStorageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tablespaceStorage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceStorage" ):
                listener.enterTablespaceStorage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceStorage" ):
                listener.exitTablespaceStorage(self)




    def tablespaceStorage(self):

        localctx = MySqlParser.TablespaceStorageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tablespaceStorage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.match(MySqlParser.STORAGE)
            self.state = 1778
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DISK or _la==MySqlParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext
            self.subCount = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BY)
            else:
                return self.getToken(MySqlParser.BY, i)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def subpartitionFunctionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.SubpartitionFunctionDefinitionContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def SUBPARTITIONS(self):
            return self.getToken(MySqlParser.SUBPARTITIONS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = MySqlParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(MySqlParser.PARTITION)
            self.state = 1781
            self.match(MySqlParser.BY)
            self.state = 1782
            self.partitionFunctionDefinition()
            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITIONS:
                self.state = 1783
                self.match(MySqlParser.PARTITIONS)
                self.state = 1784
                localctx.count = self.decimalLiteral()


            self.state = 1794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SUBPARTITION:
                self.state = 1787
                self.match(MySqlParser.SUBPARTITION)
                self.state = 1788
                self.match(MySqlParser.BY)
                self.state = 1789
                self.subpartitionFunctionDefinition()
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SUBPARTITIONS:
                    self.state = 1790
                    self.match(MySqlParser.SUBPARTITIONS)
                    self.state = 1791
                    localctx.subCount = self.decimalLiteral()




            self.state = 1807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1796
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1797
                self.partitionDefinition()
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1798
                    self.match(MySqlParser.COMMA)
                    self.state = 1799
                    self.partitionDefinition()
                    self.state = 1804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1805
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionKey" ):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionKey" ):
                listener.exitPartitionFunctionKey(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionHash" ):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionHash" ):
                listener.exitPartitionFunctionHash(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(MySqlParser.LIST, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionList" ):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionList" ):
                listener.exitPartitionFunctionList(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(MySqlParser.RANGE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionRange" ):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionRange" ):
                listener.exitPartitionFunctionRange(self)



    def partitionFunctionDefinition(self):

        localctx = MySqlParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_partitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 1809
                    self.match(MySqlParser.LINEAR)


                self.state = 1812
                self.match(MySqlParser.HASH)
                self.state = 1813
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1814
                self.expression(0)
                self.state = 1815
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = MySqlParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 1817
                    self.match(MySqlParser.LINEAR)


                self.state = 1820
                self.match(MySqlParser.KEY)
                self.state = 1824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ALGORITHM:
                    self.state = 1821
                    self.match(MySqlParser.ALGORITHM)
                    self.state = 1822
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 1823
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ONE_DECIMAL or _la==MySqlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1826
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1827
                self.uidList()
                self.state = 1828
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1830
                self.match(MySqlParser.RANGE)
                self.state = 1840
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LR_BRACKET]:
                    self.state = 1831
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1832
                    self.expression(0)
                    self.state = 1833
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                elif token in [MySqlParser.COLUMNS]:
                    self.state = 1835
                    self.match(MySqlParser.COLUMNS)
                    self.state = 1836
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1837
                    self.uidList()
                    self.state = 1838
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = MySqlParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1842
                self.match(MySqlParser.LIST)
                self.state = 1852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LR_BRACKET]:
                    self.state = 1843
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1844
                    self.expression(0)
                    self.state = 1845
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                elif token in [MySqlParser.COLUMNS]:
                    self.state = 1847
                    self.match(MySqlParser.COLUMNS)
                    self.state = 1848
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1849
                    self.uidList()
                    self.state = 1850
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_subpartitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionHash" ):
                listener.enterSubPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionHash" ):
                listener.exitSubPartitionFunctionHash(self)


    class SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionKey" ):
                listener.enterSubPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionKey" ):
                listener.exitSubPartitionFunctionKey(self)



    def subpartitionFunctionDefinition(self):

        localctx = MySqlParser.SubpartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_subpartitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SubPartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 1856
                    self.match(MySqlParser.LINEAR)


                self.state = 1859
                self.match(MySqlParser.HASH)
                self.state = 1860
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1861
                self.expression(0)
                self.state = 1862
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = MySqlParser.SubPartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 1864
                    self.match(MySqlParser.LINEAR)


                self.state = 1867
                self.match(MySqlParser.KEY)
                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ALGORITHM:
                    self.state = 1868
                    self.match(MySqlParser.ALGORITHM)
                    self.state = 1869
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 1870
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ONE_DECIMAL or _la==MySqlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1873
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1874
                self.uidList()
                self.state = 1875
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionComparisonContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def LESS(self):
            return self.getToken(MySqlParser.LESS, 0)
        def THAN(self):
            return self.getToken(MySqlParser.THAN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionComparison" ):
                listener.enterPartitionComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionComparison" ):
                listener.exitPartitionComparison(self)


    class PartitionListAtomContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListAtom" ):
                listener.enterPartitionListAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListAtom" ):
                listener.exitPartitionListAtom(self)


    class PartitionListVectorContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerVector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerVectorContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerVectorContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListVector" ):
                listener.enterPartitionListVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListVector" ):
                listener.exitPartitionListVector(self)


    class PartitionSimpleContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSimple" ):
                listener.enterPartitionSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSimple" ):
                listener.exitPartitionSimple(self)



    def partitionDefinition(self):

        localctx = MySqlParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PartitionComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1879
                self.match(MySqlParser.PARTITION)
                self.state = 1880
                self.uid()
                self.state = 1881
                self.match(MySqlParser.VALUES)
                self.state = 1882
                self.match(MySqlParser.LESS)
                self.state = 1883
                self.match(MySqlParser.THAN)
                self.state = 1884
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1885
                self.partitionDefinerAtom()
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1886
                    self.match(MySqlParser.COMMA)
                    self.state = 1887
                    self.partitionDefinerAtom()
                    self.state = 1892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1893
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & ((1 << (MySqlParser.COMMENT - 338)) | (1 << (MySqlParser.DATA - 338)) | (1 << (MySqlParser.ENGINE - 338)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (MySqlParser.MAX_ROWS - 462)) | (1 << (MySqlParser.MIN_ROWS - 462)) | (1 << (MySqlParser.NODEGROUP - 462)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 1894
                    self.partitionOption()
                    self.state = 1899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 1900
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1901
                    self.subpartitionDefinition()
                    self.state = 1906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 1902
                        self.match(MySqlParser.COMMA)
                        self.state = 1903
                        self.subpartitionDefinition()
                        self.state = 1908
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1909
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                localctx = MySqlParser.PartitionComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1913
                self.match(MySqlParser.PARTITION)
                self.state = 1914
                self.uid()
                self.state = 1915
                self.match(MySqlParser.VALUES)
                self.state = 1916
                self.match(MySqlParser.LESS)
                self.state = 1917
                self.match(MySqlParser.THAN)
                self.state = 1918
                self.partitionDefinerAtom()
                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & ((1 << (MySqlParser.COMMENT - 338)) | (1 << (MySqlParser.DATA - 338)) | (1 << (MySqlParser.ENGINE - 338)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (MySqlParser.MAX_ROWS - 462)) | (1 << (MySqlParser.MIN_ROWS - 462)) | (1 << (MySqlParser.NODEGROUP - 462)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 1919
                    self.partitionOption()
                    self.state = 1924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 1925
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1926
                    self.subpartitionDefinition()
                    self.state = 1931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 1927
                        self.match(MySqlParser.COMMA)
                        self.state = 1928
                        self.subpartitionDefinition()
                        self.state = 1933
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1934
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 3:
                localctx = MySqlParser.PartitionListAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1938
                self.match(MySqlParser.PARTITION)
                self.state = 1939
                self.uid()
                self.state = 1940
                self.match(MySqlParser.VALUES)
                self.state = 1941
                self.match(MySqlParser.IN)
                self.state = 1942
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1943
                self.partitionDefinerAtom()
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1944
                    self.match(MySqlParser.COMMA)
                    self.state = 1945
                    self.partitionDefinerAtom()
                    self.state = 1950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1951
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & ((1 << (MySqlParser.COMMENT - 338)) | (1 << (MySqlParser.DATA - 338)) | (1 << (MySqlParser.ENGINE - 338)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (MySqlParser.MAX_ROWS - 462)) | (1 << (MySqlParser.MIN_ROWS - 462)) | (1 << (MySqlParser.NODEGROUP - 462)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 1952
                    self.partitionOption()
                    self.state = 1957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 1958
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1959
                    self.subpartitionDefinition()
                    self.state = 1964
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 1960
                        self.match(MySqlParser.COMMA)
                        self.state = 1961
                        self.subpartitionDefinition()
                        self.state = 1966
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1967
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 4:
                localctx = MySqlParser.PartitionListVectorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1971
                self.match(MySqlParser.PARTITION)
                self.state = 1972
                self.uid()
                self.state = 1973
                self.match(MySqlParser.VALUES)
                self.state = 1974
                self.match(MySqlParser.IN)
                self.state = 1975
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1976
                self.partitionDefinerVector()
                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1977
                    self.match(MySqlParser.COMMA)
                    self.state = 1978
                    self.partitionDefinerVector()
                    self.state = 1983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1984
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & ((1 << (MySqlParser.COMMENT - 338)) | (1 << (MySqlParser.DATA - 338)) | (1 << (MySqlParser.ENGINE - 338)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (MySqlParser.MAX_ROWS - 462)) | (1 << (MySqlParser.MIN_ROWS - 462)) | (1 << (MySqlParser.NODEGROUP - 462)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 1985
                    self.partitionOption()
                    self.state = 1990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 1991
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1992
                    self.subpartitionDefinition()
                    self.state = 1997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 1993
                        self.match(MySqlParser.COMMA)
                        self.state = 1994
                        self.subpartitionDefinition()
                        self.state = 1999
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2000
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 5:
                localctx = MySqlParser.PartitionSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2004
                self.match(MySqlParser.PARTITION)
                self.state = 2005
                self.uid()
                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & ((1 << (MySqlParser.COMMENT - 338)) | (1 << (MySqlParser.DATA - 338)) | (1 << (MySqlParser.ENGINE - 338)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (MySqlParser.MAX_ROWS - 462)) | (1 << (MySqlParser.MIN_ROWS - 462)) | (1 << (MySqlParser.NODEGROUP - 462)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 2006
                    self.partitionOption()
                    self.state = 2011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 2012
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2013
                    self.subpartitionDefinition()
                    self.state = 2018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 2014
                        self.match(MySqlParser.COMMA)
                        self.state = 2015
                        self.subpartitionDefinition()
                        self.state = 2020
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2021
                    self.match(MySqlParser.RR_BRACKET)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def MAXVALUE(self):
            return self.getToken(MySqlParser.MAXVALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinerAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerAtom" ):
                listener.enterPartitionDefinerAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerAtom" ):
                listener.exitPartitionDefinerAtom(self)




    def partitionDefinerAtom(self):

        localctx = MySqlParser.PartitionDefinerAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_partitionDefinerAtom)
        try:
            self.state = 2030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2027
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2028
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2029
                self.match(MySqlParser.MAXVALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerVectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinerVector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerVector" ):
                listener.enterPartitionDefinerVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerVector" ):
                listener.exitPartitionDefinerVector(self)




    def partitionDefinerVector(self):

        localctx = MySqlParser.PartitionDefinerVectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_partitionDefinerVector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.match(MySqlParser.LR_BRACKET)
            self.state = 2033
            self.partitionDefinerAtom()
            self.state = 2036 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2034
                self.match(MySqlParser.COMMA)
                self.state = 2035
                self.partitionDefinerAtom()
                self.state = 2038 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.COMMA):
                    break

            self.state = 2040
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)




    def subpartitionDefinition(self):

        localctx = MySqlParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self.match(MySqlParser.SUBPARTITION)
            self.state = 2043
            self.uid()
            self.state = 2047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & ((1 << (MySqlParser.COMMENT - 338)) | (1 << (MySqlParser.DATA - 338)) | (1 << (MySqlParser.ENGINE - 338)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (MySqlParser.MAX_ROWS - 462)) | (1 << (MySqlParser.MIN_ROWS - 462)) | (1 << (MySqlParser.NODEGROUP - 462)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                self.state = 2044
                self.partitionOption()
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionOptionCommentContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionComment" ):
                listener.enterPartitionOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionComment" ):
                listener.exitPartitionOptionComment(self)


    class PartitionOptionNodeGroupContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.nodegroup = None # UidContext
            self.copyFrom(ctx)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionNodeGroup" ):
                listener.enterPartitionOptionNodeGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionNodeGroup" ):
                listener.exitPartitionOptionNodeGroup(self)


    class PartitionOptionIndexDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.indexDirectory = None # Token
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionIndexDirectory" ):
                listener.enterPartitionOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionIndexDirectory" ):
                listener.exitPartitionOptionIndexDirectory(self)


    class PartitionOptionMaxRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.maxRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMaxRows" ):
                listener.enterPartitionOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMaxRows" ):
                listener.exitPartitionOptionMaxRows(self)


    class PartitionOptionTablespaceContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.tablespace = None # UidContext
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionTablespace" ):
                listener.enterPartitionOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionTablespace" ):
                listener.exitPartitionOptionTablespace(self)


    class PartitionOptionEngineContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionEngine" ):
                listener.enterPartitionOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionEngine" ):
                listener.exitPartitionOptionEngine(self)


    class PartitionOptionMinRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.minRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMinRows" ):
                listener.enterPartitionOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMinRows" ):
                listener.exitPartitionOptionMinRows(self)


    class PartitionOptionDataDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.dataDirectory = None # Token
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionDataDirectory" ):
                listener.enterPartitionOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionDataDirectory" ):
                listener.exitPartitionOptionDataDirectory(self)



    def partitionOption(self):

        localctx = MySqlParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 2098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DEFAULT, MySqlParser.ENGINE, MySqlParser.STORAGE]:
                localctx = MySqlParser.PartitionOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 2050
                    self.match(MySqlParser.DEFAULT)


                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORAGE:
                    self.state = 2053
                    self.match(MySqlParser.STORAGE)


                self.state = 2056
                self.match(MySqlParser.ENGINE)
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2057
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2060
                self.engineName()
                pass
            elif token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.PartitionOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2061
                self.match(MySqlParser.COMMENT)
                self.state = 2063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2062
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2065
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DATA]:
                localctx = MySqlParser.PartitionOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2066
                self.match(MySqlParser.DATA)
                self.state = 2067
                self.match(MySqlParser.DIRECTORY)
                self.state = 2069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2068
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2071
                localctx.dataDirectory = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.INDEX]:
                localctx = MySqlParser.PartitionOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2072
                self.match(MySqlParser.INDEX)
                self.state = 2073
                self.match(MySqlParser.DIRECTORY)
                self.state = 2075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2074
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2077
                localctx.indexDirectory = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.MAX_ROWS]:
                localctx = MySqlParser.PartitionOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2078
                self.match(MySqlParser.MAX_ROWS)
                self.state = 2080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2079
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2082
                localctx.maxRows = self.decimalLiteral()
                pass
            elif token in [MySqlParser.MIN_ROWS]:
                localctx = MySqlParser.PartitionOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2083
                self.match(MySqlParser.MIN_ROWS)
                self.state = 2085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2084
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2087
                localctx.minRows = self.decimalLiteral()
                pass
            elif token in [MySqlParser.TABLESPACE]:
                localctx = MySqlParser.PartitionOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2088
                self.match(MySqlParser.TABLESPACE)
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2089
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2092
                localctx.tablespace = self.uid()
                pass
            elif token in [MySqlParser.NODEGROUP]:
                localctx = MySqlParser.PartitionOptionNodeGroupContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2093
                self.match(MySqlParser.NODEGROUP)
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2094
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2097
                localctx.nodegroup = self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterDatabase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUpgradeNameContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def NAME(self):
            return self.getToken(MySqlParser.NAME, 0)
        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUpgradeName" ):
                listener.enterAlterUpgradeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUpgradeName" ):
                listener.exitAlterUpgradeName(self)


    class AlterSimpleDatabaseContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDatabaseOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSimpleDatabase" ):
                listener.enterAlterSimpleDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSimpleDatabase" ):
                listener.exitAlterSimpleDatabase(self)



    def alterDatabase(self):

        localctx = MySqlParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alterDatabase)
        self._la = 0 # Token type
        try:
            self.state = 2118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterSimpleDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2100
                self.match(MySqlParser.ALTER)
                self.state = 2101
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2102
                    self.uid()


                self.state = 2106 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2105
                    self.createDatabaseOption()
                    self.state = 2108 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.CHARACTER) | (1 << MySqlParser.COLLATE) | (1 << MySqlParser.DEFAULT))) != 0) or _la==MySqlParser.CHARSET):
                        break

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterUpgradeNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2110
                self.match(MySqlParser.ALTER)
                self.state = 2111
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2112
                self.uid()
                self.state = 2113
                self.match(MySqlParser.UPGRADE)
                self.state = 2114
                self.match(MySqlParser.DATA)
                self.state = 2115
                self.match(MySqlParser.DIRECTORY)
                self.state = 2116
                self.match(MySqlParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(MySqlParser.ScheduleExpressionContext,0)


        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def enableType(self):
            return self.getTypedRuleContext(MySqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)




    def alterEvent(self):

        localctx = MySqlParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.match(MySqlParser.ALTER)
            self.state = 2122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 2121
                self.ownerStatement()


            self.state = 2124
            self.match(MySqlParser.EVENT)
            self.state = 2125
            self.fullId()
            self.state = 2129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 2126
                self.match(MySqlParser.ON)
                self.state = 2127
                self.match(MySqlParser.SCHEDULE)
                self.state = 2128
                self.scheduleExpression()


            self.state = 2137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 2131
                self.match(MySqlParser.ON)
                self.state = 2132
                self.match(MySqlParser.COMPLETION)
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 2133
                    self.match(MySqlParser.NOT)


                self.state = 2136
                self.match(MySqlParser.PRESERVE)


            self.state = 2142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 2139
                self.match(MySqlParser.RENAME)
                self.state = 2140
                self.match(MySqlParser.TO)
                self.state = 2141
                self.fullId()


            self.state = 2145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DISABLE or _la==MySqlParser.ENABLE:
                self.state = 2144
                self.enableType()


            self.state = 2149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 2147
                self.match(MySqlParser.COMMENT)
                self.state = 2148
                self.match(MySqlParser.STRING_LITERAL)


            self.state = 2153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 2151
                self.match(MySqlParser.DO)
                self.state = 2152
                self.routineBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterFunction" ):
                listener.enterAlterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterFunction" ):
                listener.exitAlterFunction(self)




    def alterFunction(self):

        localctx = MySqlParser.AlterFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alterFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            self.match(MySqlParser.ALTER)
            self.state = 2156
            self.match(MySqlParser.FUNCTION)
            self.state = 2157
            self.fullId()
            self.state = 2161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DETERMINISTIC or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (MySqlParser.MODIFIES - 103)) | (1 << (MySqlParser.NOT - 103)) | (1 << (MySqlParser.READS - 103)) | (1 << (MySqlParser.SQL - 103)))) != 0) or _la==MySqlParser.COMMENT or _la==MySqlParser.CONTAINS or _la==MySqlParser.LANGUAGE or _la==MySqlParser.NO:
                self.state = 2158
                self.routineOption()
                self.state = 2163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterInstanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def INSTANCE(self):
            return self.getToken(MySqlParser.INSTANCE, 0)

        def ROTATE(self):
            return self.getToken(MySqlParser.ROTATE, 0)

        def INNODB(self):
            return self.getToken(MySqlParser.INNODB, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterInstance" ):
                listener.enterAlterInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterInstance" ):
                listener.exitAlterInstance(self)




    def alterInstance(self):

        localctx = MySqlParser.AlterInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterInstance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.match(MySqlParser.ALTER)
            self.state = 2165
            self.match(MySqlParser.INSTANCE)
            self.state = 2166
            self.match(MySqlParser.ROTATE)
            self.state = 2167
            self.match(MySqlParser.INNODB)
            self.state = 2168
            self.match(MySqlParser.MASTER)
            self.state = 2169
            self.match(MySqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)




    def alterLogfileGroup(self):

        localctx = MySqlParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(MySqlParser.ALTER)
            self.state = 2172
            self.match(MySqlParser.LOGFILE)
            self.state = 2173
            self.match(MySqlParser.GROUP)
            self.state = 2174
            self.uid()
            self.state = 2175
            self.match(MySqlParser.ADD)
            self.state = 2176
            self.match(MySqlParser.UNDOFILE)
            self.state = 2177
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 2183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 2178
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2179
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2182
                self.fileSizeLiteral()


            self.state = 2186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 2185
                self.match(MySqlParser.WAIT)


            self.state = 2188
            self.match(MySqlParser.ENGINE)
            self.state = 2190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 2189
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 2192
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterProcedure" ):
                listener.enterAlterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterProcedure" ):
                listener.exitAlterProcedure(self)




    def alterProcedure(self):

        localctx = MySqlParser.AlterProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.match(MySqlParser.ALTER)
            self.state = 2195
            self.match(MySqlParser.PROCEDURE)
            self.state = 2196
            self.fullId()
            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DETERMINISTIC or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (MySqlParser.MODIFIES - 103)) | (1 << (MySqlParser.NOT - 103)) | (1 << (MySqlParser.READS - 103)) | (1 << (MySqlParser.SQL - 103)))) != 0) or _la==MySqlParser.COMMENT or _la==MySqlParser.CONTAINS or _la==MySqlParser.LANGUAGE or _la==MySqlParser.NO:
                self.state = 2197
                self.routineOption()
                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)




    def alterServer(self):

        localctx = MySqlParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2203
            self.match(MySqlParser.ALTER)
            self.state = 2204
            self.match(MySqlParser.SERVER)
            self.state = 2205
            self.uid()
            self.state = 2206
            self.match(MySqlParser.OPTIONS)
            self.state = 2207
            self.match(MySqlParser.LR_BRACKET)
            self.state = 2208
            self.serverOption()
            self.state = 2213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 2209
                self.match(MySqlParser.COMMA)
                self.state = 2210
                self.serverOption()
                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2216
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def alterSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AlterSpecificationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AlterSpecificationContext,i)


        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)


        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)




    def alterTable(self):

        localctx = MySqlParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(MySqlParser.ALTER)
            self.state = 2220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE:
                self.state = 2219
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2222
                self.match(MySqlParser.IGNORE)


            self.state = 2225
            self.match(MySqlParser.TABLE)
            self.state = 2226
            self.tableName()
            self.state = 2235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2227
                self.alterSpecification()
                self.state = 2232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2228
                    self.match(MySqlParser.COMMA)
                    self.state = 2229
                    self.alterSpecification()
                    self.state = 2234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2237
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.objectAction = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)




    def alterTablespace(self):

        localctx = MySqlParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            self.match(MySqlParser.ALTER)
            self.state = 2241
            self.match(MySqlParser.TABLESPACE)
            self.state = 2242
            self.uid()
            self.state = 2243
            localctx.objectAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.ADD or _la==MySqlParser.DROP):
                localctx.objectAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2244
            self.match(MySqlParser.DATAFILE)
            self.state = 2245
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 2249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 2246
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 2247
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2248
                self.fileSizeLiteral()


            self.state = 2252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 2251
                self.match(MySqlParser.WAIT)


            self.state = 2254
            self.match(MySqlParser.ENGINE)
            self.state = 2256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 2255
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 2258
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOpt = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)




    def alterView(self):

        localctx = MySqlParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self.match(MySqlParser.ALTER)
            self.state = 2264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALGORITHM:
                self.state = 2261
                self.match(MySqlParser.ALGORITHM)
                self.state = 2262
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2263
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MERGE or _la==MySqlParser.TEMPTABLE or _la==MySqlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 2266
                self.ownerStatement()


            self.state = 2272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SQL:
                self.state = 2269
                self.match(MySqlParser.SQL)
                self.state = 2270
                self.match(MySqlParser.SECURITY)
                self.state = 2271
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2274
            self.match(MySqlParser.VIEW)
            self.state = 2275
            self.fullId()
            self.state = 2280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 2276
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2277
                self.uidList()
                self.state = 2278
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2282
            self.match(MySqlParser.AS)
            self.state = 2283
            self.selectStatement()
            self.state = 2290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 2284
                self.match(MySqlParser.WITH)
                self.state = 2286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL:
                    self.state = 2285
                    localctx.checkOpt = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL):
                        localctx.checkOpt = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2288
                self.match(MySqlParser.CHECK)
                self.state = 2289
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterSpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterByDisableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDisableKeys" ):
                listener.enterAlterByDisableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDisableKeys" ):
                listener.exitAlterByDisableKeys(self)


    class AlterByDefaultCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDefaultCharset" ):
                listener.enterAlterByDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDefaultCharset" ):
                listener.exitAlterByDefaultCharset(self)


    class AlterByRenameColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameColumn" ):
                listener.enterAlterByRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameColumn" ):
                listener.exitAlterByRenameColumn(self)


    class AlterByConvertCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)
        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByConvertCharset" ):
                listener.enterAlterByConvertCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByConvertCharset" ):
                listener.exitAlterByConvertCharset(self)


    class AlterByAddPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPartition" ):
                listener.enterAlterByAddPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPartition" ):
                listener.exitAlterByAddPartition(self)


    class AlterByAddForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddForeignKey" ):
                listener.enterAlterByAddForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddForeignKey" ):
                listener.exitAlterByAddForeignKey(self)


    class AlterByRenameIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameIndex" ):
                listener.enterAlterByRenameIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameIndex" ):
                listener.exitAlterByRenameIndex(self)


    class AlterByRemovePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(MySqlParser.REMOVE, 0)
        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRemovePartitioning" ):
                listener.enterAlterByRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRemovePartitioning" ):
                listener.exitAlterByRemovePartitioning(self)


    class AlterByRenameContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.renameFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRename" ):
                listener.enterAlterByRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRename" ):
                listener.exitAlterByRename(self)


    class AlterByOptimizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(MySqlParser.OPTIMIZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOptimizePartition" ):
                listener.enterAlterByOptimizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOptimizePartition" ):
                listener.exitAlterByOptimizePartition(self)


    class AlterByImportTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportTablespace" ):
                listener.enterAlterByImportTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportTablespace" ):
                listener.exitAlterByImportTablespace(self)


    class AlterByCoalescePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(MySqlParser.COALESCE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCoalescePartition" ):
                listener.enterAlterByCoalescePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCoalescePartition" ):
                listener.exitAlterByCoalescePartition(self)


    class AlterByDropConstraintCheckContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropConstraintCheck" ):
                listener.enterAlterByDropConstraintCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropConstraintCheck" ):
                listener.exitAlterByDropConstraintCheck(self)


    class AlterByAddColumnsContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumns" ):
                listener.enterAlterByAddColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumns" ):
                listener.exitAlterByAddColumns(self)


    class AlterByAlterIndexVisibilityContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)
        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAlterIndexVisibility" ):
                listener.enterAlterByAlterIndexVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAlterIndexVisibility" ):
                listener.exitAlterByAlterIndexVisibility(self)


    class AlterByDropForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropForeignKey" ):
                listener.enterAlterByDropForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropForeignKey" ):
                listener.exitAlterByDropForeignKey(self)


    class AlterByAddCheckTableConstraintContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddCheckTableConstraint" ):
                listener.enterAlterByAddCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddCheckTableConstraint" ):
                listener.exitAlterByAddCheckTableConstraint(self)


    class AlterByRebuildPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REBUILD(self):
            return self.getToken(MySqlParser.REBUILD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRebuildPartition" ):
                listener.enterAlterByRebuildPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRebuildPartition" ):
                listener.exitAlterByRebuildPartition(self)


    class AlterByUpgradePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)
        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByUpgradePartitioning" ):
                listener.enterAlterByUpgradePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByUpgradePartitioning" ):
                listener.exitAlterByUpgradePartitioning(self)


    class AlterByRepairPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRepairPartition" ):
                listener.enterAlterByRepairPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRepairPartition" ):
                listener.exitAlterByRepairPartition(self)


    class AlterByExchangePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def EXCHANGE(self):
            return self.getToken(MySqlParser.EXCHANGE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.WITH)
            else:
                return self.getToken(MySqlParser.WITH, i)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByExchangePartition" ):
                listener.enterAlterByExchangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByExchangePartition" ):
                listener.exitAlterByExchangePartition(self)


    class AlterByAddIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddIndex" ):
                listener.enterAlterByAddIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddIndex" ):
                listener.exitAlterByAddIndex(self)


    class AlterByDropColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropColumn" ):
                listener.enterAlterByDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropColumn" ):
                listener.exitAlterByDropColumn(self)


    class AlterByImportPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportPartition" ):
                listener.enterAlterByImportPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportPartition" ):
                listener.exitAlterByImportPartition(self)


    class AlterByChangeDefaultContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeDefault" ):
                listener.enterAlterByChangeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeDefault" ):
                listener.exitAlterByChangeDefault(self)


    class AlterByForceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FORCE(self):
            return self.getToken(MySqlParser.FORCE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByForce" ):
                listener.enterAlterByForce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByForce" ):
                listener.exitAlterByForce(self)


    class AlterByDropPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPartition" ):
                listener.enterAlterByDropPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPartition" ):
                listener.exitAlterByDropPartition(self)


    class AlterByAddSpecialIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.keyType = None # Token
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddSpecialIndex" ):
                listener.enterAlterByAddSpecialIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddSpecialIndex" ):
                listener.exitAlterByAddSpecialIndex(self)


    class AlterByModifyColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(MySqlParser.MODIFY, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByModifyColumn" ):
                listener.enterAlterByModifyColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByModifyColumn" ):
                listener.exitAlterByModifyColumn(self)


    class AlterByTableOptionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTableOption" ):
                listener.enterAlterByTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTableOption" ):
                listener.exitAlterByTableOption(self)


    class AlterByDropPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPrimaryKey" ):
                listener.enterAlterByDropPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPrimaryKey" ):
                listener.exitAlterByDropPrimaryKey(self)


    class AlterByLockContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.lockType = None # Token
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)
        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByLock" ):
                listener.enterAlterByLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByLock" ):
                listener.exitAlterByLock(self)


    class AlterByDiscardPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardPartition" ):
                listener.enterAlterByDiscardPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardPartition" ):
                listener.exitAlterByDiscardPartition(self)


    class AlterByDiscardTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardTablespace" ):
                listener.enterAlterByDiscardTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardTablespace" ):
                listener.exitAlterByDiscardTablespace(self)


    class AlterByValidateContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByValidate" ):
                listener.enterAlterByValidate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByValidate" ):
                listener.exitAlterByValidate(self)


    class AlterByAddPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPrimaryKey" ):
                listener.enterAlterByAddPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPrimaryKey" ):
                listener.exitAlterByAddPrimaryKey(self)


    class AlterByCheckPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCheckPartition" ):
                listener.enterAlterByCheckPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCheckPartition" ):
                listener.exitAlterByCheckPartition(self)


    class AlterByEnableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByEnableKeys" ):
                listener.enterAlterByEnableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByEnableKeys" ):
                listener.exitAlterByEnableKeys(self)


    class AlterByReorganizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REORGANIZE(self):
            return self.getToken(MySqlParser.REORGANIZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByReorganizePartition" ):
                listener.enterAlterByReorganizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByReorganizePartition" ):
                listener.exitAlterByReorganizePartition(self)


    class AlterBySetAlgorithmContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)
        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterBySetAlgorithm" ):
                listener.enterAlterBySetAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterBySetAlgorithm" ):
                listener.exitAlterBySetAlgorithm(self)


    class AlterByAnalyzePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(MySqlParser.ANALYZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAnalyzePartition" ):
                listener.enterAlterByAnalyzePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAnalyzePartition" ):
                listener.exitAlterByAnalyzePartition(self)


    class AlterByChangeColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.afterColumn = None # UidContext
            self.copyFrom(ctx)

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)
        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeColumn" ):
                listener.enterAlterByChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeColumn" ):
                listener.exitAlterByChangeColumn(self)


    class AlterByAddUniqueKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddUniqueKey" ):
                listener.enterAlterByAddUniqueKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddUniqueKey" ):
                listener.exitAlterByAddUniqueKey(self)


    class AlterByTruncatePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTruncatePartition" ):
                listener.enterAlterByTruncatePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTruncatePartition" ):
                listener.exitAlterByTruncatePartition(self)


    class AlterByDropIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropIndex" ):
                listener.enterAlterByDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropIndex" ):
                listener.exitAlterByDropIndex(self)


    class AlterByAddColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumn" ):
                listener.enterAlterByAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumn" ):
                listener.exitAlterByAddColumn(self)


    class AlterByOrderContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOrder" ):
                listener.enterAlterByOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOrder" ):
                listener.exitAlterByOrder(self)



    def alterSpecification(self):

        localctx = MySqlParser.AlterSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterByTableOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2292
                self.tableOption()
                self.state = 2299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2294
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.COMMA:
                            self.state = 2293
                            self.match(MySqlParser.COMMA)


                        self.state = 2296
                        self.tableOption() 
                    self.state = 2301
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterByAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2302
                self.match(MySqlParser.ADD)
                self.state = 2304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2303
                    self.match(MySqlParser.COLUMN)


                self.state = 2306
                self.uid()
                self.state = 2307
                self.columnDefinition()
                self.state = 2311
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2308
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2309
                    self.match(MySqlParser.AFTER)
                    self.state = 2310
                    self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PARTITION, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUSMINUS, MySqlParser.LR_BRACKET, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                localctx = MySqlParser.AlterByAddColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2313
                self.match(MySqlParser.ADD)
                self.state = 2315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2314
                    self.match(MySqlParser.COLUMN)


                self.state = 2317
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2318
                self.uid()
                self.state = 2319
                self.columnDefinition()
                self.state = 2326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2320
                    self.match(MySqlParser.COMMA)
                    self.state = 2321
                    self.uid()
                    self.state = 2322
                    self.columnDefinition()
                    self.state = 2328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2329
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.AlterByAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2331
                self.match(MySqlParser.ADD)
                self.state = 2332
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 2333
                    self.uid()


                self.state = 2337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2336
                    self.indexType()


                self.state = 2339
                self.indexColumnNames()
                self.state = 2343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                    self.state = 2340
                    self.indexOption()
                    self.state = 2345
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = MySqlParser.AlterByAddPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2346
                self.match(MySqlParser.ADD)
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2347
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 2348
                        localctx.name = self.uid()




                self.state = 2353
                self.match(MySqlParser.PRIMARY)
                self.state = 2354
                self.match(MySqlParser.KEY)
                self.state = 2356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 2355
                    localctx.index = self.uid()


                self.state = 2359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2358
                    self.indexType()


                self.state = 2361
                self.indexColumnNames()
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                    self.state = 2362
                    self.indexOption()
                    self.state = 2367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                localctx = MySqlParser.AlterByAddUniqueKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2368
                self.match(MySqlParser.ADD)
                self.state = 2373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2369
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 2370
                        localctx.name = self.uid()




                self.state = 2375
                self.match(MySqlParser.UNIQUE)
                self.state = 2377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 2376
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 2379
                    localctx.indexName = self.uid()


                self.state = 2383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2382
                    self.indexType()


                self.state = 2385
                self.indexColumnNames()
                self.state = 2389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                    self.state = 2386
                    self.indexOption()
                    self.state = 2391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                localctx = MySqlParser.AlterByAddSpecialIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2392
                self.match(MySqlParser.ADD)
                self.state = 2393
                localctx.keyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL):
                    localctx.keyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 2394
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 2397
                    self.uid()


                self.state = 2400
                self.indexColumnNames()
                self.state = 2404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE:
                    self.state = 2401
                    self.indexOption()
                    self.state = 2406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = MySqlParser.AlterByAddForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2407
                self.match(MySqlParser.ADD)
                self.state = 2412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2408
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 2409
                        localctx.name = self.uid()




                self.state = 2414
                self.match(MySqlParser.FOREIGN)
                self.state = 2415
                self.match(MySqlParser.KEY)
                self.state = 2417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 2416
                    localctx.indexName = self.uid()


                self.state = 2419
                self.indexColumnNames()
                self.state = 2420
                self.referenceDefinition()
                pass

            elif la_ == 9:
                localctx = MySqlParser.AlterByAddCheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2422
                self.match(MySqlParser.ADD)
                self.state = 2427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2423
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                        self.state = 2424
                        localctx.name = self.uid()




                self.state = 2429
                self.match(MySqlParser.CHECK)
                self.state = 2430
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2431
                self.expression(0)
                self.state = 2432
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.AlterBySetAlgorithmContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2434
                self.match(MySqlParser.ALGORITHM)
                self.state = 2436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2435
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2438
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                localctx = MySqlParser.AlterByChangeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2439
                self.match(MySqlParser.ALTER)
                self.state = 2441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2440
                    self.match(MySqlParser.COLUMN)


                self.state = 2443
                self.uid()
                self.state = 2449
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.SET]:
                    self.state = 2444
                    self.match(MySqlParser.SET)
                    self.state = 2445
                    self.match(MySqlParser.DEFAULT)
                    self.state = 2446
                    self.defaultValue()
                    pass
                elif token in [MySqlParser.DROP]:
                    self.state = 2447
                    self.match(MySqlParser.DROP)
                    self.state = 2448
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = MySqlParser.AlterByChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2451
                self.match(MySqlParser.CHANGE)
                self.state = 2453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2452
                    self.match(MySqlParser.COLUMN)


                self.state = 2455
                localctx.oldColumn = self.uid()
                self.state = 2456
                localctx.newColumn = self.uid()
                self.state = 2457
                self.columnDefinition()
                self.state = 2461
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2458
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2459
                    self.match(MySqlParser.AFTER)
                    self.state = 2460
                    localctx.afterColumn = self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PARTITION, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUSMINUS, MySqlParser.LR_BRACKET, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 13:
                localctx = MySqlParser.AlterByRenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2463
                self.match(MySqlParser.RENAME)
                self.state = 2464
                self.match(MySqlParser.COLUMN)
                self.state = 2465
                localctx.oldColumn = self.uid()
                self.state = 2466
                self.match(MySqlParser.TO)
                self.state = 2467
                localctx.newColumn = self.uid()
                pass

            elif la_ == 14:
                localctx = MySqlParser.AlterByLockContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2469
                self.match(MySqlParser.LOCK)
                self.state = 2471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2470
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2473
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = MySqlParser.AlterByModifyColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2474
                self.match(MySqlParser.MODIFY)
                self.state = 2476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2475
                    self.match(MySqlParser.COLUMN)


                self.state = 2478
                self.uid()
                self.state = 2479
                self.columnDefinition()
                self.state = 2483
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2480
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2481
                    self.match(MySqlParser.AFTER)
                    self.state = 2482
                    self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PARTITION, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUSMINUS, MySqlParser.LR_BRACKET, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 16:
                localctx = MySqlParser.AlterByDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2485
                self.match(MySqlParser.DROP)
                self.state = 2487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2486
                    self.match(MySqlParser.COLUMN)


                self.state = 2489
                self.uid()
                self.state = 2491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.RESTRICT:
                    self.state = 2490
                    self.match(MySqlParser.RESTRICT)


                pass

            elif la_ == 17:
                localctx = MySqlParser.AlterByDropConstraintCheckContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2493
                self.match(MySqlParser.DROP)
                self.state = 2494
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHECK or _la==MySqlParser.CONSTRAINT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2495
                self.uid()
                pass

            elif la_ == 18:
                localctx = MySqlParser.AlterByDropPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2496
                self.match(MySqlParser.DROP)
                self.state = 2497
                self.match(MySqlParser.PRIMARY)
                self.state = 2498
                self.match(MySqlParser.KEY)
                pass

            elif la_ == 19:
                localctx = MySqlParser.AlterByRenameIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2499
                self.match(MySqlParser.RENAME)
                self.state = 2500
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2501
                self.uid()
                self.state = 2502
                self.match(MySqlParser.TO)
                self.state = 2503
                self.uid()
                pass

            elif la_ == 20:
                localctx = MySqlParser.AlterByAlterIndexVisibilityContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2505
                self.match(MySqlParser.ALTER)
                self.state = 2506
                self.match(MySqlParser.INDEX)
                self.state = 2507
                self.uid()
                self.state = 2508
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INVISIBLE or _la==MySqlParser.VISIBLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = MySqlParser.AlterByDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2510
                self.match(MySqlParser.DROP)
                self.state = 2511
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2512
                self.uid()
                pass

            elif la_ == 22:
                localctx = MySqlParser.AlterByDropForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2513
                self.match(MySqlParser.DROP)
                self.state = 2514
                self.match(MySqlParser.FOREIGN)
                self.state = 2515
                self.match(MySqlParser.KEY)
                self.state = 2516
                self.uid()
                pass

            elif la_ == 23:
                localctx = MySqlParser.AlterByDisableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2517
                self.match(MySqlParser.DISABLE)
                self.state = 2518
                self.match(MySqlParser.KEYS)
                pass

            elif la_ == 24:
                localctx = MySqlParser.AlterByEnableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2519
                self.match(MySqlParser.ENABLE)
                self.state = 2520
                self.match(MySqlParser.KEYS)
                pass

            elif la_ == 25:
                localctx = MySqlParser.AlterByRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2521
                self.match(MySqlParser.RENAME)
                self.state = 2523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS or _la==MySqlParser.TO:
                    self.state = 2522
                    localctx.renameFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.AS or _la==MySqlParser.TO):
                        localctx.renameFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                if la_ == 1:
                    self.state = 2525
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 2526
                    self.fullId()
                    pass


                pass

            elif la_ == 26:
                localctx = MySqlParser.AlterByOrderContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2529
                self.match(MySqlParser.ORDER)
                self.state = 2530
                self.match(MySqlParser.BY)
                self.state = 2531
                self.uidList()
                pass

            elif la_ == 27:
                localctx = MySqlParser.AlterByConvertCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2532
                self.match(MySqlParser.CONVERT)
                self.state = 2533
                self.match(MySqlParser.TO)
                self.state = 2534
                self.match(MySqlParser.CHARACTER)
                self.state = 2535
                self.match(MySqlParser.SET)
                self.state = 2536
                self.charsetName()
                self.state = 2539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLLATE:
                    self.state = 2537
                    self.match(MySqlParser.COLLATE)
                    self.state = 2538
                    self.collationName()


                pass

            elif la_ == 28:
                localctx = MySqlParser.AlterByDefaultCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 2541
                    self.match(MySqlParser.DEFAULT)


                self.state = 2544
                self.match(MySqlParser.CHARACTER)
                self.state = 2545
                self.match(MySqlParser.SET)
                self.state = 2546
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2547
                self.charsetName()
                self.state = 2551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLLATE:
                    self.state = 2548
                    self.match(MySqlParser.COLLATE)
                    self.state = 2549
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 2550
                    self.collationName()


                pass

            elif la_ == 29:
                localctx = MySqlParser.AlterByDiscardTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2553
                self.match(MySqlParser.DISCARD)
                self.state = 2554
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 30:
                localctx = MySqlParser.AlterByImportTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2555
                self.match(MySqlParser.IMPORT)
                self.state = 2556
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 31:
                localctx = MySqlParser.AlterByForceContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2557
                self.match(MySqlParser.FORCE)
                pass

            elif la_ == 32:
                localctx = MySqlParser.AlterByValidateContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2558
                localctx.validationFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.WITH or _la==MySqlParser.WITHOUT):
                    localctx.validationFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2559
                self.match(MySqlParser.VALIDATION)
                pass

            elif la_ == 33:
                localctx = MySqlParser.AlterByAddPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2560
                self.match(MySqlParser.ADD)
                self.state = 2561
                self.match(MySqlParser.PARTITION)
                self.state = 2562
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2563
                self.partitionDefinition()
                self.state = 2568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2564
                    self.match(MySqlParser.COMMA)
                    self.state = 2565
                    self.partitionDefinition()
                    self.state = 2570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2571
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 34:
                localctx = MySqlParser.AlterByDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2573
                self.match(MySqlParser.DROP)
                self.state = 2574
                self.match(MySqlParser.PARTITION)
                self.state = 2575
                self.uidList()
                pass

            elif la_ == 35:
                localctx = MySqlParser.AlterByDiscardPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2576
                self.match(MySqlParser.DISCARD)
                self.state = 2577
                self.match(MySqlParser.PARTITION)
                self.state = 2580
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 2578
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2579
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2582
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 36:
                localctx = MySqlParser.AlterByImportPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2583
                self.match(MySqlParser.IMPORT)
                self.state = 2584
                self.match(MySqlParser.PARTITION)
                self.state = 2587
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 2585
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2586
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2589
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 37:
                localctx = MySqlParser.AlterByTruncatePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2590
                self.match(MySqlParser.TRUNCATE)
                self.state = 2591
                self.match(MySqlParser.PARTITION)
                self.state = 2594
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 2592
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2593
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 38:
                localctx = MySqlParser.AlterByCoalescePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2596
                self.match(MySqlParser.COALESCE)
                self.state = 2597
                self.match(MySqlParser.PARTITION)
                self.state = 2598
                self.decimalLiteral()
                pass

            elif la_ == 39:
                localctx = MySqlParser.AlterByReorganizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2599
                self.match(MySqlParser.REORGANIZE)
                self.state = 2600
                self.match(MySqlParser.PARTITION)
                self.state = 2601
                self.uidList()
                self.state = 2602
                self.match(MySqlParser.INTO)
                self.state = 2603
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2604
                self.partitionDefinition()
                self.state = 2609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2605
                    self.match(MySqlParser.COMMA)
                    self.state = 2606
                    self.partitionDefinition()
                    self.state = 2611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2612
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 40:
                localctx = MySqlParser.AlterByExchangePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2614
                self.match(MySqlParser.EXCHANGE)
                self.state = 2615
                self.match(MySqlParser.PARTITION)
                self.state = 2616
                self.uid()
                self.state = 2617
                self.match(MySqlParser.WITH)
                self.state = 2618
                self.match(MySqlParser.TABLE)
                self.state = 2619
                self.tableName()
                self.state = 2622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH or _la==MySqlParser.WITHOUT:
                    self.state = 2620
                    localctx.validationFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.WITH or _la==MySqlParser.WITHOUT):
                        localctx.validationFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2621
                    self.match(MySqlParser.VALIDATION)


                pass

            elif la_ == 41:
                localctx = MySqlParser.AlterByAnalyzePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2624
                self.match(MySqlParser.ANALYZE)
                self.state = 2625
                self.match(MySqlParser.PARTITION)
                self.state = 2628
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 2626
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2627
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 42:
                localctx = MySqlParser.AlterByCheckPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2630
                self.match(MySqlParser.CHECK)
                self.state = 2631
                self.match(MySqlParser.PARTITION)
                self.state = 2634
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 2632
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2633
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 43:
                localctx = MySqlParser.AlterByOptimizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 2636
                self.match(MySqlParser.OPTIMIZE)
                self.state = 2637
                self.match(MySqlParser.PARTITION)
                self.state = 2640
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 2638
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2639
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 44:
                localctx = MySqlParser.AlterByRebuildPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 2642
                self.match(MySqlParser.REBUILD)
                self.state = 2643
                self.match(MySqlParser.PARTITION)
                self.state = 2646
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 2644
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2645
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 45:
                localctx = MySqlParser.AlterByRepairPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 2648
                self.match(MySqlParser.REPAIR)
                self.state = 2649
                self.match(MySqlParser.PARTITION)
                self.state = 2652
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 2650
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2651
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 46:
                localctx = MySqlParser.AlterByRemovePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 2654
                self.match(MySqlParser.REMOVE)
                self.state = 2655
                self.match(MySqlParser.PARTITIONING)
                pass

            elif la_ == 47:
                localctx = MySqlParser.AlterByUpgradePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 2656
                self.match(MySqlParser.UPGRADE)
                self.state = 2657
                self.match(MySqlParser.PARTITIONING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = MySqlParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.match(MySqlParser.DROP)
            self.state = 2661
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2662
                self.ifExists()


            self.state = 2665
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)




    def dropEvent(self):

        localctx = MySqlParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dropEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            self.match(MySqlParser.DROP)
            self.state = 2668
            self.match(MySqlParser.EVENT)
            self.state = 2670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2669
                self.ifExists()


            self.state = 2672
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ALGORITHM)
            else:
                return self.getToken(MySqlParser.ALGORITHM, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCK)
            else:
                return self.getToken(MySqlParser.LOCK, i)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def INPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.INPLACE)
            else:
                return self.getToken(MySqlParser.INPLACE, i)

        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COPY)
            else:
                return self.getToken(MySqlParser.COPY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NONE)
            else:
                return self.getToken(MySqlParser.NONE, i)

        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SHARED)
            else:
                return self.getToken(MySqlParser.SHARED, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EXCLUSIVE)
            else:
                return self.getToken(MySqlParser.EXCLUSIVE, i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = MySqlParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2674
            self.match(MySqlParser.DROP)
            self.state = 2675
            self.match(MySqlParser.INDEX)
            self.state = 2677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.state = 2676
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2679
            self.uid()
            self.state = 2680
            self.match(MySqlParser.ON)
            self.state = 2681
            self.tableName()
            self.state = 2694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2692
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.ALGORITHM]:
                        self.state = 2682
                        self.match(MySqlParser.ALGORITHM)
                        self.state = 2684
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.EQUAL_SYMBOL:
                            self.state = 2683
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 2686
                        localctx.algType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE):
                            localctx.algType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [MySqlParser.LOCK]:
                        self.state = 2687
                        self.match(MySqlParser.LOCK)
                        self.state = 2689
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.EQUAL_SYMBOL:
                            self.state = 2688
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 2691
                        localctx.lockType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                            localctx.lockType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)




    def dropLogfileGroup(self):

        localctx = MySqlParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dropLogfileGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2697
            self.match(MySqlParser.DROP)
            self.state = 2698
            self.match(MySqlParser.LOGFILE)
            self.state = 2699
            self.match(MySqlParser.GROUP)
            self.state = 2700
            self.uid()
            self.state = 2701
            self.match(MySqlParser.ENGINE)
            self.state = 2702
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 2703
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)




    def dropProcedure(self):

        localctx = MySqlParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dropProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705
            self.match(MySqlParser.DROP)
            self.state = 2706
            self.match(MySqlParser.PROCEDURE)
            self.state = 2708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2707
                self.ifExists()


            self.state = 2710
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)




    def dropFunction(self):

        localctx = MySqlParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dropFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2712
            self.match(MySqlParser.DROP)
            self.state = 2713
            self.match(MySqlParser.FUNCTION)
            self.state = 2715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2714
                self.ifExists()


            self.state = 2717
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)




    def dropServer(self):

        localctx = MySqlParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self.match(MySqlParser.DROP)
            self.state = 2720
            self.match(MySqlParser.SERVER)
            self.state = 2722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2721
                self.ifExists()


            self.state = 2724
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = MySqlParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2726
            self.match(MySqlParser.DROP)
            self.state = 2728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.TEMPORARY:
                self.state = 2727
                self.match(MySqlParser.TEMPORARY)


            self.state = 2730
            self.match(MySqlParser.TABLE)
            self.state = 2732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2731
                self.ifExists()


            self.state = 2734
            self.tables()
            self.state = 2736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT:
                self.state = 2735
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablespace" ):
                listener.enterDropTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablespace" ):
                listener.exitDropTablespace(self)




    def dropTablespace(self):

        localctx = MySqlParser.DropTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2738
            self.match(MySqlParser.DROP)
            self.state = 2739
            self.match(MySqlParser.TABLESPACE)
            self.state = 2740
            self.uid()
            self.state = 2746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ENGINE:
                self.state = 2741
                self.match(MySqlParser.ENGINE)
                self.state = 2743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2742
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2745
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)




    def dropTrigger(self):

        localctx = MySqlParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2748
            self.match(MySqlParser.DROP)
            self.state = 2749
            self.match(MySqlParser.TRIGGER)
            self.state = 2751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2750
                self.ifExists()


            self.state = 2753
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)




    def dropView(self):

        localctx = MySqlParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2755
            self.match(MySqlParser.DROP)
            self.state = 2756
            self.match(MySqlParser.VIEW)
            self.state = 2758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2757
                self.ifExists()


            self.state = 2760
            self.fullId()
            self.state = 2765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 2761
                self.match(MySqlParser.COMMA)
                self.state = 2762
                self.fullId()
                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT:
                self.state = 2768
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def renameTableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RenameTableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RenameTableClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)




    def renameTable(self):

        localctx = MySqlParser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_renameTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2771
            self.match(MySqlParser.RENAME)
            self.state = 2772
            self.match(MySqlParser.TABLE)
            self.state = 2773
            self.renameTableClause()
            self.state = 2778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 2774
                self.match(MySqlParser.COMMA)
                self.state = 2775
                self.renameTableClause()
                self.state = 2780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameTableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableClause" ):
                listener.enterRenameTableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableClause" ):
                listener.exitRenameTableClause(self)




    def renameTableClause(self):

        localctx = MySqlParser.RenameTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_renameTableClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781
            self.tableName()
            self.state = 2782
            self.match(MySqlParser.TO)
            self.state = 2783
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_truncateTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)




    def truncateTable(self):

        localctx = MySqlParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2785
            self.match(MySqlParser.TRUNCATE)
            self.state = 2787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.TABLE:
                self.state = 2786
                self.match(MySqlParser.TABLE)


            self.state = 2789
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(MySqlParser.CALL, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(MySqlParser.ConstantsContext,0)


        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)




    def callStatement(self):

        localctx = MySqlParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_callStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2791
            self.match(MySqlParser.CALL)
            self.state = 2792
            self.fullId()
            self.state = 2799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 2793
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                if la_ == 1:
                    self.state = 2794
                    self.constants()

                elif la_ == 2:
                    self.state = 2795
                    self.expressions()


                self.state = 2798
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = MySqlParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_deleteStatement)
        try:
            self.state = 2803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2801
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2802
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = MySqlParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2805
            self.match(MySqlParser.DO)
            self.state = 2806
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handlerOpenStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerOpenStatementContext,0)


        def handlerReadIndexStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerReadIndexStatementContext,0)


        def handlerReadStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerReadStatementContext,0)


        def handlerCloseStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerCloseStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)




    def handlerStatement(self):

        localctx = MySqlParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_handlerStatement)
        try:
            self.state = 2812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2808
                self.handlerOpenStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2809
                self.handlerReadIndexStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2810
                self.handlerReadStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2811
                self.handlerCloseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(MySqlParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(MySqlParser.DELAYED, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySqlParser.HIGH_PRIORITY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = MySqlParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2814
            self.match(MySqlParser.INSERT)
            self.state = 2816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (MySqlParser.DELAYED - 41)) | (1 << (MySqlParser.HIGH_PRIORITY - 41)) | (1 << (MySqlParser.LOW_PRIORITY - 41)))) != 0):
                self.state = 2815
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (MySqlParser.DELAYED - 41)) | (1 << (MySqlParser.HIGH_PRIORITY - 41)) | (1 << (MySqlParser.LOW_PRIORITY - 41)))) != 0)):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2818
                self.match(MySqlParser.IGNORE)


            self.state = 2822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INTO:
                self.state = 2821
                self.match(MySqlParser.INTO)


            self.state = 2824
            self.tableName()
            self.state = 2831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2825
                self.match(MySqlParser.PARTITION)
                self.state = 2826
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 2827
                    localctx.partitions = self.uidList()


                self.state = 2830
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.VALUES, MySqlParser.VALUE, MySqlParser.LR_BRACKET]:
                self.state = 2837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 2833
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2834
                    localctx.columns = self.uidList()
                    self.state = 2835
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 2839
                self.insertStatementValue()
                pass
            elif token in [MySqlParser.SET]:
                self.state = 2840
                self.match(MySqlParser.SET)
                self.state = 2841
                localctx.setFirst = self.updatedElement()
                self.state = 2846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2842
                    self.match(MySqlParser.COMMA)
                    self.state = 2843
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 2848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 2851
                self.match(MySqlParser.ON)
                self.state = 2852
                self.match(MySqlParser.DUPLICATE)
                self.state = 2853
                self.match(MySqlParser.KEY)
                self.state = 2854
                self.match(MySqlParser.UPDATE)
                self.state = 2855
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 2860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2856
                    self.match(MySqlParser.COMMA)
                    self.state = 2857
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 2862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def INFILE(self):
            return self.getToken(MySqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)

        def LINES(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LINES)
            else:
                return self.getToken(MySqlParser.LINES, i)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IGNORE)
            else:
                return self.getToken(MySqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectFieldsIntoContext,i)


        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectLinesIntoContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadDataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataStatement" ):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataStatement" ):
                listener.exitLoadDataStatement(self)




    def loadDataStatement(self):

        localctx = MySqlParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2865
            self.match(MySqlParser.LOAD)
            self.state = 2866
            self.match(MySqlParser.DATA)
            self.state = 2868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT:
                self.state = 2867
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOCAL:
                self.state = 2870
                self.match(MySqlParser.LOCAL)


            self.state = 2873
            self.match(MySqlParser.INFILE)
            self.state = 2874
            localctx.filename = self.match(MySqlParser.STRING_LITERAL)
            self.state = 2876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                self.state = 2875
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2878
            self.match(MySqlParser.INTO)
            self.state = 2879
            self.match(MySqlParser.TABLE)
            self.state = 2880
            self.tableName()
            self.state = 2886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2881
                self.match(MySqlParser.PARTITION)
                self.state = 2882
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2883
                self.uidList()
                self.state = 2884
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CHARACTER:
                self.state = 2888
                self.match(MySqlParser.CHARACTER)
                self.state = 2889
                self.match(MySqlParser.SET)
                self.state = 2890
                localctx.charset = self.charsetName()


            self.state = 2899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS:
                self.state = 2893
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2895 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2894
                    self.selectFieldsInto()
                    self.state = 2897 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.ENCLOSED or _la==MySqlParser.ESCAPED or _la==MySqlParser.OPTIONALLY or _la==MySqlParser.TERMINATED):
                        break



            self.state = 2907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LINES:
                self.state = 2901
                self.match(MySqlParser.LINES)
                self.state = 2903 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2902
                    self.selectLinesInto()
                    self.state = 2905 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.STARTING or _la==MySqlParser.TERMINATED):
                        break



            self.state = 2913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2909
                self.match(MySqlParser.IGNORE)
                self.state = 2910
                self.decimalLiteral()
                self.state = 2911
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LINES or _la==MySqlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 2915
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2916
                self.assignmentField()
                self.state = 2921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2917
                    self.match(MySqlParser.COMMA)
                    self.state = 2918
                    self.assignmentField()
                    self.state = 2923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2924
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2928
                self.match(MySqlParser.SET)
                self.state = 2929
                self.updatedElement()
                self.state = 2934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2930
                    self.match(MySqlParser.COMMA)
                    self.state = 2931
                    self.updatedElement()
                    self.state = 2936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadXmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.tag = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def XML(self):
            return self.getToken(MySqlParser.XML, 0)

        def INFILE(self):
            return self.getToken(MySqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ROWS)
            else:
                return self.getToken(MySqlParser.ROWS, i)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySqlParser.LESS_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(MySqlParser.GREATER_SYMBOL, 0)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IGNORE)
            else:
                return self.getToken(MySqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def LINES(self):
            return self.getToken(MySqlParser.LINES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadXmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadXmlStatement" ):
                listener.enterLoadXmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadXmlStatement" ):
                listener.exitLoadXmlStatement(self)




    def loadXmlStatement(self):

        localctx = MySqlParser.LoadXmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_loadXmlStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2939
            self.match(MySqlParser.LOAD)
            self.state = 2940
            self.match(MySqlParser.XML)
            self.state = 2942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT:
                self.state = 2941
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOCAL:
                self.state = 2944
                self.match(MySqlParser.LOCAL)


            self.state = 2947
            self.match(MySqlParser.INFILE)
            self.state = 2948
            localctx.filename = self.match(MySqlParser.STRING_LITERAL)
            self.state = 2950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                self.state = 2949
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2952
            self.match(MySqlParser.INTO)
            self.state = 2953
            self.match(MySqlParser.TABLE)
            self.state = 2954
            self.tableName()
            self.state = 2958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CHARACTER:
                self.state = 2955
                self.match(MySqlParser.CHARACTER)
                self.state = 2956
                self.match(MySqlParser.SET)
                self.state = 2957
                localctx.charset = self.charsetName()


            self.state = 2966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ROWS:
                self.state = 2960
                self.match(MySqlParser.ROWS)
                self.state = 2961
                self.match(MySqlParser.IDENTIFIED)
                self.state = 2962
                self.match(MySqlParser.BY)
                self.state = 2963
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 2964
                localctx.tag = self.match(MySqlParser.STRING_LITERAL)
                self.state = 2965
                self.match(MySqlParser.GREATER_SYMBOL)


            self.state = 2972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2968
                self.match(MySqlParser.IGNORE)
                self.state = 2969
                self.decimalLiteral()
                self.state = 2970
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LINES or _la==MySqlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 2974
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2975
                self.assignmentField()
                self.state = 2980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2976
                    self.match(MySqlParser.COMMA)
                    self.state = 2977
                    self.assignmentField()
                    self.state = 2982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2983
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 2987
                self.match(MySqlParser.SET)
                self.state = 2988
                self.updatedElement()
                self.state = 2993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2989
                    self.match(MySqlParser.COMMA)
                    self.state = 2990
                    self.updatedElement()
                    self.state = 2995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(MySqlParser.DELAYED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)




    def replaceStatement(self):

        localctx = MySqlParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self.match(MySqlParser.REPLACE)
            self.state = 3000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DELAYED or _la==MySqlParser.LOW_PRIORITY:
                self.state = 2999
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DELAYED or _la==MySqlParser.LOW_PRIORITY):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INTO:
                self.state = 3002
                self.match(MySqlParser.INTO)


            self.state = 3005
            self.tableName()
            self.state = 3011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 3006
                self.match(MySqlParser.PARTITION)
                self.state = 3007
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3008
                localctx.partitions = self.uidList()
                self.state = 3009
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.VALUES, MySqlParser.VALUE, MySqlParser.LR_BRACKET]:
                self.state = 3017
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
                if la_ == 1:
                    self.state = 3013
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3014
                    localctx.columns = self.uidList()
                    self.state = 3015
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3019
                self.insertStatementValue()
                pass
            elif token in [MySqlParser.SET]:
                self.state = 3020
                self.match(MySqlParser.SET)
                self.state = 3021
                localctx.setFirst = self.updatedElement()
                self.state = 3026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3022
                    self.match(MySqlParser.COMMA)
                    self.state = 3023
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 3028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)



    def selectStatement(self):

        localctx = MySqlParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 3086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3031
                self.querySpecification()
                self.state = 3033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 3032
                    self.lockClause()


                pass

            elif la_ == 2:
                localctx = MySqlParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3035
                self.queryExpression()
                self.state = 3037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                if la_ == 1:
                    self.state = 3036
                    self.lockClause()


                pass

            elif la_ == 3:
                localctx = MySqlParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3039
                self.querySpecificationNointo()
                self.state = 3041 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3040
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3043 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,403,self._ctx)

                self.state = 3053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNION:
                    self.state = 3045
                    self.match(MySqlParser.UNION)
                    self.state = 3047
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                        self.state = 3046
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3051
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.SELECT]:
                        self.state = 3049
                        self.querySpecification()
                        pass
                    elif token in [MySqlParser.LR_BRACKET]:
                        self.state = 3050
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 3056
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 3055
                    self.orderByClause()


                self.state = 3059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 3058
                    self.limitClause()


                self.state = 3062
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
                if la_ == 1:
                    self.state = 3061
                    self.lockClause()


                pass

            elif la_ == 4:
                localctx = MySqlParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3064
                self.queryExpressionNointo()
                self.state = 3066 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3065
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3068 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,410,self._ctx)

                self.state = 3075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNION:
                    self.state = 3070
                    self.match(MySqlParser.UNION)
                    self.state = 3072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                        self.state = 3071
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3074
                    self.queryExpression()


                self.state = 3078
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 3077
                    self.orderByClause()


                self.state = 3081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 3080
                    self.limitClause()


                self.state = 3084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
                if la_ == 1:
                    self.state = 3083
                    self.lockClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(MySqlParser.SingleUpdateStatementContext,0)


        def multipleUpdateStatement(self):
            return self.getTypedRuleContext(MySqlParser.MultipleUpdateStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = MySqlParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_updateStatement)
        try:
            self.state = 3090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3088
                self.singleUpdateStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3089
                self.multipleUpdateStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionsWithDefaultsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)




    def insertStatementValue(self):

        localctx = MySqlParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 3110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3092
                self.selectStatement()
                pass
            elif token in [MySqlParser.VALUES, MySqlParser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3093
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.VALUES or _la==MySqlParser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3094
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3096
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 3095
                    self.expressionsWithDefaults()


                self.state = 3098
                self.match(MySqlParser.RR_BRACKET)
                self.state = 3107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3099
                    self.match(MySqlParser.COMMA)
                    self.state = 3100
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3102
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
                    if la_ == 1:
                        self.state = 3101
                        self.expressionsWithDefaults()


                    self.state = 3104
                    self.match(MySqlParser.RR_BRACKET)
                    self.state = 3109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)




    def updatedElement(self):

        localctx = MySqlParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3112
            self.fullColumnName()
            self.state = 3113
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 3116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 3114
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 3115
                self.match(MySqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_assignmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentField" ):
                listener.enterAssignmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentField" ):
                listener.exitAssignmentField(self)




    def assignmentField(self):

        localctx = MySqlParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_assignmentField)
        try:
            self.state = 3120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3118
                self.uid()
                pass
            elif token in [MySqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3119
                self.match(MySqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def SHARE(self):
            return self.getToken(MySqlParser.SHARE, 0)

        def MODE(self):
            return self.getToken(MySqlParser.MODE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockClause" ):
                listener.enterLockClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockClause" ):
                listener.exitLockClause(self)




    def lockClause(self):

        localctx = MySqlParser.LockClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_lockClause)
        try:
            self.state = 3128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3122
                self.match(MySqlParser.FOR)
                self.state = 3123
                self.match(MySqlParser.UPDATE)
                pass
            elif token in [MySqlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3124
                self.match(MySqlParser.LOCK)
                self.state = 3125
                self.match(MySqlParser.IN)
                self.state = 3126
                self.match(MySqlParser.SHARE)
                self.state = 3127
                self.match(MySqlParser.MODE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)




    def singleDeleteStatement(self):

        localctx = MySqlParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3130
            self.match(MySqlParser.DELETE)
            self.state = 3132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3131
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.QUICK:
                self.state = 3134
                self.match(MySqlParser.QUICK)


            self.state = 3138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3137
                self.match(MySqlParser.IGNORE)


            self.state = 3140
            self.match(MySqlParser.FROM)
            self.state = 3141
            self.tableName()
            self.state = 3147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 3142
                self.match(MySqlParser.PARTITION)
                self.state = 3143
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3144
                self.uidList()
                self.state = 3145
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3149
                self.match(MySqlParser.WHERE)
                self.state = 3150
                self.expression(0)


            self.state = 3154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ORDER:
                self.state = 3153
                self.orderByClause()


            self.state = 3158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3156
                self.match(MySqlParser.LIMIT)
                self.state = 3157
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DOT)
            else:
                return self.getToken(MySqlParser.DOT, i)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STAR)
            else:
                return self.getToken(MySqlParser.STAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_multipleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleDeleteStatement" ):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleDeleteStatement" ):
                listener.exitMultipleDeleteStatement(self)




    def multipleDeleteStatement(self):

        localctx = MySqlParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3160
            self.match(MySqlParser.DELETE)
            self.state = 3162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3161
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.state = 3164
                self.match(MySqlParser.QUICK)


            self.state = 3168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3167
                self.match(MySqlParser.IGNORE)


            self.state = 3209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                self.state = 3170
                self.tableName()
                self.state = 3173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DOT:
                    self.state = 3171
                    self.match(MySqlParser.DOT)
                    self.state = 3172
                    self.match(MySqlParser.STAR)


                self.state = 3183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3175
                    self.match(MySqlParser.COMMA)
                    self.state = 3176
                    self.tableName()
                    self.state = 3179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DOT:
                        self.state = 3177
                        self.match(MySqlParser.DOT)
                        self.state = 3178
                        self.match(MySqlParser.STAR)


                    self.state = 3185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3186
                self.match(MySqlParser.FROM)
                self.state = 3187
                self.tableSources()
                pass
            elif token in [MySqlParser.FROM]:
                self.state = 3189
                self.match(MySqlParser.FROM)
                self.state = 3190
                self.tableName()
                self.state = 3193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DOT:
                    self.state = 3191
                    self.match(MySqlParser.DOT)
                    self.state = 3192
                    self.match(MySqlParser.STAR)


                self.state = 3203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3195
                    self.match(MySqlParser.COMMA)
                    self.state = 3196
                    self.tableName()
                    self.state = 3199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DOT:
                        self.state = 3197
                        self.match(MySqlParser.DOT)
                        self.state = 3198
                        self.match(MySqlParser.STAR)


                    self.state = 3205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3206
                self.match(MySqlParser.USING)
                self.state = 3207
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3211
                self.match(MySqlParser.WHERE)
                self.state = 3212
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerOpenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerOpenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerOpenStatement" ):
                listener.enterHandlerOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerOpenStatement" ):
                listener.exitHandlerOpenStatement(self)




    def handlerOpenStatement(self):

        localctx = MySqlParser.HandlerOpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_handlerOpenStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3215
            self.match(MySqlParser.HANDLER)
            self.state = 3216
            self.tableName()
            self.state = 3217
            self.match(MySqlParser.OPEN)
            self.state = 3222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.state = 3219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3218
                    self.match(MySqlParser.AS)


                self.state = 3221
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # UidContext
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(MySqlParser.ConstantsContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def PREV(self):
            return self.getToken(MySqlParser.PREV, 0)

        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerReadIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadIndexStatement" ):
                listener.enterHandlerReadIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadIndexStatement" ):
                listener.exitHandlerReadIndexStatement(self)




    def handlerReadIndexStatement(self):

        localctx = MySqlParser.HandlerReadIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_handlerReadIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3224
            self.match(MySqlParser.HANDLER)
            self.state = 3225
            self.tableName()
            self.state = 3226
            self.match(MySqlParser.READ)
            self.state = 3227
            localctx.index = self.uid()
            self.state = 3234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.EQUAL_SYMBOL, MySqlParser.GREATER_SYMBOL, MySqlParser.LESS_SYMBOL, MySqlParser.EXCLAMATION_SYMBOL]:
                self.state = 3228
                self.comparisonOperator()
                self.state = 3229
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3230
                self.constants()
                self.state = 3231
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.FIRST, MySqlParser.LAST, MySqlParser.NEXT, MySqlParser.PREV]:
                self.state = 3233
                localctx.moveOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FIRST or _la==MySqlParser.LAST or _la==MySqlParser.NEXT or _la==MySqlParser.PREV):
                    localctx.moveOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3236
                self.match(MySqlParser.WHERE)
                self.state = 3237
                self.expression(0)


            self.state = 3242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3240
                self.match(MySqlParser.LIMIT)
                self.state = 3241
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerReadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadStatement" ):
                listener.enterHandlerReadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadStatement" ):
                listener.exitHandlerReadStatement(self)




    def handlerReadStatement(self):

        localctx = MySqlParser.HandlerReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_handlerReadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244
            self.match(MySqlParser.HANDLER)
            self.state = 3245
            self.tableName()
            self.state = 3246
            self.match(MySqlParser.READ)
            self.state = 3247
            localctx.moveOrder = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FIRST or _la==MySqlParser.NEXT):
                localctx.moveOrder = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3248
                self.match(MySqlParser.WHERE)
                self.state = 3249
                self.expression(0)


            self.state = 3254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3252
                self.match(MySqlParser.LIMIT)
                self.state = 3253
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerCloseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerCloseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCloseStatement" ):
                listener.enterHandlerCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCloseStatement" ):
                listener.exitHandlerCloseStatement(self)




    def handlerCloseStatement(self):

        localctx = MySqlParser.HandlerCloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_handlerCloseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3256
            self.match(MySqlParser.HANDLER)
            self.state = 3257
            self.tableName()
            self.state = 3258
            self.match(MySqlParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)




    def singleUpdateStatement(self):

        localctx = MySqlParser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3260
            self.match(MySqlParser.UPDATE)
            self.state = 3262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3261
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3264
                self.match(MySqlParser.IGNORE)


            self.state = 3267
            self.tableName()
            self.state = 3272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.AS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 3269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3268
                    self.match(MySqlParser.AS)


                self.state = 3271
                self.uid()


            self.state = 3274
            self.match(MySqlParser.SET)
            self.state = 3275
            self.updatedElement()
            self.state = 3280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3276
                self.match(MySqlParser.COMMA)
                self.state = 3277
                self.updatedElement()
                self.state = 3282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3283
                self.match(MySqlParser.WHERE)
                self.state = 3284
                self.expression(0)


            self.state = 3288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ORDER:
                self.state = 3287
                self.orderByClause()


            self.state = 3291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3290
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_multipleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleUpdateStatement" ):
                listener.enterMultipleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleUpdateStatement" ):
                listener.exitMultipleUpdateStatement(self)




    def multipleUpdateStatement(self):

        localctx = MySqlParser.MultipleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_multipleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3293
            self.match(MySqlParser.UPDATE)
            self.state = 3295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3294
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3297
                self.match(MySqlParser.IGNORE)


            self.state = 3300
            self.tableSources()
            self.state = 3301
            self.match(MySqlParser.SET)
            self.state = 3302
            self.updatedElement()
            self.state = 3307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3303
                self.match(MySqlParser.COMMA)
                self.state = 3304
                self.updatedElement()
                self.state = 3309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3310
                self.match(MySqlParser.WHERE)
                self.state = 3311
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.OrderByExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = MySqlParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3314
            self.match(MySqlParser.ORDER)
            self.state = 3315
            self.match(MySqlParser.BY)
            self.state = 3316
            self.orderByExpression()
            self.state = 3321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3317
                self.match(MySqlParser.COMMA)
                self.state = 3318
                self.orderByExpression()
                self.state = 3323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)




    def orderByExpression(self):

        localctx = MySqlParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3324
            self.expression(0)
            self.state = 3326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.state = 3325
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)




    def tableSources(self):

        localctx = MySqlParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3328
            self.tableSource()
            self.state = 3333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3329
                self.match(MySqlParser.COMMA)
                self.state = 3330
                self.tableSource()
                self.state = 3335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceNested" ):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceNested" ):
                listener.exitTableSourceNested(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)



    def tableSource(self):

        localctx = MySqlParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 3353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3336
                self.tableSourceItem()
                self.state = 3340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,465,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3337
                        self.joinPart() 
                    self.state = 3342
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,465,self._ctx)

                pass

            elif la_ == 2:
                localctx = MySqlParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3343
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3344
                self.tableSourceItem()
                self.state = 3348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & ((1 << (MySqlParser.CROSS - 33)) | (1 << (MySqlParser.INNER - 33)) | (1 << (MySqlParser.JOIN - 33)) | (1 << (MySqlParser.LEFT - 33)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (MySqlParser.NATURAL - 104)) | (1 << (MySqlParser.RIGHT - 104)) | (1 << (MySqlParser.STRAIGHT_JOIN - 104)))) != 0):
                    self.state = 3345
                    self.joinPart()
                    self.state = 3350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3351
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexHintContext,i)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)



    def tableSourceItem(self):

        localctx = MySqlParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 3395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3355
                self.tableName()
                self.state = 3361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 3356
                    self.match(MySqlParser.PARTITION)
                    self.state = 3357
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3358
                    self.uidList()
                    self.state = 3359
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                if la_ == 1:
                    self.state = 3364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3363
                        self.match(MySqlParser.AS)


                    self.state = 3366
                    localctx.alias = self.uid()


                self.state = 3377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                if la_ == 1:
                    self.state = 3369
                    self.indexHint()
                    self.state = 3374
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,471,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3370
                            self.match(MySqlParser.COMMA)
                            self.state = 3371
                            self.indexHint() 
                        self.state = 3376
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,471,self._ctx)



                pass

            elif la_ == 2:
                localctx = MySqlParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3384
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 3379
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 3380
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3381
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 3382
                    self.match(MySqlParser.RR_BRACKET)
                    pass


                self.state = 3387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3386
                    self.match(MySqlParser.AS)


                self.state = 3389
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3391
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3392
                self.tableSources()
                self.state = 3393
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexHintAction = None # Token
            self.keyFormat = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(MySqlParser.FORCE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def indexHintType(self):
            return self.getTypedRuleContext(MySqlParser.IndexHintTypeContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)




    def indexHint(self):

        localctx = MySqlParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3397
            localctx.indexHintAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FORCE or _la==MySqlParser.IGNORE or _la==MySqlParser.USE):
                localctx.indexHintAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3398
            localctx.keyFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                localctx.keyFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3399
                self.match(MySqlParser.FOR)
                self.state = 3400
                self.indexHintType()


            self.state = 3403
            self.match(MySqlParser.LR_BRACKET)
            self.state = 3404
            self.uidList()
            self.state = 3405
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)




    def indexHintType(self):

        localctx = MySqlParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_indexHintType)
        try:
            self.state = 3412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3407
                self.match(MySqlParser.JOIN)
                pass
            elif token in [MySqlParser.ORDER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3408
                self.match(MySqlParser.ORDER)
                self.state = 3409
                self.match(MySqlParser.BY)
                pass
            elif token in [MySqlParser.GROUP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3410
                self.match(MySqlParser.GROUP)
                self.state = 3411
                self.match(MySqlParser.BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def INNER(self):
            return self.getToken(MySqlParser.INNER, 0)
        def CROSS(self):
            return self.getToken(MySqlParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(MySqlParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(MySqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)
        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def OUTER(self):
            return self.getToken(MySqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)


    class StraightJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySqlParser.STRAIGHT_JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightJoin" ):
                listener.enterStraightJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightJoin" ):
                listener.exitStraightJoin(self)



    def joinPart(self):

        localctx = MySqlParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 3458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CROSS, MySqlParser.INNER, MySqlParser.JOIN]:
                localctx = MySqlParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CROSS or _la==MySqlParser.INNER:
                    self.state = 3414
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CROSS or _la==MySqlParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3417
                self.match(MySqlParser.JOIN)
                self.state = 3418
                self.tableSourceItem()
                self.state = 3426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
                if la_ == 1:
                    self.state = 3419
                    self.match(MySqlParser.ON)
                    self.state = 3420
                    self.expression(0)

                elif la_ == 2:
                    self.state = 3421
                    self.match(MySqlParser.USING)
                    self.state = 3422
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3423
                    self.uidList()
                    self.state = 3424
                    self.match(MySqlParser.RR_BRACKET)


                pass
            elif token in [MySqlParser.STRAIGHT_JOIN]:
                localctx = MySqlParser.StraightJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3428
                self.match(MySqlParser.STRAIGHT_JOIN)
                self.state = 3429
                self.tableSourceItem()
                self.state = 3432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
                if la_ == 1:
                    self.state = 3430
                    self.match(MySqlParser.ON)
                    self.state = 3431
                    self.expression(0)


                pass
            elif token in [MySqlParser.LEFT, MySqlParser.RIGHT]:
                localctx = MySqlParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3434
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LEFT or _la==MySqlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OUTER:
                    self.state = 3435
                    self.match(MySqlParser.OUTER)


                self.state = 3438
                self.match(MySqlParser.JOIN)
                self.state = 3439
                self.tableSourceItem()
                self.state = 3447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.ON]:
                    self.state = 3440
                    self.match(MySqlParser.ON)
                    self.state = 3441
                    self.expression(0)
                    pass
                elif token in [MySqlParser.USING]:
                    self.state = 3442
                    self.match(MySqlParser.USING)
                    self.state = 3443
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3444
                    self.uidList()
                    self.state = 3445
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.NATURAL]:
                localctx = MySqlParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3449
                self.match(MySqlParser.NATURAL)
                self.state = 3454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT:
                    self.state = 3450
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.LEFT or _la==MySqlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.OUTER:
                        self.state = 3451
                        self.match(MySqlParser.OUTER)




                self.state = 3456
                self.match(MySqlParser.JOIN)
                self.state = 3457
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = MySqlParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_queryExpression)
        try:
            self.state = 3468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3460
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3461
                self.querySpecification()
                self.state = 3462
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3464
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3465
                self.queryExpression()
                self.state = 3466
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionNointoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_queryExpressionNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionNointo" ):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionNointo" ):
                listener.exitQueryExpressionNointo(self)




    def queryExpressionNointo(self):

        localctx = MySqlParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_queryExpressionNointo)
        try:
            self.state = 3478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3470
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3471
                self.querySpecificationNointo()
                self.state = 3472
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3474
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3475
                self.queryExpressionNointo()
                self.state = 3476
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MySqlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectSpecContext,i)


        def selectIntoExpression(self):
            return self.getTypedRuleContext(MySqlParser.SelectIntoExpressionContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(MySqlParser.FromClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(MySqlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(MySqlParser.HavingClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = MySqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 3532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3480
                self.match(MySqlParser.SELECT)
                self.state = 3484
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,488,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3481
                        self.selectSpec() 
                    self.state = 3486
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,488,self._ctx)

                self.state = 3487
                self.selectElements()
                self.state = 3489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTO:
                    self.state = 3488
                    self.selectIntoExpression()


                self.state = 3492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM:
                    self.state = 3491
                    self.fromClause()


                self.state = 3495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
                if la_ == 1:
                    self.state = 3494
                    self.groupByClause()


                self.state = 3498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.HAVING:
                    self.state = 3497
                    self.havingClause()


                self.state = 3501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
                if la_ == 1:
                    self.state = 3500
                    self.orderByClause()


                self.state = 3504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
                if la_ == 1:
                    self.state = 3503
                    self.limitClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3506
                self.match(MySqlParser.SELECT)
                self.state = 3510
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,495,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3507
                        self.selectSpec() 
                    self.state = 3512
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,495,self._ctx)

                self.state = 3513
                self.selectElements()
                self.state = 3515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM:
                    self.state = 3514
                    self.fromClause()


                self.state = 3518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
                if la_ == 1:
                    self.state = 3517
                    self.groupByClause()


                self.state = 3521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.HAVING:
                    self.state = 3520
                    self.havingClause()


                self.state = 3524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
                if la_ == 1:
                    self.state = 3523
                    self.orderByClause()


                self.state = 3527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
                if la_ == 1:
                    self.state = 3526
                    self.limitClause()


                self.state = 3530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTO:
                    self.state = 3529
                    self.selectIntoExpression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationNointoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MySqlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(MySqlParser.FromClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(MySqlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(MySqlParser.HavingClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_querySpecificationNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecificationNointo" ):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecificationNointo" ):
                listener.exitQuerySpecificationNointo(self)




    def querySpecificationNointo(self):

        localctx = MySqlParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_querySpecificationNointo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3534
            self.match(MySqlParser.SELECT)
            self.state = 3538
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3535
                    self.selectSpec() 
                self.state = 3540
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

            self.state = 3541
            self.selectElements()
            self.state = 3543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FROM:
                self.state = 3542
                self.fromClause()


            self.state = 3546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.state = 3545
                self.groupByClause()


            self.state = 3549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.HAVING:
                self.state = 3548
                self.havingClause()


            self.state = 3552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.state = 3551
                self.orderByClause()


            self.state = 3555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
            if la_ == 1:
                self.state = 3554
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)




    def unionParenthesis(self):

        localctx = MySqlParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self.match(MySqlParser.UNION)
            self.state = 3559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                self.state = 3558
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3561
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)




    def unionStatement(self):

        localctx = MySqlParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3563
            self.match(MySqlParser.UNION)
            self.state = 3565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                self.state = 3564
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT]:
                self.state = 3567
                self.querySpecificationNointo()
                pass
            elif token in [MySqlParser.LR_BRACKET]:
                self.state = 3568
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(MySqlParser.DISTINCTROW, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySqlParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySqlParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(MySqlParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(MySqlParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(MySqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(MySqlParser.SQL_NO_CACHE, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)




    def selectSpec(self):

        localctx = MySqlParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.state = 3579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL, MySqlParser.DISTINCT, MySqlParser.DISTINCTROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3571
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.ALL) | (1 << MySqlParser.DISTINCT) | (1 << MySqlParser.DISTINCTROW))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.HIGH_PRIORITY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3572
                self.match(MySqlParser.HIGH_PRIORITY)
                pass
            elif token in [MySqlParser.STRAIGHT_JOIN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3573
                self.match(MySqlParser.STRAIGHT_JOIN)
                pass
            elif token in [MySqlParser.SQL_SMALL_RESULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3574
                self.match(MySqlParser.SQL_SMALL_RESULT)
                pass
            elif token in [MySqlParser.SQL_BIG_RESULT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3575
                self.match(MySqlParser.SQL_BIG_RESULT)
                pass
            elif token in [MySqlParser.SQL_BUFFER_RESULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3576
                self.match(MySqlParser.SQL_BUFFER_RESULT)
                pass
            elif token in [MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3577
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SQL_CACHE or _la==MySqlParser.SQL_NO_CACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SQL_CALC_FOUND_ROWS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3578
                self.match(MySqlParser.SQL_CALC_FOUND_ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)




    def selectElements(self):

        localctx = MySqlParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,513,self._ctx)
            if la_ == 1:
                self.state = 3581
                localctx.star = self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                self.state = 3582
                self.selectElement()
                pass


            self.state = 3589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3585
                self.match(MySqlParser.COMMA)
                self.state = 3586
                self.selectElement()
                self.state = 3591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(MySqlParser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)



    def selectElement(self):

        localctx = MySqlParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 3621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3592
                self.fullId()
                self.state = 3593
                self.match(MySqlParser.DOT)
                self.state = 3594
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = MySqlParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3596
                self.fullColumnName()
                self.state = 3601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
                if la_ == 1:
                    self.state = 3598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3597
                        self.match(MySqlParser.AS)


                    self.state = 3600
                    self.uid()


                pass

            elif la_ == 3:
                localctx = MySqlParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3603
                self.functionCall()
                self.state = 3608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                if la_ == 1:
                    self.state = 3605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3604
                        self.match(MySqlParser.AS)


                    self.state = 3607
                    self.uid()


                pass

            elif la_ == 4:
                localctx = MySqlParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
                if la_ == 1:
                    self.state = 3610
                    self.match(MySqlParser.LOCAL_ID)
                    self.state = 3611
                    self.match(MySqlParser.VAR_ASSIGN)


                self.state = 3614
                self.expression(0)
                self.state = 3619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 3616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3615
                        self.match(MySqlParser.AS)


                    self.state = 3618
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectIntoExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectIntoExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectIntoVariablesContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoVariables" ):
                listener.enterSelectIntoVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoVariables" ):
                listener.exitSelectIntoVariables(self)


    class SelectIntoTextFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.filename = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def OUTFILE(self):
            return self.getToken(MySqlParser.OUTFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def LINES(self):
            return self.getToken(MySqlParser.LINES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectFieldsIntoContext,i)

        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectLinesIntoContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoTextFile" ):
                listener.enterSelectIntoTextFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoTextFile" ):
                listener.exitSelectIntoTextFile(self)


    class SelectIntoDumpFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def DUMPFILE(self):
            return self.getToken(MySqlParser.DUMPFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoDumpFile" ):
                listener.enterSelectIntoDumpFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoDumpFile" ):
                listener.exitSelectIntoDumpFile(self)



    def selectIntoExpression(self):

        localctx = MySqlParser.SelectIntoExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_selectIntoExpression)
        self._la = 0 # Token type
        try:
            self.state = 3659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SelectIntoVariablesContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3623
                self.match(MySqlParser.INTO)
                self.state = 3624
                self.assignmentField()
                self.state = 3629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3625
                    self.match(MySqlParser.COMMA)
                    self.state = 3626
                    self.assignmentField()
                    self.state = 3631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.SelectIntoDumpFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3632
                self.match(MySqlParser.INTO)
                self.state = 3633
                self.match(MySqlParser.DUMPFILE)
                self.state = 3634
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = MySqlParser.SelectIntoTextFileContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3635
                self.match(MySqlParser.INTO)
                self.state = 3636
                self.match(MySqlParser.OUTFILE)
                self.state = 3637
                localctx.filename = self.match(MySqlParser.STRING_LITERAL)
                self.state = 3641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CHARACTER:
                    self.state = 3638
                    self.match(MySqlParser.CHARACTER)
                    self.state = 3639
                    self.match(MySqlParser.SET)
                    self.state = 3640
                    localctx.charset = self.charsetName()


                self.state = 3649
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
                if la_ == 1:
                    self.state = 3643
                    localctx.fieldsFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                        localctx.fieldsFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3645 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3644
                        self.selectFieldsInto()
                        self.state = 3647 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==MySqlParser.ENCLOSED or _la==MySqlParser.ESCAPED or _la==MySqlParser.OPTIONALLY or _la==MySqlParser.TERMINATED):
                            break



                self.state = 3657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINES:
                    self.state = 3651
                    self.match(MySqlParser.LINES)
                    self.state = 3653 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3652
                        self.selectLinesInto()
                        self.state = 3655 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==MySqlParser.STARTING or _la==MySqlParser.TERMINATED):
                            break



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectFieldsIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token

        def TERMINATED(self):
            return self.getToken(MySqlParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENCLOSED(self):
            return self.getToken(MySqlParser.ENCLOSED, 0)

        def OPTIONALLY(self):
            return self.getToken(MySqlParser.OPTIONALLY, 0)

        def ESCAPED(self):
            return self.getToken(MySqlParser.ESCAPED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectFieldsInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFieldsInto" ):
                listener.enterSelectFieldsInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFieldsInto" ):
                listener.exitSelectFieldsInto(self)




    def selectFieldsInto(self):

        localctx = MySqlParser.SelectFieldsIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_selectFieldsInto)
        self._la = 0 # Token type
        try:
            self.state = 3673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3661
                self.match(MySqlParser.TERMINATED)
                self.state = 3662
                self.match(MySqlParser.BY)
                self.state = 3663
                localctx.terminationField = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ENCLOSED, MySqlParser.OPTIONALLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OPTIONALLY:
                    self.state = 3664
                    self.match(MySqlParser.OPTIONALLY)


                self.state = 3667
                self.match(MySqlParser.ENCLOSED)
                self.state = 3668
                self.match(MySqlParser.BY)
                self.state = 3669
                localctx.enclosion = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ESCAPED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3670
                self.match(MySqlParser.ESCAPED)
                self.state = 3671
                self.match(MySqlParser.BY)
                self.state = 3672
                localctx.escaping = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectLinesIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.starting = None # Token
            self.terminationLine = None # Token

        def STARTING(self):
            return self.getToken(MySqlParser.STARTING, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def TERMINATED(self):
            return self.getToken(MySqlParser.TERMINATED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectLinesInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectLinesInto" ):
                listener.enterSelectLinesInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectLinesInto" ):
                listener.exitSelectLinesInto(self)




    def selectLinesInto(self):

        localctx = MySqlParser.SelectLinesIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_selectLinesInto)
        try:
            self.state = 3681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STARTING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3675
                self.match(MySqlParser.STARTING)
                self.state = 3676
                self.match(MySqlParser.BY)
                self.state = 3677
                localctx.starting = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.TERMINATED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3678
                self.match(MySqlParser.TERMINATED)
                self.state = 3679
                self.match(MySqlParser.BY)
                self.state = 3680
                localctx.terminationLine = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = MySqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3683
            self.match(MySqlParser.FROM)
            self.state = 3684
            self.tableSources()
            self.state = 3687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3685
                self.match(MySqlParser.WHERE)
                self.state = 3686
                localctx.whereExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(MySqlParser.GroupByItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def ROLLUP(self):
            return self.getToken(MySqlParser.ROLLUP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = MySqlParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3689
            self.match(MySqlParser.GROUP)
            self.state = 3690
            self.match(MySqlParser.BY)
            self.state = 3691
            self.groupByItem()
            self.state = 3696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3692
                self.match(MySqlParser.COMMA)
                self.state = 3693
                self.groupByItem()
                self.state = 3698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
            if la_ == 1:
                self.state = 3699
                self.match(MySqlParser.WITH)
                self.state = 3700
                self.match(MySqlParser.ROLLUP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.havingExpr = None # ExpressionContext

        def HAVING(self):
            return self.getToken(MySqlParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = MySqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3703
            self.match(MySqlParser.HAVING)
            self.state = 3704
            localctx.havingExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = MySqlParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3706
            self.expression(0)
            self.state = 3708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
            if la_ == 1:
                self.state = 3707
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # LimitClauseAtomContext
            self.limit = None # LimitClauseAtomContext

        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(MySqlParser.OFFSET, 0)

        def limitClauseAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LimitClauseAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,i)


        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = MySqlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3710
            self.match(MySqlParser.LIMIT)
            self.state = 3721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
            if la_ == 1:
                self.state = 3714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
                if la_ == 1:
                    self.state = 3711
                    localctx.offset = self.limitClauseAtom()
                    self.state = 3712
                    self.match(MySqlParser.COMMA)


                self.state = 3716
                localctx.limit = self.limitClauseAtom()
                pass

            elif la_ == 2:
                self.state = 3717
                localctx.limit = self.limitClauseAtom()
                self.state = 3718
                self.match(MySqlParser.OFFSET)
                self.state = 3719
                localctx.offset = self.limitClauseAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_limitClauseAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClauseAtom" ):
                listener.enterLimitClauseAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClauseAtom" ):
                listener.exitLimitClauseAtom(self)




    def limitClauseAtom(self):

        localctx = MySqlParser.LimitClauseAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_limitClauseAtom)
        try:
            self.state = 3726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3723
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3724
                self.mysqlVariable()
                pass
            elif token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3725
                self.simpleId()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_startTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)




    def startTransaction(self):

        localctx = MySqlParser.StartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_startTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3728
            self.match(MySqlParser.START)
            self.state = 3729
            self.match(MySqlParser.TRANSACTION)
            self.state = 3738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.READ or _la==MySqlParser.WITH:
                self.state = 3730
                self.transactionMode()
                self.state = 3735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3731
                    self.match(MySqlParser.COMMA)
                    self.state = 3732
                    self.transactionMode()
                    self.state = 3737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)




    def beginWork(self):

        localctx = MySqlParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3740
            self.match(MySqlParser.BEGIN)
            self.state = 3742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 3741
                self.match(MySqlParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NO)
            else:
                return self.getToken(MySqlParser.NO, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_commitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitWork" ):
                listener.enterCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitWork" ):
                listener.exitCommitWork(self)




    def commitWork(self):

        localctx = MySqlParser.CommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_commitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3744
            self.match(MySqlParser.COMMIT)
            self.state = 3746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 3745
                self.match(MySqlParser.WORK)


            self.state = 3753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AND:
                self.state = 3748
                self.match(MySqlParser.AND)
                self.state = 3750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 3749
                    localctx.nochain = self.match(MySqlParser.NO)


                self.state = 3752
                self.match(MySqlParser.CHAIN)


            self.state = 3759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.state = 3756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 3755
                    localctx.norelease = self.match(MySqlParser.NO)


                self.state = 3758
                self.match(MySqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NO)
            else:
                return self.getToken(MySqlParser.NO, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_rollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackWork" ):
                listener.enterRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackWork" ):
                listener.exitRollbackWork(self)




    def rollbackWork(self):

        localctx = MySqlParser.RollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_rollbackWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.match(MySqlParser.ROLLBACK)
            self.state = 3763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 3762
                self.match(MySqlParser.WORK)


            self.state = 3770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AND:
                self.state = 3765
                self.match(MySqlParser.AND)
                self.state = 3767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 3766
                    localctx.nochain = self.match(MySqlParser.NO)


                self.state = 3769
                self.match(MySqlParser.CHAIN)


            self.state = 3776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
            if la_ == 1:
                self.state = 3773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 3772
                    localctx.norelease = self.match(MySqlParser.NO)


                self.state = 3775
                self.match(MySqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)




    def savepointStatement(self):

        localctx = MySqlParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_savepointStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3778
            self.match(MySqlParser.SAVEPOINT)
            self.state = 3779
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_rollbackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackStatement" ):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackStatement" ):
                listener.exitRollbackStatement(self)




    def rollbackStatement(self):

        localctx = MySqlParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3781
            self.match(MySqlParser.ROLLBACK)
            self.state = 3783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 3782
                self.match(MySqlParser.WORK)


            self.state = 3785
            self.match(MySqlParser.TO)
            self.state = 3787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
            if la_ == 1:
                self.state = 3786
                self.match(MySqlParser.SAVEPOINT)


            self.state = 3789
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReleaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_releaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReleaseStatement" ):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReleaseStatement" ):
                listener.exitReleaseStatement(self)




    def releaseStatement(self):

        localctx = MySqlParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3791
            self.match(MySqlParser.RELEASE)
            self.state = 3792
            self.match(MySqlParser.SAVEPOINT)
            self.state = 3793
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def lockTableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LockTableElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LockTableElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTables" ):
                listener.enterLockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTables" ):
                listener.exitLockTables(self)




    def lockTables(self):

        localctx = MySqlParser.LockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_lockTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3795
            self.match(MySqlParser.LOCK)
            self.state = 3796
            self.match(MySqlParser.TABLES)
            self.state = 3797
            self.lockTableElement()
            self.state = 3802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3798
                self.match(MySqlParser.COMMA)
                self.state = 3799
                self.lockTableElement()
                self.state = 3804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(MySqlParser.UNLOCK, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unlockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockTables" ):
                listener.enterUnlockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockTables" ):
                listener.exitUnlockTables(self)




    def unlockTables(self):

        localctx = MySqlParser.UnlockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_unlockTables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3805
            self.match(MySqlParser.UNLOCK)
            self.state = 3806
            self.match(MySqlParser.TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutocommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.autocommitValue = None # Token

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def AUTOCOMMIT(self):
            return self.getToken(MySqlParser.AUTOCOMMIT, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_setAutocommitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommitStatement" ):
                listener.enterSetAutocommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommitStatement" ):
                listener.exitSetAutocommitStatement(self)




    def setAutocommitStatement(self):

        localctx = MySqlParser.SetAutocommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_setAutocommitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3808
            self.match(MySqlParser.SET)
            self.state = 3809
            self.match(MySqlParser.AUTOCOMMIT)
            self.state = 3810
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 3811
            localctx.autocommitValue = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                localctx.autocommitValue = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.transactionContext = None # Token

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def transactionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TransactionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TransactionOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_setTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransactionStatement" ):
                listener.enterSetTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransactionStatement" ):
                listener.exitSetTransactionStatement(self)




    def setTransactionStatement(self):

        localctx = MySqlParser.SetTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_setTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3813
            self.match(MySqlParser.SET)
            self.state = 3815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION:
                self.state = 3814
                localctx.transactionContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION):
                    localctx.transactionContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3817
            self.match(MySqlParser.TRANSACTION)
            self.state = 3818
            self.transactionOption()
            self.state = 3823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3819
                self.match(MySqlParser.COMMA)
                self.state = 3820
                self.transactionOption()
                self.state = 3825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CONSISTENT(self):
            return self.getToken(MySqlParser.CONSISTENT, 0)

        def SNAPSHOT(self):
            return self.getToken(MySqlParser.SNAPSHOT, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = MySqlParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_transactionMode)
        try:
            self.state = 3833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3826
                self.match(MySqlParser.WITH)
                self.state = 3827
                self.match(MySqlParser.CONSISTENT)
                self.state = 3828
                self.match(MySqlParser.SNAPSHOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3829
                self.match(MySqlParser.READ)
                self.state = 3830
                self.match(MySqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3831
                self.match(MySqlParser.READ)
                self.state = 3832
                self.match(MySqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def lockAction(self):
            return self.getTypedRuleContext(MySqlParser.LockActionContext,0)


        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockTableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTableElement" ):
                listener.enterLockTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTableElement" ):
                listener.exitLockTableElement(self)




    def lockTableElement(self):

        localctx = MySqlParser.LockTableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_lockTableElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3835
            self.tableName()
            self.state = 3840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.AS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 3837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3836
                    self.match(MySqlParser.AS)


                self.state = 3839
                self.uid()


            self.state = 3842
            self.lockAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockAction" ):
                listener.enterLockAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockAction" ):
                listener.exitLockAction(self)




    def lockAction(self):

        localctx = MySqlParser.LockActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_lockAction)
        self._la = 0 # Token type
        try:
            self.state = 3852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.READ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3844
                self.match(MySqlParser.READ)
                self.state = 3846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LOCAL:
                    self.state = 3845
                    self.match(MySqlParser.LOCAL)


                pass
            elif token in [MySqlParser.LOW_PRIORITY, MySqlParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LOW_PRIORITY:
                    self.state = 3848
                    self.match(MySqlParser.LOW_PRIORITY)


                self.state = 3851
                self.match(MySqlParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(MySqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)

        def transactionLevel(self):
            return self.getTypedRuleContext(MySqlParser.TransactionLevelContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOption" ):
                listener.enterTransactionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOption" ):
                listener.exitTransactionOption(self)




    def transactionOption(self):

        localctx = MySqlParser.TransactionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_transactionOption)
        try:
            self.state = 3861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3854
                self.match(MySqlParser.ISOLATION)
                self.state = 3855
                self.match(MySqlParser.LEVEL)
                self.state = 3856
                self.transactionLevel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3857
                self.match(MySqlParser.READ)
                self.state = 3858
                self.match(MySqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3859
                self.match(MySqlParser.READ)
                self.state = 3860
                self.match(MySqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(MySqlParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(MySqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(MySqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(MySqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevel" ):
                listener.enterTransactionLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevel" ):
                listener.exitTransactionLevel(self)




    def transactionLevel(self):

        localctx = MySqlParser.TransactionLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_transactionLevel)
        try:
            self.state = 3870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3863
                self.match(MySqlParser.REPEATABLE)
                self.state = 3864
                self.match(MySqlParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3865
                self.match(MySqlParser.READ)
                self.state = 3866
                self.match(MySqlParser.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3867
                self.match(MySqlParser.READ)
                self.state = 3868
                self.match(MySqlParser.UNCOMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3869
                self.match(MySqlParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.MasterOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)




    def changeMaster(self):

        localctx = MySqlParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_changeMaster)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3872
            self.match(MySqlParser.CHANGE)
            self.state = 3873
            self.match(MySqlParser.MASTER)
            self.state = 3874
            self.match(MySqlParser.TO)
            self.state = 3875
            self.masterOption()
            self.state = 3880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3876
                self.match(MySqlParser.COMMA)
                self.state = 3877
                self.masterOption()
                self.state = 3882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3883
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def FILTER(self):
            return self.getToken(MySqlParser.FILTER, 0)

        def replicationFilter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ReplicationFilterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ReplicationFilterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_changeReplicationFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplicationFilter" ):
                listener.enterChangeReplicationFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplicationFilter" ):
                listener.exitChangeReplicationFilter(self)




    def changeReplicationFilter(self):

        localctx = MySqlParser.ChangeReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_changeReplicationFilter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3886
            self.match(MySqlParser.CHANGE)
            self.state = 3887
            self.match(MySqlParser.REPLICATION)
            self.state = 3888
            self.match(MySqlParser.FILTER)
            self.state = 3889
            self.replicationFilter()
            self.state = 3894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3890
                self.match(MySqlParser.COMMA)
                self.state = 3891
                self.replicationFilter()
                self.state = 3896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurgeBinaryLogsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.purgeFormat = None # Token
            self.fileName = None # Token
            self.timeValue = None # Token

        def PURGE(self):
            return self.getToken(MySqlParser.PURGE, 0)

        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def BEFORE(self):
            return self.getToken(MySqlParser.BEFORE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_purgeBinaryLogs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurgeBinaryLogs" ):
                listener.enterPurgeBinaryLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurgeBinaryLogs" ):
                listener.exitPurgeBinaryLogs(self)




    def purgeBinaryLogs(self):

        localctx = MySqlParser.PurgeBinaryLogsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_purgeBinaryLogs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3897
            self.match(MySqlParser.PURGE)
            self.state = 3898
            localctx.purgeFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BINARY or _la==MySqlParser.MASTER):
                localctx.purgeFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3899
            self.match(MySqlParser.LOGS)
            self.state = 3904
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.TO]:
                self.state = 3900
                self.match(MySqlParser.TO)
                self.state = 3901
                localctx.fileName = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.BEFORE]:
                self.state = 3902
                self.match(MySqlParser.BEFORE)
                self.state = 3903
                localctx.timeValue = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resetMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetMaster" ):
                listener.enterResetMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetMaster" ):
                listener.exitResetMaster(self)




    def resetMaster(self):

        localctx = MySqlParser.ResetMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_resetMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3906
            self.match(MySqlParser.RESET)
            self.state = 3907
            self.match(MySqlParser.MASTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_resetSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSlave" ):
                listener.enterResetSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSlave" ):
                listener.exitResetSlave(self)




    def resetSlave(self):

        localctx = MySqlParser.ResetSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_resetSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3909
            self.match(MySqlParser.RESET)
            self.state = 3910
            self.match(MySqlParser.SLAVE)
            self.state = 3912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL:
                self.state = 3911
                self.match(MySqlParser.ALL)


            self.state = 3915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3914
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ThreadTypeContext,i)


        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def untilOption(self):
            return self.getTypedRuleContext(MySqlParser.UntilOptionContext,0)


        def connectionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConnectionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConnectionOptionContext,i)


        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_startSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartSlave" ):
                listener.enterStartSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartSlave" ):
                listener.exitStartSlave(self)




    def startSlave(self):

        localctx = MySqlParser.StartSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_startSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3917
            self.match(MySqlParser.START)
            self.state = 3918
            self.match(MySqlParser.SLAVE)
            self.state = 3927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD:
                self.state = 3919
                self.threadType()
                self.state = 3924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3920
                    self.match(MySqlParser.COMMA)
                    self.state = 3921
                    self.threadType()
                    self.state = 3926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.UNTIL:
                self.state = 3929
                self.match(MySqlParser.UNTIL)
                self.state = 3930
                self.untilOption()


            self.state = 3936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DEFAULT_AUTH or _la==MySqlParser.PASSWORD or _la==MySqlParser.PLUGIN_DIR or _la==MySqlParser.USER:
                self.state = 3933
                self.connectionOption()
                self.state = 3938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3939
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ThreadTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_stopSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopSlave" ):
                listener.enterStopSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopSlave" ):
                listener.exitStopSlave(self)




    def stopSlave(self):

        localctx = MySqlParser.StopSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_stopSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3942
            self.match(MySqlParser.STOP)
            self.state = 3943
            self.match(MySqlParser.SLAVE)
            self.state = 3952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD:
                self.state = 3944
                self.threadType()
                self.state = 3949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3945
                    self.match(MySqlParser.COMMA)
                    self.state = 3946
                    self.threadType()
                    self.state = 3951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartGroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_startGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartGroupReplication" ):
                listener.enterStartGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartGroupReplication" ):
                listener.exitStartGroupReplication(self)




    def startGroupReplication(self):

        localctx = MySqlParser.StartGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_startGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3954
            self.match(MySqlParser.START)
            self.state = 3955
            self.match(MySqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopGroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_stopGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopGroupReplication" ):
                listener.enterStopGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopGroupReplication" ):
                listener.exitStopGroupReplication(self)




    def stopGroupReplication(self):

        localctx = MySqlParser.StopGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_stopGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3957
            self.match(MySqlParser.STOP)
            self.state = 3958
            self.match(MySqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_masterOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MasterStringOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.StringMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterStringOption" ):
                listener.enterMasterStringOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterStringOption" ):
                listener.exitMasterStringOption(self)


    class MasterRealOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterRealOption" ):
                listener.enterMasterRealOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterRealOption" ):
                listener.exitMasterRealOption(self)


    class MasterBoolOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.boolVal = None # Token
            self.copyFrom(ctx)

        def boolMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.BoolMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterBoolOption" ):
                listener.enterMasterBoolOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterBoolOption" ):
                listener.exitMasterBoolOption(self)


    class MasterUidListOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterUidListOption" ):
                listener.enterMasterUidListOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterUidListOption" ):
                listener.exitMasterUidListOption(self)


    class MasterDecimalOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.DecimalMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterDecimalOption" ):
                listener.enterMasterDecimalOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterDecimalOption" ):
                listener.exitMasterDecimalOption(self)



    def masterOption(self):

        localctx = MySqlParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_masterOption)
        self._la = 0 # Token type
        try:
            self.state = 3989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.MASTER_BIND, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.RELAY_LOG_FILE]:
                localctx = MySqlParser.MasterStringOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3960
                self.stringMasterOption()
                self.state = 3961
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3962
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.RELAY_LOG_POS]:
                localctx = MySqlParser.MasterDecimalOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3964
                self.decimalMasterOption()
                self.state = 3965
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3966
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_SSL]:
                localctx = MySqlParser.MasterBoolOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3968
                self.boolMasterOption()
                self.state = 3969
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3970
                localctx.boolVal = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolVal = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.MASTER_HEARTBEAT_PERIOD]:
                localctx = MySqlParser.MasterRealOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3972
                self.match(MySqlParser.MASTER_HEARTBEAT_PERIOD)
                self.state = 3973
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3974
                self.match(MySqlParser.REAL_LITERAL)
                pass
            elif token in [MySqlParser.IGNORE_SERVER_IDS]:
                localctx = MySqlParser.MasterUidListOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3975
                self.match(MySqlParser.IGNORE_SERVER_IDS)
                self.state = 3976
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3977
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                    self.state = 3978
                    self.uid()
                    self.state = 3983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 3979
                        self.match(MySqlParser.COMMA)
                        self.state = 3980
                        self.uid()
                        self.state = 3985
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3988
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_BIND(self):
            return self.getToken(MySqlParser.MASTER_BIND, 0)

        def MASTER_HOST(self):
            return self.getToken(MySqlParser.MASTER_HOST, 0)

        def MASTER_USER(self):
            return self.getToken(MySqlParser.MASTER_USER, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(MySqlParser.MASTER_PASSWORD, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(MySqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(MySqlParser.MASTER_SSL_KEY, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(MySqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(MySqlParser.MASTER_TLS_VERSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_stringMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringMasterOption" ):
                listener.enterStringMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringMasterOption" ):
                listener.exitStringMasterOption(self)




    def stringMasterOption(self):

        localctx = MySqlParser.StringMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_stringMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3991
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MASTER_BIND or ((((_la - 444)) & ~0x3f) == 0 and ((1 << (_la - 444)) & ((1 << (MySqlParser.MASTER_HOST - 444)) | (1 << (MySqlParser.MASTER_LOG_FILE - 444)) | (1 << (MySqlParser.MASTER_PASSWORD - 444)) | (1 << (MySqlParser.MASTER_SSL_CA - 444)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 444)) | (1 << (MySqlParser.MASTER_SSL_CERT - 444)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 444)) | (1 << (MySqlParser.MASTER_SSL_CRL - 444)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 444)) | (1 << (MySqlParser.MASTER_SSL_KEY - 444)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 444)) | (1 << (MySqlParser.MASTER_USER - 444)))) != 0) or _la==MySqlParser.RELAY_LOG_FILE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_PORT(self):
            return self.getToken(MySqlParser.MASTER_PORT, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(MySqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_DELAY(self):
            return self.getToken(MySqlParser.MASTER_DELAY, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_decimalMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalMasterOption" ):
                listener.enterDecimalMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalMasterOption" ):
                listener.exitDecimalMasterOption(self)




    def decimalMasterOption(self):

        localctx = MySqlParser.DecimalMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_decimalMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3993
            _la = self._input.LA(1)
            if not(((((_la - 441)) & ~0x3f) == 0 and ((1 << (_la - 441)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 441)) | (1 << (MySqlParser.MASTER_DELAY - 441)) | (1 << (MySqlParser.MASTER_LOG_POS - 441)) | (1 << (MySqlParser.MASTER_PORT - 441)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 441)))) != 0) or _la==MySqlParser.RELAY_LOG_POS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_AUTO_POSITION(self):
            return self.getToken(MySqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_SSL(self):
            return self.getToken(MySqlParser.MASTER_SSL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_boolMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolMasterOption" ):
                listener.enterBoolMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolMasterOption" ):
                listener.exitBoolMasterOption(self)




    def boolMasterOption(self):

        localctx = MySqlParser.BoolMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_boolMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3995
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT or _la==MySqlParser.MASTER_AUTO_POSITION or _la==MySqlParser.MASTER_SSL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_channelOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelOption" ):
                listener.enterChannelOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelOption" ):
                listener.exitChannelOption(self)




    def channelOption(self):

        localctx = MySqlParser.ChannelOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_channelOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3997
            self.match(MySqlParser.FOR)
            self.state = 3998
            self.match(MySqlParser.CHANNEL)
            self.state = 3999
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_replicationFilter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WildIgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(MySqlParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildIgnoreTableReplication" ):
                listener.enterWildIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildIgnoreTableReplication" ):
                listener.exitWildIgnoreTableReplication(self)


    class DoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoTableReplication" ):
                listener.enterDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoTableReplication" ):
                listener.exitDoTableReplication(self)


    class IgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableReplication" ):
                listener.enterIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableReplication" ):
                listener.exitIgnoreTableReplication(self)


    class RewriteDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tablePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TablePairContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TablePairContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteDbReplication" ):
                listener.enterRewriteDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteDbReplication" ):
                listener.exitRewriteDbReplication(self)


    class DoDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_DB(self):
            return self.getToken(MySqlParser.REPLICATE_DO_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoDbReplication" ):
                listener.enterDoDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoDbReplication" ):
                listener.exitDoDbReplication(self)


    class IgnoreDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreDbReplication" ):
                listener.enterIgnoreDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreDbReplication" ):
                listener.exitIgnoreDbReplication(self)


    class WildDoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(MySqlParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildDoTableReplication" ):
                listener.enterWildDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildDoTableReplication" ):
                listener.exitWildDoTableReplication(self)



    def replicationFilter(self):

        localctx = MySqlParser.ReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_replicationFilter)
        self._la = 0 # Token type
        try:
            self.state = 4050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.REPLICATE_DO_DB]:
                localctx = MySqlParser.DoDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4001
                self.match(MySqlParser.REPLICATE_DO_DB)
                self.state = 4002
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4003
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4004
                self.uidList()
                self.state = 4005
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_IGNORE_DB]:
                localctx = MySqlParser.IgnoreDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4007
                self.match(MySqlParser.REPLICATE_IGNORE_DB)
                self.state = 4008
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4009
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4010
                self.uidList()
                self.state = 4011
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_DO_TABLE]:
                localctx = MySqlParser.DoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4013
                self.match(MySqlParser.REPLICATE_DO_TABLE)
                self.state = 4014
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4015
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4016
                self.tables()
                self.state = 4017
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_IGNORE_TABLE]:
                localctx = MySqlParser.IgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4019
                self.match(MySqlParser.REPLICATE_IGNORE_TABLE)
                self.state = 4020
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4021
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4022
                self.tables()
                self.state = 4023
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_WILD_DO_TABLE]:
                localctx = MySqlParser.WildDoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4025
                self.match(MySqlParser.REPLICATE_WILD_DO_TABLE)
                self.state = 4026
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4027
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4028
                self.simpleStrings()
                self.state = 4029
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_WILD_IGNORE_TABLE]:
                localctx = MySqlParser.WildIgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4031
                self.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE)
                self.state = 4032
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4033
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4034
                self.simpleStrings()
                self.state = 4035
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_REWRITE_DB]:
                localctx = MySqlParser.RewriteDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4037
                self.match(MySqlParser.REPLICATE_REWRITE_DB)
                self.state = 4038
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4039
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4040
                self.tablePair()
                self.state = 4045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4041
                    self.match(MySqlParser.COMMA)
                    self.state = 4042
                    self.tablePair()
                    self.state = 4047
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4048
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.firstTable = None # TableNameContext
            self.secondTable = None # TableNameContext

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_tablePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePair" ):
                listener.enterTablePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePair" ):
                listener.exitTablePair(self)




    def tablePair(self):

        localctx = MySqlParser.TablePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_tablePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4052
            self.match(MySqlParser.LR_BRACKET)
            self.state = 4053
            localctx.firstTable = self.tableName()
            self.state = 4054
            self.match(MySqlParser.COMMA)
            self.state = 4055
            localctx.secondTable = self.tableName()
            self.state = 4056
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IO_THREAD(self):
            return self.getToken(MySqlParser.IO_THREAD, 0)

        def SQL_THREAD(self):
            return self.getToken(MySqlParser.SQL_THREAD, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_threadType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadType" ):
                listener.enterThreadType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadType" ):
                listener.exitThreadType(self)




    def threadType(self):

        localctx = MySqlParser.ThreadTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_threadType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4058
            _la = self._input.LA(1)
            if not(_la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_untilOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GtidsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.gtids = None # Token
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def gtuidSet(self):
            return self.getTypedRuleContext(MySqlParser.GtuidSetContext,0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0)
        def SQL_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_AFTER_GTIDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtidsUntilOption" ):
                listener.enterGtidsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtidsUntilOption" ):
                listener.exitGtidsUntilOption(self)


    class SqlGapsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlGapsUntilOption" ):
                listener.enterSqlGapsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlGapsUntilOption" ):
                listener.exitSqlGapsUntilOption(self)


    class MasterLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterLogUntilOption" ):
                listener.enterMasterLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterLogUntilOption" ):
                listener.exitMasterLogUntilOption(self)


    class RelayLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelayLogUntilOption" ):
                listener.enterRelayLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelayLogUntilOption" ):
                listener.exitRelayLogUntilOption(self)



    def untilOption(self):

        localctx = MySqlParser.UntilOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_untilOption)
        self._la = 0 # Token type
        try:
            self.state = 4078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_BEFORE_GTIDS]:
                localctx = MySqlParser.GtidsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4060
                localctx.gtids = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SQL_AFTER_GTIDS or _la==MySqlParser.SQL_BEFORE_GTIDS):
                    localctx.gtids = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4061
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4062
                self.gtuidSet()
                pass
            elif token in [MySqlParser.MASTER_LOG_FILE]:
                localctx = MySqlParser.MasterLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4063
                self.match(MySqlParser.MASTER_LOG_FILE)
                self.state = 4064
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4065
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 4066
                self.match(MySqlParser.COMMA)
                self.state = 4067
                self.match(MySqlParser.MASTER_LOG_POS)
                self.state = 4068
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4069
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.RELAY_LOG_FILE]:
                localctx = MySqlParser.RelayLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4070
                self.match(MySqlParser.RELAY_LOG_FILE)
                self.state = 4071
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4072
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 4073
                self.match(MySqlParser.COMMA)
                self.state = 4074
                self.match(MySqlParser.RELAY_LOG_POS)
                self.state = 4075
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4076
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQL_AFTER_MTS_GAPS]:
                localctx = MySqlParser.SqlGapsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4077
                self.match(MySqlParser.SQL_AFTER_MTS_GAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_connectionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PluginDirConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPluginDir = None # Token
            self.copyFrom(ctx)

        def PLUGIN_DIR(self):
            return self.getToken(MySqlParser.PLUGIN_DIR, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginDirConnectionOption" ):
                listener.enterPluginDirConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginDirConnectionOption" ):
                listener.exitPluginDirConnectionOption(self)


    class UserConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptUser = None # Token
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserConnectionOption" ):
                listener.enterUserConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserConnectionOption" ):
                listener.exitUserConnectionOption(self)


    class DefaultAuthConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptDefAuth = None # Token
            self.copyFrom(ctx)

        def DEFAULT_AUTH(self):
            return self.getToken(MySqlParser.DEFAULT_AUTH, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultAuthConnectionOption" ):
                listener.enterDefaultAuthConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultAuthConnectionOption" ):
                listener.exitDefaultAuthConnectionOption(self)


    class PasswordConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPassword = None # Token
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordConnectionOption" ):
                listener.enterPasswordConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordConnectionOption" ):
                listener.exitPasswordConnectionOption(self)



    def connectionOption(self):

        localctx = MySqlParser.ConnectionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_connectionOption)
        try:
            self.state = 4092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.USER]:
                localctx = MySqlParser.UserConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4080
                self.match(MySqlParser.USER)
                self.state = 4081
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4082
                localctx.conOptUser = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PASSWORD]:
                localctx = MySqlParser.PasswordConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4083
                self.match(MySqlParser.PASSWORD)
                self.state = 4084
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4085
                localctx.conOptPassword = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DEFAULT_AUTH]:
                localctx = MySqlParser.DefaultAuthConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4086
                self.match(MySqlParser.DEFAULT_AUTH)
                self.state = 4087
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4088
                localctx.conOptDefAuth = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PLUGIN_DIR]:
                localctx = MySqlParser.PluginDirConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4089
                self.match(MySqlParser.PLUGIN_DIR)
                self.state = 4090
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4091
                localctx.conOptPluginDir = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GtuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uuidSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UuidSetContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UuidSetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_gtuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtuidSet" ):
                listener.enterGtuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtuidSet" ):
                listener.exitGtuidSet(self)




    def gtuidSet(self):

        localctx = MySqlParser.GtuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_gtuidSet)
        self._la = 0 # Token type
        try:
            self.state = 4103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4094
                self.uuidSet()
                self.state = 4099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4095
                    self.match(MySqlParser.COMMA)
                    self.state = 4096
                    self.uuidSet()
                    self.state = 4101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4102
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStartTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xaStart = None # Token
            self.xaAction = None # Token

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)

        def RESUME(self):
            return self.getToken(MySqlParser.RESUME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaStartTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStartTransaction" ):
                listener.enterXaStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStartTransaction" ):
                listener.exitXaStartTransaction(self)




    def xaStartTransaction(self):

        localctx = MySqlParser.XaStartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_xaStartTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4105
            self.match(MySqlParser.XA)
            self.state = 4106
            localctx.xaStart = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BEGIN or _la==MySqlParser.START):
                localctx.xaStart = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4107
            self.xid()
            self.state = 4109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.JOIN or _la==MySqlParser.RESUME:
                self.state = 4108
                localctx.xaAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.JOIN or _la==MySqlParser.RESUME):
                    localctx.xaAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaEndTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def SUSPEND(self):
            return self.getToken(MySqlParser.SUSPEND, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def MIGRATE(self):
            return self.getToken(MySqlParser.MIGRATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaEndTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaEndTransaction" ):
                listener.enterXaEndTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaEndTransaction" ):
                listener.exitXaEndTransaction(self)




    def xaEndTransaction(self):

        localctx = MySqlParser.XaEndTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_xaEndTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4111
            self.match(MySqlParser.XA)
            self.state = 4112
            self.match(MySqlParser.END)
            self.state = 4113
            self.xid()
            self.state = 4119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SUSPEND:
                self.state = 4114
                self.match(MySqlParser.SUSPEND)
                self.state = 4117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 4115
                    self.match(MySqlParser.FOR)
                    self.state = 4116
                    self.match(MySqlParser.MIGRATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaPrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaPrepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaPrepareStatement" ):
                listener.enterXaPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaPrepareStatement" ):
                listener.exitXaPrepareStatement(self)




    def xaPrepareStatement(self):

        localctx = MySqlParser.XaPrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_xaPrepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4121
            self.match(MySqlParser.XA)
            self.state = 4122
            self.match(MySqlParser.PREPARE)
            self.state = 4123
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaCommitWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def ONE(self):
            return self.getToken(MySqlParser.ONE, 0)

        def PHASE(self):
            return self.getToken(MySqlParser.PHASE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaCommitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaCommitWork" ):
                listener.enterXaCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaCommitWork" ):
                listener.exitXaCommitWork(self)




    def xaCommitWork(self):

        localctx = MySqlParser.XaCommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_xaCommitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4125
            self.match(MySqlParser.XA)
            self.state = 4126
            self.match(MySqlParser.COMMIT)
            self.state = 4127
            self.xid()
            self.state = 4130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ONE:
                self.state = 4128
                self.match(MySqlParser.ONE)
                self.state = 4129
                self.match(MySqlParser.PHASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRollbackWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaRollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRollbackWork" ):
                listener.enterXaRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRollbackWork" ):
                listener.exitXaRollbackWork(self)




    def xaRollbackWork(self):

        localctx = MySqlParser.XaRollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_xaRollbackWork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4132
            self.match(MySqlParser.XA)
            self.state = 4133
            self.match(MySqlParser.ROLLBACK)
            self.state = 4134
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRecoverWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def RECOVER(self):
            return self.getToken(MySqlParser.RECOVER, 0)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaRecoverWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRecoverWork" ):
                listener.enterXaRecoverWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRecoverWork" ):
                listener.exitXaRecoverWork(self)




    def xaRecoverWork(self):

        localctx = MySqlParser.XaRecoverWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_xaRecoverWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4136
            self.match(MySqlParser.XA)
            self.state = 4137
            self.match(MySqlParser.RECOVER)
            self.state = 4140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CONVERT:
                self.state = 4138
                self.match(MySqlParser.CONVERT)
                self.state = 4139
                self.xid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query = None # Token
            self.variable = None # Token

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_prepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStatement" ):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStatement" ):
                listener.exitPrepareStatement(self)




    def prepareStatement(self):

        localctx = MySqlParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_prepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4142
            self.match(MySqlParser.PREPARE)
            self.state = 4143
            self.uid()
            self.state = 4144
            self.match(MySqlParser.FROM)
            self.state = 4147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STRING_LITERAL]:
                self.state = 4145
                localctx.query = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.LOCAL_ID]:
                self.state = 4146
                localctx.variable = self.match(MySqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def userVariables(self):
            return self.getTypedRuleContext(MySqlParser.UserVariablesContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = MySqlParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4149
            self.match(MySqlParser.EXECUTE)
            self.state = 4150
            self.uid()
            self.state = 4153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USING:
                self.state = 4151
                self.match(MySqlParser.USING)
                self.state = 4152
                self.userVariables()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocatePrepareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropFormat = None # Token

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DEALLOCATE(self):
            return self.getToken(MySqlParser.DEALLOCATE, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_deallocatePrepare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocatePrepare" ):
                listener.enterDeallocatePrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocatePrepare" ):
                listener.exitDeallocatePrepare(self)




    def deallocatePrepare(self):

        localctx = MySqlParser.DeallocatePrepareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_deallocatePrepare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4155
            localctx.dropFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DROP or _la==MySqlParser.DEALLOCATE):
                localctx.dropFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4156
            self.match(MySqlParser.PREPARE)
            self.state = 4157
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(MySqlParser.BlockStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_routineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBody" ):
                listener.enterRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBody" ):
                listener.exitRoutineBody(self)




    def routineBody(self):

        localctx = MySqlParser.RoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_routineBody)
        try:
            self.state = 4161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4159
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4160
                self.sqlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def declareVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareVariableContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareVariableContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SEMI)
            else:
                return self.getToken(MySqlParser.SEMI, i)

        def declareCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareConditionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareConditionContext,i)


        def declareCursor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareCursorContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareCursorContext,i)


        def declareHandler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareHandlerContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareHandlerContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = MySqlParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.state = 4163
                self.uid()
                self.state = 4164
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4168
            self.match(MySqlParser.BEGIN)
            self.state = 4207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,602,self._ctx)
            if la_ == 1:
                self.state = 4174
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,597,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4169
                        self.declareVariable()
                        self.state = 4170
                        self.match(MySqlParser.SEMI) 
                    self.state = 4176
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,597,self._ctx)

                self.state = 4182
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,598,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4177
                        self.declareCondition()
                        self.state = 4178
                        self.match(MySqlParser.SEMI) 
                    self.state = 4184
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,598,self._ctx)

                self.state = 4190
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,599,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4185
                        self.declareCursor()
                        self.state = 4186
                        self.match(MySqlParser.SEMI) 
                    self.state = 4192
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,599,self._ctx)

                self.state = 4198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DECLARE:
                    self.state = 4193
                    self.declareHandler()
                    self.state = 4194
                    self.match(MySqlParser.SEMI)
                    self.state = 4200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,601,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4201
                        self.procedureSqlStatement() 
                    self.state = 4206
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,601,self._ctx)



            self.state = 4209
            self.match(MySqlParser.END)
            self.state = 4211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,603,self._ctx)
            if la_ == 1:
                self.state = 4210
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.CASE)
            else:
                return self.getToken(MySqlParser.CASE, i)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def caseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseAlternativeContext,i)


        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)




    def caseStatement(self):

        localctx = MySqlParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4213
            self.match(MySqlParser.CASE)
            self.state = 4216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,604,self._ctx)
            if la_ == 1:
                self.state = 4214
                self.uid()

            elif la_ == 2:
                self.state = 4215
                self.expression(0)


            self.state = 4219 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4218
                self.caseAlternative()
                self.state = 4221 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.WHEN):
                    break

            self.state = 4229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ELSE:
                self.state = 4223
                self.match(MySqlParser.ELSE)
                self.state = 4225 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4224
                        self.procedureSqlStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4227 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,606,self._ctx)



            self.state = 4231
            self.match(MySqlParser.END)
            self.state = 4232
            self.match(MySqlParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._procedureSqlStatement = None # ProcedureSqlStatementContext
            self.thenStatements = list() # of ProcedureSqlStatementContexts
            self.elseStatements = list() # of ProcedureSqlStatementContexts

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IF)
            else:
                return self.getToken(MySqlParser.IF, i)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def elifAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ElifAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ElifAlternativeContext,i)


        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = MySqlParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4234
            self.match(MySqlParser.IF)
            self.state = 4235
            self.expression(0)
            self.state = 4236
            self.match(MySqlParser.THEN)
            self.state = 4238 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4237
                    localctx._procedureSqlStatement = self.procedureSqlStatement()
                    localctx.thenStatements.append(localctx._procedureSqlStatement)

                else:
                    raise NoViableAltException(self)
                self.state = 4240 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,608,self._ctx)

            self.state = 4245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.ELSEIF:
                self.state = 4242
                self.elifAlternative()
                self.state = 4247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ELSE:
                self.state = 4248
                self.match(MySqlParser.ELSE)
                self.state = 4250 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4249
                        localctx._procedureSqlStatement = self.procedureSqlStatement()
                        localctx.elseStatements.append(localctx._procedureSqlStatement)

                    else:
                        raise NoViableAltException(self)
                    self.state = 4252 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,610,self._ctx)



            self.state = 4256
            self.match(MySqlParser.END)
            self.state = 4257
            self.match(MySqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(MySqlParser.ITERATE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)




    def iterateStatement(self):

        localctx = MySqlParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4259
            self.match(MySqlParser.ITERATE)
            self.state = 4260
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE(self):
            return self.getToken(MySqlParser.LEAVE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)




    def leaveStatement(self):

        localctx = MySqlParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4262
            self.match(MySqlParser.LEAVE)
            self.state = 4263
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOOP)
            else:
                return self.getToken(MySqlParser.LOOP, i)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)




    def loopStatement(self):

        localctx = MySqlParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 4265
                self.uid()
                self.state = 4266
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4270
            self.match(MySqlParser.LOOP)
            self.state = 4272 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4271
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4274 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,613,self._ctx)

            self.state = 4276
            self.match(MySqlParser.END)
            self.state = 4277
            self.match(MySqlParser.LOOP)
            self.state = 4279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 4278
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.REPEAT)
            else:
                return self.getToken(MySqlParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_repeatStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)




    def repeatStatement(self):

        localctx = MySqlParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 4281
                self.uid()
                self.state = 4282
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4286
            self.match(MySqlParser.REPEAT)
            self.state = 4288 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4287
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4290 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,616,self._ctx)

            self.state = 4292
            self.match(MySqlParser.UNTIL)
            self.state = 4293
            self.expression(0)
            self.state = 4294
            self.match(MySqlParser.END)
            self.state = 4295
            self.match(MySqlParser.REPEAT)
            self.state = 4297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 4296
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MySqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = MySqlParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4299
            self.match(MySqlParser.RETURN)
            self.state = 4300
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.WHILE)
            else:
                return self.getToken(MySqlParser.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = MySqlParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 4302
                self.uid()
                self.state = 4303
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4307
            self.match(MySqlParser.WHILE)
            self.state = 4308
            self.expression(0)
            self.state = 4309
            self.match(MySqlParser.DO)
            self.state = 4311 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4310
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4313 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,619,self._ctx)

            self.state = 4315
            self.match(MySqlParser.END)
            self.state = 4316
            self.match(MySqlParser.WHILE)
            self.state = 4318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.QUESTION_) | (1 << MySqlParser.PERCENT_S_) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (MySqlParser.GROUP - 69)) | (1 << (MySqlParser.LEFT - 69)) | (1 << (MySqlParser.NUMBER - 69)) | (1 << (MySqlParser.ORDER - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (MySqlParser.RIGHT - 136)) | (1 << (MySqlParser.SCHEMA - 136)) | (1 << (MySqlParser.STACKED - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)) | (1 << (MySqlParser.SERIAL - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.AVG - 266)) | (1 << (MySqlParser.BIT_AND - 266)) | (1 << (MySqlParser.BIT_OR - 266)) | (1 << (MySqlParser.BIT_XOR - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.GROUP_CONCAT - 266)) | (1 << (MySqlParser.MAX - 266)) | (1 << (MySqlParser.MIN - 266)) | (1 << (MySqlParser.STD - 266)) | (1 << (MySqlParser.STDDEV - 266)) | (1 << (MySqlParser.STDDEV_POP - 266)) | (1 << (MySqlParser.STDDEV_SAMP - 266)) | (1 << (MySqlParser.SUM - 266)) | (1 << (MySqlParser.VAR_POP - 266)) | (1 << (MySqlParser.VAR_SAMP - 266)) | (1 << (MySqlParser.VARIANCE - 266)) | (1 << (MySqlParser.POSITION - 266)) | (1 << (MySqlParser.ACCOUNT - 266)) | (1 << (MySqlParser.ACTION - 266)) | (1 << (MySqlParser.AFTER - 266)) | (1 << (MySqlParser.AGGREGATE - 266)) | (1 << (MySqlParser.ALGORITHM - 266)) | (1 << (MySqlParser.ANY - 266)) | (1 << (MySqlParser.AT - 266)) | (1 << (MySqlParser.AUTHORS - 266)) | (1 << (MySqlParser.AUTOCOMMIT - 266)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 266)) | (1 << (MySqlParser.AUTO_INCREMENT - 266)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 266)) | (1 << (MySqlParser.BEGIN - 266)) | (1 << (MySqlParser.BINLOG - 266)) | (1 << (MySqlParser.BIT - 266)) | (1 << (MySqlParser.BLOCK - 266)) | (1 << (MySqlParser.BOOL - 266)) | (1 << (MySqlParser.BOOLEAN - 266)) | (1 << (MySqlParser.BTREE - 266)) | (1 << (MySqlParser.CACHE - 266)) | (1 << (MySqlParser.CASCADED - 266)) | (1 << (MySqlParser.CHAIN - 266)) | (1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.CHANNEL - 266)) | (1 << (MySqlParser.CHECKSUM - 266)) | (1 << (MySqlParser.PAGE_CHECKSUM - 266)) | (1 << (MySqlParser.CIPHER - 266)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.CLIENT - 330)) | (1 << (MySqlParser.CLOSE - 330)) | (1 << (MySqlParser.COALESCE - 330)) | (1 << (MySqlParser.CODE - 330)) | (1 << (MySqlParser.COLUMNS - 330)) | (1 << (MySqlParser.COLUMN_FORMAT - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.COMMENT - 330)) | (1 << (MySqlParser.COMMIT - 330)) | (1 << (MySqlParser.COMPACT - 330)) | (1 << (MySqlParser.COMPLETION - 330)) | (1 << (MySqlParser.COMPRESSED - 330)) | (1 << (MySqlParser.COMPRESSION - 330)) | (1 << (MySqlParser.CONCURRENT - 330)) | (1 << (MySqlParser.CONNECT - 330)) | (1 << (MySqlParser.CONNECTION - 330)) | (1 << (MySqlParser.CONSISTENT - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CONTAINS - 330)) | (1 << (MySqlParser.CONTEXT - 330)) | (1 << (MySqlParser.CONTRIBUTORS - 330)) | (1 << (MySqlParser.COPY - 330)) | (1 << (MySqlParser.CPU - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)) | (1 << (MySqlParser.DATA - 330)) | (1 << (MySqlParser.DATAFILE - 330)) | (1 << (MySqlParser.DEALLOCATE - 330)) | (1 << (MySqlParser.DEFAULT_AUTH - 330)) | (1 << (MySqlParser.DEFINER - 330)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 330)) | (1 << (MySqlParser.DES_KEY_FILE - 330)) | (1 << (MySqlParser.DIRECTORY - 330)) | (1 << (MySqlParser.DISABLE - 330)) | (1 << (MySqlParser.DISCARD - 330)) | (1 << (MySqlParser.DISK - 330)) | (1 << (MySqlParser.DO - 330)) | (1 << (MySqlParser.DUMPFILE - 330)) | (1 << (MySqlParser.DUPLICATE - 330)) | (1 << (MySqlParser.DYNAMIC - 330)) | (1 << (MySqlParser.ENABLE - 330)) | (1 << (MySqlParser.ENCRYPTION - 330)) | (1 << (MySqlParser.END - 330)) | (1 << (MySqlParser.ENDS - 330)) | (1 << (MySqlParser.ENGINE - 330)) | (1 << (MySqlParser.ENGINES - 330)) | (1 << (MySqlParser.ERROR - 330)) | (1 << (MySqlParser.ERRORS - 330)) | (1 << (MySqlParser.ESCAPE - 330)) | (1 << (MySqlParser.EVEN - 330)) | (1 << (MySqlParser.EVENT - 330)) | (1 << (MySqlParser.EVENTS - 330)) | (1 << (MySqlParser.EVERY - 330)) | (1 << (MySqlParser.EXCHANGE - 330)) | (1 << (MySqlParser.EXCLUSIVE - 330)) | (1 << (MySqlParser.EXPIRE - 330)) | (1 << (MySqlParser.EXPORT - 330)) | (1 << (MySqlParser.EXTENDED - 330)) | (1 << (MySqlParser.EXTENT_SIZE - 330)) | (1 << (MySqlParser.FAST - 330)) | (1 << (MySqlParser.FAULTS - 330)) | (1 << (MySqlParser.FIELDS - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.FILE_BLOCK_SIZE - 394)) | (1 << (MySqlParser.FILTER - 394)) | (1 << (MySqlParser.FIRST - 394)) | (1 << (MySqlParser.FIXED - 394)) | (1 << (MySqlParser.FLUSH - 394)) | (1 << (MySqlParser.FOLLOWS - 394)) | (1 << (MySqlParser.FOUND - 394)) | (1 << (MySqlParser.FULL - 394)) | (1 << (MySqlParser.FUNCTION - 394)) | (1 << (MySqlParser.GENERAL - 394)) | (1 << (MySqlParser.GLOBAL - 394)) | (1 << (MySqlParser.GRANTS - 394)) | (1 << (MySqlParser.GROUP_REPLICATION - 394)) | (1 << (MySqlParser.HANDLER - 394)) | (1 << (MySqlParser.HASH - 394)) | (1 << (MySqlParser.HELP - 394)) | (1 << (MySqlParser.HOST - 394)) | (1 << (MySqlParser.HOSTS - 394)) | (1 << (MySqlParser.IDENTIFIED - 394)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 394)) | (1 << (MySqlParser.IMPORT - 394)) | (1 << (MySqlParser.INDEXES - 394)) | (1 << (MySqlParser.INITIAL_SIZE - 394)) | (1 << (MySqlParser.INPLACE - 394)) | (1 << (MySqlParser.INSERT_METHOD - 394)) | (1 << (MySqlParser.INSTALL - 394)) | (1 << (MySqlParser.INSTANCE - 394)) | (1 << (MySqlParser.INVISIBLE - 394)) | (1 << (MySqlParser.INVOKER - 394)) | (1 << (MySqlParser.IO - 394)) | (1 << (MySqlParser.IO_THREAD - 394)) | (1 << (MySqlParser.IPC - 394)) | (1 << (MySqlParser.ISOLATION - 394)) | (1 << (MySqlParser.ISSUER - 394)) | (1 << (MySqlParser.JSON - 394)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 394)) | (1 << (MySqlParser.LANGUAGE - 394)) | (1 << (MySqlParser.LAST - 394)) | (1 << (MySqlParser.LEAVES - 394)) | (1 << (MySqlParser.LESS - 394)) | (1 << (MySqlParser.LEVEL - 394)) | (1 << (MySqlParser.LIST - 394)) | (1 << (MySqlParser.LOCAL - 394)) | (1 << (MySqlParser.LOGFILE - 394)) | (1 << (MySqlParser.LOGS - 394)) | (1 << (MySqlParser.MASTER - 394)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 394)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 394)) | (1 << (MySqlParser.MASTER_DELAY - 394)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 394)) | (1 << (MySqlParser.MASTER_HOST - 394)) | (1 << (MySqlParser.MASTER_LOG_FILE - 394)) | (1 << (MySqlParser.MASTER_LOG_POS - 394)) | (1 << (MySqlParser.MASTER_PASSWORD - 394)) | (1 << (MySqlParser.MASTER_PORT - 394)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 394)) | (1 << (MySqlParser.MASTER_SSL - 394)) | (1 << (MySqlParser.MASTER_SSL_CA - 394)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_CERT - 394)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 394)) | (1 << (MySqlParser.MASTER_SSL_CRL - 394)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 394)) | (1 << (MySqlParser.MASTER_SSL_KEY - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (MySqlParser.MASTER_TLS_VERSION - 458)) | (1 << (MySqlParser.MASTER_USER - 458)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_ROWS - 458)) | (1 << (MySqlParser.MAX_SIZE - 458)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 458)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 458)) | (1 << (MySqlParser.MEDIUM - 458)) | (1 << (MySqlParser.MEMBER - 458)) | (1 << (MySqlParser.MERGE - 458)) | (1 << (MySqlParser.MESSAGE_TEXT - 458)) | (1 << (MySqlParser.MID - 458)) | (1 << (MySqlParser.MIGRATE - 458)) | (1 << (MySqlParser.MIN_ROWS - 458)) | (1 << (MySqlParser.MODE - 458)) | (1 << (MySqlParser.MODIFY - 458)) | (1 << (MySqlParser.MUTEX - 458)) | (1 << (MySqlParser.MYSQL - 458)) | (1 << (MySqlParser.MYSQL_ERRNO - 458)) | (1 << (MySqlParser.NAME - 458)) | (1 << (MySqlParser.NAMES - 458)) | (1 << (MySqlParser.NCHAR - 458)) | (1 << (MySqlParser.NEVER - 458)) | (1 << (MySqlParser.NEXT - 458)) | (1 << (MySqlParser.NO - 458)) | (1 << (MySqlParser.NODEGROUP - 458)) | (1 << (MySqlParser.NONE - 458)) | (1 << (MySqlParser.ODBC - 458)) | (1 << (MySqlParser.OFFLINE - 458)) | (1 << (MySqlParser.OFFSET - 458)) | (1 << (MySqlParser.OF - 458)) | (1 << (MySqlParser.OJ - 458)) | (1 << (MySqlParser.OLD_PASSWORD - 458)) | (1 << (MySqlParser.ONE - 458)) | (1 << (MySqlParser.ONLINE - 458)) | (1 << (MySqlParser.ONLY - 458)) | (1 << (MySqlParser.OPEN - 458)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 458)) | (1 << (MySqlParser.OPTIONS - 458)) | (1 << (MySqlParser.OWNER - 458)) | (1 << (MySqlParser.PACK_KEYS - 458)) | (1 << (MySqlParser.PAGE - 458)) | (1 << (MySqlParser.PARSER - 458)) | (1 << (MySqlParser.PARTIAL - 458)) | (1 << (MySqlParser.PARTITIONING - 458)) | (1 << (MySqlParser.PARTITIONS - 458)) | (1 << (MySqlParser.PASSWORD - 458)) | (1 << (MySqlParser.PHASE - 458)) | (1 << (MySqlParser.PLUGIN - 458)) | (1 << (MySqlParser.PLUGIN_DIR - 458)) | (1 << (MySqlParser.PLUGINS - 458)) | (1 << (MySqlParser.PORT - 458)) | (1 << (MySqlParser.PRECEDES - 458)) | (1 << (MySqlParser.PREPARE - 458)) | (1 << (MySqlParser.PRESERVE - 458)) | (1 << (MySqlParser.PREV - 458)) | (1 << (MySqlParser.PROCESSLIST - 458)) | (1 << (MySqlParser.PROFILE - 458)) | (1 << (MySqlParser.PROFILES - 458)) | (1 << (MySqlParser.PROXY - 458)) | (1 << (MySqlParser.QUERY - 458)) | (1 << (MySqlParser.QUICK - 458)) | (1 << (MySqlParser.REBUILD - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (MySqlParser.RECOVER - 522)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 522)) | (1 << (MySqlParser.REDUNDANT - 522)) | (1 << (MySqlParser.RELAY - 522)) | (1 << (MySqlParser.RELAY_LOG_FILE - 522)) | (1 << (MySqlParser.RELAY_LOG_POS - 522)) | (1 << (MySqlParser.RELAYLOG - 522)) | (1 << (MySqlParser.REMOVE - 522)) | (1 << (MySqlParser.REORGANIZE - 522)) | (1 << (MySqlParser.REPAIR - 522)) | (1 << (MySqlParser.REPLICATE_DO_DB - 522)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 522)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 522)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 522)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 522)) | (1 << (MySqlParser.REPLICATION - 522)) | (1 << (MySqlParser.RESET - 522)) | (1 << (MySqlParser.RESUME - 522)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 522)) | (1 << (MySqlParser.RETURNS - 522)) | (1 << (MySqlParser.ROLE - 522)) | (1 << (MySqlParser.ROLLBACK - 522)) | (1 << (MySqlParser.ROLLUP - 522)) | (1 << (MySqlParser.ROTATE - 522)) | (1 << (MySqlParser.ROW - 522)) | (1 << (MySqlParser.ROWS - 522)) | (1 << (MySqlParser.ROW_FORMAT - 522)) | (1 << (MySqlParser.SAVEPOINT - 522)) | (1 << (MySqlParser.SCHEDULE - 522)) | (1 << (MySqlParser.SECURITY - 522)) | (1 << (MySqlParser.SERVER - 522)) | (1 << (MySqlParser.SESSION - 522)) | (1 << (MySqlParser.SHARE - 522)) | (1 << (MySqlParser.SHARED - 522)) | (1 << (MySqlParser.SIGNED - 522)) | (1 << (MySqlParser.SIMPLE - 522)) | (1 << (MySqlParser.SLAVE - 522)) | (1 << (MySqlParser.SLOW - 522)) | (1 << (MySqlParser.SNAPSHOT - 522)) | (1 << (MySqlParser.SOCKET - 522)) | (1 << (MySqlParser.SOME - 522)) | (1 << (MySqlParser.SONAME - 522)) | (1 << (MySqlParser.SOUNDS - 522)) | (1 << (MySqlParser.SOURCE - 522)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 522)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 522)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 522)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 522)) | (1 << (MySqlParser.SQL_CACHE - 522)) | (1 << (MySqlParser.SQL_NO_CACHE - 522)) | (1 << (MySqlParser.SQL_THREAD - 522)) | (1 << (MySqlParser.START - 522)) | (1 << (MySqlParser.STARTS - 522)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 522)) | (1 << (MySqlParser.STATS_PERSISTENT - 522)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 522)) | (1 << (MySqlParser.STATUS - 522)) | (1 << (MySqlParser.STOP - 522)) | (1 << (MySqlParser.STORAGE - 522)) | (1 << (MySqlParser.STRING - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (MySqlParser.SUBCLASS_ORIGIN - 586)) | (1 << (MySqlParser.SUBJECT - 586)) | (1 << (MySqlParser.SUBPARTITION - 586)) | (1 << (MySqlParser.SUBPARTITIONS - 586)) | (1 << (MySqlParser.SUSPEND - 586)) | (1 << (MySqlParser.SWAPS - 586)) | (1 << (MySqlParser.SWITCHES - 586)) | (1 << (MySqlParser.TABLE_NAME - 586)) | (1 << (MySqlParser.TABLESPACE - 586)) | (1 << (MySqlParser.TEMPORARY - 586)) | (1 << (MySqlParser.TEMPTABLE - 586)) | (1 << (MySqlParser.THAN - 586)) | (1 << (MySqlParser.TRADITIONAL - 586)) | (1 << (MySqlParser.TRANSACTION - 586)) | (1 << (MySqlParser.TRANSACTIONAL - 586)) | (1 << (MySqlParser.TRIGGERS - 586)) | (1 << (MySqlParser.TRUNCATE - 586)) | (1 << (MySqlParser.UNDEFINED - 586)) | (1 << (MySqlParser.UNDOFILE - 586)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 586)) | (1 << (MySqlParser.UNINSTALL - 586)) | (1 << (MySqlParser.UNKNOWN - 586)) | (1 << (MySqlParser.UNTIL - 586)) | (1 << (MySqlParser.UPGRADE - 586)) | (1 << (MySqlParser.USER - 586)) | (1 << (MySqlParser.USE_FRM - 586)) | (1 << (MySqlParser.USER_RESOURCES - 586)) | (1 << (MySqlParser.VALIDATION - 586)) | (1 << (MySqlParser.VALUE - 586)) | (1 << (MySqlParser.VARIABLES - 586)) | (1 << (MySqlParser.VIEW - 586)) | (1 << (MySqlParser.VISIBLE - 586)) | (1 << (MySqlParser.WAIT - 586)) | (1 << (MySqlParser.WARNINGS - 586)) | (1 << (MySqlParser.WITHOUT - 586)) | (1 << (MySqlParser.WORK - 586)) | (1 << (MySqlParser.WRAPPER - 586)) | (1 << (MySqlParser.X509 - 586)) | (1 << (MySqlParser.XA - 586)) | (1 << (MySqlParser.XML - 586)) | (1 << (MySqlParser.INTERNAL - 586)) | (1 << (MySqlParser.QUARTER - 586)) | (1 << (MySqlParser.MONTH - 586)) | (1 << (MySqlParser.DAY - 586)) | (1 << (MySqlParser.HOUR - 586)) | (1 << (MySqlParser.MINUTE - 586)) | (1 << (MySqlParser.WEEK - 586)) | (1 << (MySqlParser.SECOND - 586)) | (1 << (MySqlParser.MICROSECOND - 586)) | (1 << (MySqlParser.TABLES - 586)) | (1 << (MySqlParser.ROUTINE - 586)) | (1 << (MySqlParser.EXECUTE - 586)) | (1 << (MySqlParser.FILE - 586)) | (1 << (MySqlParser.PROCESS - 586)) | (1 << (MySqlParser.RELOAD - 586)) | (1 << (MySqlParser.SHUTDOWN - 586)) | (1 << (MySqlParser.SUPER - 586)) | (1 << (MySqlParser.PRIVILEGES - 586)))) != 0) or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (MySqlParser.AUDIT_ADMIN - 651)) | (1 << (MySqlParser.BACKUP_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ADMIN - 651)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.CLONE_ADMIN - 651)) | (1 << (MySqlParser.CONNECTION_ADMIN - 651)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_ADMIN - 651)) | (1 << (MySqlParser.FIREWALL_USER - 651)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 651)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 651)) | (1 << (MySqlParser.NDB_STORED_USER - 651)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.REPLICATION_APPLIER - 651)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 651)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 651)) | (1 << (MySqlParser.ROLE_ADMIN - 651)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.SET_USER_ID - 651)) | (1 << (MySqlParser.SHOW_ROUTINE - 651)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 651)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 651)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 651)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 651)) | (1 << (MySqlParser.ARMSCII8 - 651)) | (1 << (MySqlParser.ASCII - 651)) | (1 << (MySqlParser.BIG5 - 651)) | (1 << (MySqlParser.CP1250 - 651)) | (1 << (MySqlParser.CP1251 - 651)) | (1 << (MySqlParser.CP1256 - 651)) | (1 << (MySqlParser.CP1257 - 651)) | (1 << (MySqlParser.CP850 - 651)) | (1 << (MySqlParser.CP852 - 651)) | (1 << (MySqlParser.CP866 - 651)) | (1 << (MySqlParser.CP932 - 651)) | (1 << (MySqlParser.DEC8 - 651)) | (1 << (MySqlParser.EUCJPMS - 651)) | (1 << (MySqlParser.EUCKR - 651)) | (1 << (MySqlParser.GB2312 - 651)) | (1 << (MySqlParser.GBK - 651)) | (1 << (MySqlParser.GEOSTD8 - 651)) | (1 << (MySqlParser.GREEK - 651)) | (1 << (MySqlParser.HEBREW - 651)) | (1 << (MySqlParser.HP8 - 651)) | (1 << (MySqlParser.KEYBCS2 - 651)) | (1 << (MySqlParser.KOI8R - 651)) | (1 << (MySqlParser.KOI8U - 651)) | (1 << (MySqlParser.LATIN1 - 651)) | (1 << (MySqlParser.LATIN2 - 651)) | (1 << (MySqlParser.LATIN5 - 651)) | (1 << (MySqlParser.LATIN7 - 651)) | (1 << (MySqlParser.MACCE - 651)) | (1 << (MySqlParser.MACROMAN - 651)) | (1 << (MySqlParser.SJIS - 651)) | (1 << (MySqlParser.SWE7 - 651)) | (1 << (MySqlParser.TIS620 - 651)) | (1 << (MySqlParser.UCS2 - 651)))) != 0) or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (MySqlParser.UJIS - 715)) | (1 << (MySqlParser.UTF16 - 715)) | (1 << (MySqlParser.UTF16LE - 715)) | (1 << (MySqlParser.UTF32 - 715)) | (1 << (MySqlParser.UTF8 - 715)) | (1 << (MySqlParser.UTF8MB3 - 715)) | (1 << (MySqlParser.UTF8MB4 - 715)) | (1 << (MySqlParser.ARCHIVE - 715)) | (1 << (MySqlParser.BLACKHOLE - 715)) | (1 << (MySqlParser.CSV - 715)) | (1 << (MySqlParser.FEDERATED - 715)) | (1 << (MySqlParser.INNODB - 715)) | (1 << (MySqlParser.MEMORY - 715)) | (1 << (MySqlParser.MRG_MYISAM - 715)) | (1 << (MySqlParser.MYISAM - 715)) | (1 << (MySqlParser.NDB - 715)) | (1 << (MySqlParser.NDBCLUSTER - 715)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 715)) | (1 << (MySqlParser.TOKUDB - 715)) | (1 << (MySqlParser.REPEATABLE - 715)) | (1 << (MySqlParser.COMMITTED - 715)) | (1 << (MySqlParser.UNCOMMITTED - 715)) | (1 << (MySqlParser.SERIALIZABLE - 715)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 715)) | (1 << (MySqlParser.LINESTRING - 715)) | (1 << (MySqlParser.MULTILINESTRING - 715)) | (1 << (MySqlParser.MULTIPOINT - 715)) | (1 << (MySqlParser.MULTIPOLYGON - 715)) | (1 << (MySqlParser.POINT - 715)) | (1 << (MySqlParser.POLYGON - 715)) | (1 << (MySqlParser.ABS - 715)) | (1 << (MySqlParser.ACOS - 715)) | (1 << (MySqlParser.ADDDATE - 715)) | (1 << (MySqlParser.ADDTIME - 715)) | (1 << (MySqlParser.AES_DECRYPT - 715)) | (1 << (MySqlParser.AES_ENCRYPT - 715)) | (1 << (MySqlParser.AREA - 715)) | (1 << (MySqlParser.ASBINARY - 715)) | (1 << (MySqlParser.ASIN - 715)) | (1 << (MySqlParser.ASTEXT - 715)) | (1 << (MySqlParser.ASWKB - 715)) | (1 << (MySqlParser.ASWKT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 715)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 715)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 715)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 715)) | (1 << (MySqlParser.ATAN - 715)) | (1 << (MySqlParser.ATAN2 - 715)) | (1 << (MySqlParser.BENCHMARK - 715)) | (1 << (MySqlParser.BIN - 715)) | (1 << (MySqlParser.BIT_COUNT - 715)) | (1 << (MySqlParser.BIT_LENGTH - 715)) | (1 << (MySqlParser.BUFFER - 715)) | (1 << (MySqlParser.CATALOG_NAME - 715)) | (1 << (MySqlParser.CEIL - 715)) | (1 << (MySqlParser.CEILING - 715)) | (1 << (MySqlParser.CENTROID - 715)) | (1 << (MySqlParser.CHARACTER_LENGTH - 715)) | (1 << (MySqlParser.CHARSET - 715)) | (1 << (MySqlParser.CHAR_LENGTH - 715)) | (1 << (MySqlParser.COERCIBILITY - 715)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (MySqlParser.COLLATION - 779)) | (1 << (MySqlParser.COMPRESS - 779)) | (1 << (MySqlParser.CONCAT - 779)) | (1 << (MySqlParser.CONCAT_WS - 779)) | (1 << (MySqlParser.CONNECTION_ID - 779)) | (1 << (MySqlParser.CONV - 779)) | (1 << (MySqlParser.CONVERT_TZ - 779)) | (1 << (MySqlParser.COS - 779)) | (1 << (MySqlParser.COT - 779)) | (1 << (MySqlParser.CRC32 - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 779)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 779)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 779)) | (1 << (MySqlParser.CREATE_DIGEST - 779)) | (1 << (MySqlParser.CROSSES - 779)) | (1 << (MySqlParser.DATEDIFF - 779)) | (1 << (MySqlParser.DATE_FORMAT - 779)) | (1 << (MySqlParser.DAYNAME - 779)) | (1 << (MySqlParser.DAYOFMONTH - 779)) | (1 << (MySqlParser.DAYOFWEEK - 779)) | (1 << (MySqlParser.DAYOFYEAR - 779)) | (1 << (MySqlParser.DECODE - 779)) | (1 << (MySqlParser.DEGREES - 779)) | (1 << (MySqlParser.DES_DECRYPT - 779)) | (1 << (MySqlParser.DES_ENCRYPT - 779)) | (1 << (MySqlParser.DIMENSION - 779)) | (1 << (MySqlParser.DISJOINT - 779)) | (1 << (MySqlParser.ELT - 779)) | (1 << (MySqlParser.ENCODE - 779)) | (1 << (MySqlParser.ENCRYPT - 779)) | (1 << (MySqlParser.ENDPOINT - 779)) | (1 << (MySqlParser.ENVELOPE - 779)) | (1 << (MySqlParser.EQUALS - 779)) | (1 << (MySqlParser.EXP - 779)) | (1 << (MySqlParser.EXPORT_SET - 779)) | (1 << (MySqlParser.EXTERIORRING - 779)) | (1 << (MySqlParser.EXTRACTVALUE - 779)) | (1 << (MySqlParser.FIELD - 779)) | (1 << (MySqlParser.FIND_IN_SET - 779)) | (1 << (MySqlParser.FLOOR - 779)) | (1 << (MySqlParser.FORMAT - 779)) | (1 << (MySqlParser.FOUND_ROWS - 779)) | (1 << (MySqlParser.FROM_BASE64 - 779)) | (1 << (MySqlParser.FROM_DAYS - 779)) | (1 << (MySqlParser.FROM_UNIXTIME - 779)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 779)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 779)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 779)) | (1 << (MySqlParser.GEOMETRYN - 779)) | (1 << (MySqlParser.GEOMETRYTYPE - 779)) | (1 << (MySqlParser.GEOMFROMTEXT - 779)) | (1 << (MySqlParser.GEOMFROMWKB - 779)) | (1 << (MySqlParser.GET_FORMAT - 779)) | (1 << (MySqlParser.GET_LOCK - 779)) | (1 << (MySqlParser.GLENGTH - 779)) | (1 << (MySqlParser.GREATEST - 779)) | (1 << (MySqlParser.GTID_SUBSET - 779)) | (1 << (MySqlParser.GTID_SUBTRACT - 779)) | (1 << (MySqlParser.HEX - 779)) | (1 << (MySqlParser.IFNULL - 779)) | (1 << (MySqlParser.INET6_ATON - 779)))) != 0) or ((((_la - 843)) & ~0x3f) == 0 and ((1 << (_la - 843)) & ((1 << (MySqlParser.INET6_NTOA - 843)) | (1 << (MySqlParser.INET_ATON - 843)) | (1 << (MySqlParser.INET_NTOA - 843)) | (1 << (MySqlParser.INSTR - 843)) | (1 << (MySqlParser.INTERIORRINGN - 843)) | (1 << (MySqlParser.INTERSECTS - 843)) | (1 << (MySqlParser.ISCLOSED - 843)) | (1 << (MySqlParser.ISEMPTY - 843)) | (1 << (MySqlParser.ISNULL - 843)) | (1 << (MySqlParser.ISSIMPLE - 843)) | (1 << (MySqlParser.IS_FREE_LOCK - 843)) | (1 << (MySqlParser.IS_IPV4 - 843)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 843)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 843)) | (1 << (MySqlParser.IS_IPV6 - 843)) | (1 << (MySqlParser.IS_USED_LOCK - 843)) | (1 << (MySqlParser.LAST_INSERT_ID - 843)) | (1 << (MySqlParser.LCASE - 843)) | (1 << (MySqlParser.LEAST - 843)) | (1 << (MySqlParser.LENGTH - 843)) | (1 << (MySqlParser.LINEFROMTEXT - 843)) | (1 << (MySqlParser.LINEFROMWKB - 843)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.LN - 843)) | (1 << (MySqlParser.LOAD_FILE - 843)) | (1 << (MySqlParser.LOCATE - 843)) | (1 << (MySqlParser.LOG - 843)) | (1 << (MySqlParser.LOG10 - 843)) | (1 << (MySqlParser.LOG2 - 843)) | (1 << (MySqlParser.LOWER - 843)) | (1 << (MySqlParser.LPAD - 843)) | (1 << (MySqlParser.LTRIM - 843)) | (1 << (MySqlParser.MAKEDATE - 843)) | (1 << (MySqlParser.MAKETIME - 843)) | (1 << (MySqlParser.MAKE_SET - 843)) | (1 << (MySqlParser.MASTER_POS_WAIT - 843)) | (1 << (MySqlParser.MBRCONTAINS - 843)) | (1 << (MySqlParser.MBRDISJOINT - 843)) | (1 << (MySqlParser.MBREQUAL - 843)) | (1 << (MySqlParser.MBRINTERSECTS - 843)) | (1 << (MySqlParser.MBROVERLAPS - 843)) | (1 << (MySqlParser.MBRTOUCHES - 843)) | (1 << (MySqlParser.MBRWITHIN - 843)) | (1 << (MySqlParser.MD5 - 843)) | (1 << (MySqlParser.MLINEFROMTEXT - 843)) | (1 << (MySqlParser.MLINEFROMWKB - 843)) | (1 << (MySqlParser.MONTHNAME - 843)) | (1 << (MySqlParser.MPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MPOINTFROMWKB - 843)) | (1 << (MySqlParser.MPOLYFROMTEXT - 843)) | (1 << (MySqlParser.MPOLYFROMWKB - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 843)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 843)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 843)) | (1 << (MySqlParser.NAME_CONST - 843)) | (1 << (MySqlParser.NULLIF - 843)) | (1 << (MySqlParser.NUMGEOMETRIES - 843)) | (1 << (MySqlParser.NUMINTERIORRINGS - 843)) | (1 << (MySqlParser.NUMPOINTS - 843)) | (1 << (MySqlParser.OCT - 843)))) != 0) or ((((_la - 907)) & ~0x3f) == 0 and ((1 << (_la - 907)) & ((1 << (MySqlParser.OCTET_LENGTH - 907)) | (1 << (MySqlParser.ORD - 907)) | (1 << (MySqlParser.OVERLAPS - 907)) | (1 << (MySqlParser.PERIOD_ADD - 907)) | (1 << (MySqlParser.PERIOD_DIFF - 907)) | (1 << (MySqlParser.PI - 907)) | (1 << (MySqlParser.POINTFROMTEXT - 907)) | (1 << (MySqlParser.POINTFROMWKB - 907)) | (1 << (MySqlParser.POINTN - 907)) | (1 << (MySqlParser.POLYFROMTEXT - 907)) | (1 << (MySqlParser.POLYFROMWKB - 907)) | (1 << (MySqlParser.POLYGONFROMTEXT - 907)) | (1 << (MySqlParser.POLYGONFROMWKB - 907)) | (1 << (MySqlParser.POW - 907)) | (1 << (MySqlParser.POWER - 907)) | (1 << (MySqlParser.QUOTE - 907)) | (1 << (MySqlParser.RADIANS - 907)) | (1 << (MySqlParser.RAND - 907)) | (1 << (MySqlParser.RANDOM_BYTES - 907)) | (1 << (MySqlParser.RELEASE_LOCK - 907)) | (1 << (MySqlParser.REVERSE - 907)) | (1 << (MySqlParser.ROUND - 907)) | (1 << (MySqlParser.ROW_COUNT - 907)) | (1 << (MySqlParser.RPAD - 907)) | (1 << (MySqlParser.RTRIM - 907)) | (1 << (MySqlParser.SEC_TO_TIME - 907)) | (1 << (MySqlParser.SESSION_USER - 907)) | (1 << (MySqlParser.SHA - 907)) | (1 << (MySqlParser.SHA1 - 907)) | (1 << (MySqlParser.SHA2 - 907)) | (1 << (MySqlParser.SCHEMA_NAME - 907)) | (1 << (MySqlParser.SIGN - 907)) | (1 << (MySqlParser.SIN - 907)) | (1 << (MySqlParser.SLEEP - 907)) | (1 << (MySqlParser.SOUNDEX - 907)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 907)) | (1 << (MySqlParser.SQRT - 907)) | (1 << (MySqlParser.SRID - 907)) | (1 << (MySqlParser.STARTPOINT - 907)) | (1 << (MySqlParser.STRCMP - 907)) | (1 << (MySqlParser.STR_TO_DATE - 907)) | (1 << (MySqlParser.ST_AREA - 907)) | (1 << (MySqlParser.ST_ASBINARY - 907)) | (1 << (MySqlParser.ST_ASTEXT - 907)) | (1 << (MySqlParser.ST_ASWKB - 907)) | (1 << (MySqlParser.ST_ASWKT - 907)) | (1 << (MySqlParser.ST_BUFFER - 907)) | (1 << (MySqlParser.ST_CENTROID - 907)) | (1 << (MySqlParser.ST_CONTAINS - 907)) | (1 << (MySqlParser.ST_CROSSES - 907)) | (1 << (MySqlParser.ST_DIFFERENCE - 907)) | (1 << (MySqlParser.ST_DIMENSION - 907)) | (1 << (MySqlParser.ST_DISJOINT - 907)) | (1 << (MySqlParser.ST_DISTANCE - 907)) | (1 << (MySqlParser.ST_ENDPOINT - 907)) | (1 << (MySqlParser.ST_ENVELOPE - 907)) | (1 << (MySqlParser.ST_EQUALS - 907)) | (1 << (MySqlParser.ST_EXTERIORRING - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 907)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 907)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 907)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 907)))) != 0) or ((((_la - 971)) & ~0x3f) == 0 and ((1 << (_la - 971)) & ((1 << (MySqlParser.ST_GEOMETRYFROMWKB - 971)) | (1 << (MySqlParser.ST_GEOMETRYN - 971)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 971)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 971)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 971)) | (1 << (MySqlParser.ST_INTERIORRINGN - 971)) | (1 << (MySqlParser.ST_INTERSECTION - 971)) | (1 << (MySqlParser.ST_INTERSECTS - 971)) | (1 << (MySqlParser.ST_ISCLOSED - 971)) | (1 << (MySqlParser.ST_ISEMPTY - 971)) | (1 << (MySqlParser.ST_ISSIMPLE - 971)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINEFROMWKB - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 971)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 971)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 971)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 971)) | (1 << (MySqlParser.ST_NUMPOINTS - 971)) | (1 << (MySqlParser.ST_OVERLAPS - 971)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 971)) | (1 << (MySqlParser.ST_POINTFROMWKB - 971)) | (1 << (MySqlParser.ST_POINTN - 971)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYFROMWKB - 971)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 971)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 971)) | (1 << (MySqlParser.ST_SRID - 971)) | (1 << (MySqlParser.ST_STARTPOINT - 971)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 971)) | (1 << (MySqlParser.ST_TOUCHES - 971)) | (1 << (MySqlParser.ST_UNION - 971)) | (1 << (MySqlParser.ST_WITHIN - 971)) | (1 << (MySqlParser.ST_X - 971)) | (1 << (MySqlParser.ST_Y - 971)) | (1 << (MySqlParser.SUBDATE - 971)) | (1 << (MySqlParser.SUBSTRING_INDEX - 971)) | (1 << (MySqlParser.SUBTIME - 971)) | (1 << (MySqlParser.SYSTEM_USER - 971)) | (1 << (MySqlParser.TAN - 971)) | (1 << (MySqlParser.TIMEDIFF - 971)) | (1 << (MySqlParser.TIMESTAMPADD - 971)) | (1 << (MySqlParser.TIMESTAMPDIFF - 971)) | (1 << (MySqlParser.TIME_FORMAT - 971)) | (1 << (MySqlParser.TIME_TO_SEC - 971)) | (1 << (MySqlParser.TOUCHES - 971)) | (1 << (MySqlParser.TO_BASE64 - 971)) | (1 << (MySqlParser.TO_DAYS - 971)) | (1 << (MySqlParser.TO_SECONDS - 971)) | (1 << (MySqlParser.UCASE - 971)) | (1 << (MySqlParser.UNCOMPRESS - 971)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 971)) | (1 << (MySqlParser.UNHEX - 971)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 971)) | (1 << (MySqlParser.UPDATEXML - 971)) | (1 << (MySqlParser.UPPER - 971)) | (1 << (MySqlParser.UUID - 971)) | (1 << (MySqlParser.UUID_SHORT - 971)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 971)) | (1 << (MySqlParser.VERSION - 971)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 971)) | (1 << (MySqlParser.WEEKDAY - 971)) | (1 << (MySqlParser.WEEKOFYEAR - 971)) | (1 << (MySqlParser.WEIGHT_STRING - 971)))) != 0) or ((((_la - 1035)) & ~0x3f) == 0 and ((1 << (_la - 1035)) & ((1 << (MySqlParser.WITHIN - 1035)) | (1 << (MySqlParser.YEARWEEK - 1035)) | (1 << (MySqlParser.Y_FUNCTION - 1035)) | (1 << (MySqlParser.X_FUNCTION - 1035)) | (1 << (MySqlParser.MOD - 1035)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1035)) | (1 << (MySqlParser.STRING_LITERAL - 1035)) | (1 << (MySqlParser.ID - 1035)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1035)) | (1 << (MySqlParser.OPTIONAL - 1035)))) != 0):
                self.state = 4317
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_cursorStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CloseCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseCursor" ):
                listener.enterCloseCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseCursor" ):
                listener.exitCloseCursor(self)


    class OpenCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenCursor" ):
                listener.enterOpenCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenCursor" ):
                listener.exitOpenCursor(self)


    class FetchCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(MySqlParser.FETCH, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchCursor" ):
                listener.enterFetchCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchCursor" ):
                listener.exitFetchCursor(self)



    def cursorStatement(self):

        localctx = MySqlParser.CursorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_cursorStatement)
        self._la = 0 # Token type
        try:
            self.state = 4335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CLOSE]:
                localctx = MySqlParser.CloseCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4320
                self.match(MySqlParser.CLOSE)
                self.state = 4321
                self.uid()
                pass
            elif token in [MySqlParser.FETCH]:
                localctx = MySqlParser.FetchCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4322
                self.match(MySqlParser.FETCH)
                self.state = 4327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
                if la_ == 1:
                    self.state = 4324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.NEXT:
                        self.state = 4323
                        self.match(MySqlParser.NEXT)


                    self.state = 4326
                    self.match(MySqlParser.FROM)


                self.state = 4329
                self.uid()
                self.state = 4330
                self.match(MySqlParser.INTO)
                self.state = 4331
                self.uidList()
                pass
            elif token in [MySqlParser.OPEN]:
                localctx = MySqlParser.OpenCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4333
                self.match(MySqlParser.OPEN)
                self.state = 4334
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_declareVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareVariable" ):
                listener.enterDeclareVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareVariable" ):
                listener.exitDeclareVariable(self)




    def declareVariable(self):

        localctx = MySqlParser.DeclareVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_declareVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4337
            self.match(MySqlParser.DECLARE)
            self.state = 4338
            self.uidList()
            self.state = 4339
            self.dataType()
            self.state = 4342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFAULT:
                self.state = 4340
                self.match(MySqlParser.DEFAULT)
                self.state = 4341
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def CONDITION(self):
            return self.getToken(MySqlParser.CONDITION, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_declareCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCondition" ):
                listener.enterDeclareCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCondition" ):
                listener.exitDeclareCondition(self)




    def declareCondition(self):

        localctx = MySqlParser.DeclareConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_declareCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4344
            self.match(MySqlParser.DECLARE)
            self.state = 4345
            self.uid()
            self.state = 4346
            self.match(MySqlParser.CONDITION)
            self.state = 4347
            self.match(MySqlParser.FOR)
            self.state = 4354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                self.state = 4348
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQLSTATE]:
                self.state = 4349
                self.match(MySqlParser.SQLSTATE)
                self.state = 4351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 4350
                    self.match(MySqlParser.VALUE)


                self.state = 4353
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareCursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def CURSOR(self):
            return self.getToken(MySqlParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_declareCursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCursor" ):
                listener.enterDeclareCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCursor" ):
                listener.exitDeclareCursor(self)




    def declareCursor(self):

        localctx = MySqlParser.DeclareCursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_declareCursor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4356
            self.match(MySqlParser.DECLARE)
            self.state = 4357
            self.uid()
            self.state = 4358
            self.match(MySqlParser.CURSOR)
            self.state = 4359
            self.match(MySqlParser.FOR)
            self.state = 4360
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.handlerAction = None # Token

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def handlerConditionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.HandlerConditionValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.HandlerConditionValueContext,i)


        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def CONTINUE(self):
            return self.getToken(MySqlParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(MySqlParser.EXIT, 0)

        def UNDO(self):
            return self.getToken(MySqlParser.UNDO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_declareHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareHandler" ):
                listener.enterDeclareHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareHandler" ):
                listener.exitDeclareHandler(self)




    def declareHandler(self):

        localctx = MySqlParser.DeclareHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_declareHandler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4362
            self.match(MySqlParser.DECLARE)
            self.state = 4363
            localctx.handlerAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.CONTINUE or _la==MySqlParser.EXIT or _la==MySqlParser.UNDO):
                localctx.handlerAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4364
            self.match(MySqlParser.HANDLER)
            self.state = 4365
            self.match(MySqlParser.FOR)
            self.state = 4366
            self.handlerConditionValue()
            self.state = 4371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4367
                self.match(MySqlParser.COMMA)
                self.state = 4368
                self.handlerConditionValue()
                self.state = 4373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4374
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerConditionValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HandlerConditionWarningContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLWARNING(self):
            return self.getToken(MySqlParser.SQLWARNING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionWarning" ):
                listener.enterHandlerConditionWarning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionWarning" ):
                listener.exitHandlerConditionWarning(self)


    class HandlerConditionCodeContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionCode" ):
                listener.enterHandlerConditionCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionCode" ):
                listener.exitHandlerConditionCode(self)


    class HandlerConditionNotfoundContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def FOUND(self):
            return self.getToken(MySqlParser.FOUND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionNotfound" ):
                listener.enterHandlerConditionNotfound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionNotfound" ):
                listener.exitHandlerConditionNotfound(self)


    class HandlerConditionStateContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionState" ):
                listener.enterHandlerConditionState(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionState" ):
                listener.exitHandlerConditionState(self)


    class HandlerConditionExceptionContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLEXCEPTION(self):
            return self.getToken(MySqlParser.SQLEXCEPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionException" ):
                listener.enterHandlerConditionException(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionException" ):
                listener.exitHandlerConditionException(self)


    class HandlerConditionNameContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionName" ):
                listener.enterHandlerConditionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionName" ):
                listener.exitHandlerConditionName(self)



    def handlerConditionValue(self):

        localctx = MySqlParser.HandlerConditionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_handlerConditionValue)
        self._la = 0 # Token type
        try:
            self.state = 4387
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                localctx = MySqlParser.HandlerConditionCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4376
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQLSTATE]:
                localctx = MySqlParser.HandlerConditionStateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4377
                self.match(MySqlParser.SQLSTATE)
                self.state = 4379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 4378
                    self.match(MySqlParser.VALUE)


                self.state = 4381
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                localctx = MySqlParser.HandlerConditionNameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4382
                self.uid()
                pass
            elif token in [MySqlParser.SQLWARNING]:
                localctx = MySqlParser.HandlerConditionWarningContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4383
                self.match(MySqlParser.SQLWARNING)
                pass
            elif token in [MySqlParser.NOT]:
                localctx = MySqlParser.HandlerConditionNotfoundContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4384
                self.match(MySqlParser.NOT)
                self.state = 4385
                self.match(MySqlParser.FOUND)
                pass
            elif token in [MySqlParser.SQLEXCEPTION]:
                localctx = MySqlParser.HandlerConditionExceptionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4386
                self.match(MySqlParser.SQLEXCEPTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MySqlParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySqlParser.CompoundStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_procedureSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSqlStatement" ):
                listener.enterProcedureSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSqlStatement" ):
                listener.exitProcedureSqlStatement(self)




    def procedureSqlStatement(self):

        localctx = MySqlParser.ProcedureSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_procedureSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,630,self._ctx)
            if la_ == 1:
                self.state = 4389
                self.compoundStatement()
                pass

            elif la_ == 2:
                self.state = 4390
                self.sqlStatement()
                pass


            self.state = 4393
            self.match(MySqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(MySqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseAlternative" ):
                listener.enterCaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseAlternative" ):
                listener.exitCaseAlternative(self)




    def caseAlternative(self):

        localctx = MySqlParser.CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_caseAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4395
            self.match(MySqlParser.WHEN)
            self.state = 4398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,631,self._ctx)
            if la_ == 1:
                self.state = 4396
                self.constant()
                pass

            elif la_ == 2:
                self.state = 4397
                self.expression(0)
                pass


            self.state = 4400
            self.match(MySqlParser.THEN)
            self.state = 4402 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4401
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4404 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,632,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(MySqlParser.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_elifAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElifAlternative" ):
                listener.enterElifAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElifAlternative" ):
                listener.exitElifAlternative(self)




    def elifAlternative(self):

        localctx = MySqlParser.ElifAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_elifAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4406
            self.match(MySqlParser.ELSEIF)
            self.state = 4407
            self.expression(0)
            self.state = 4408
            self.match(MySqlParser.THEN)
            self.state = 4410 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4409
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4412 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,633,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUserMysqlV56Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserSpecificationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserSpecificationContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV56" ):
                listener.enterAlterUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV56" ):
                listener.exitAlterUserMysqlV56(self)


    class AlterUserMysqlV57Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserLockOptionContext,i)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV57" ):
                listener.enterAlterUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV57" ):
                listener.exitAlterUserMysqlV57(self)



    def alterUser(self):

        localctx = MySqlParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_alterUser)
        self._la = 0 # Token type
        try:
            self.state = 4468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4414
                self.match(MySqlParser.ALTER)
                self.state = 4415
                self.match(MySqlParser.USER)
                self.state = 4416
                self.userSpecification()
                self.state = 4421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4417
                    self.match(MySqlParser.COMMA)
                    self.state = 4418
                    self.userSpecification()
                    self.state = 4423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4424
                self.match(MySqlParser.ALTER)
                self.state = 4425
                self.match(MySqlParser.USER)
                self.state = 4427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 4426
                    self.ifExists()


                self.state = 4429
                self.userAuthOption()
                self.state = 4434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4430
                    self.match(MySqlParser.COMMA)
                    self.state = 4431
                    self.userAuthOption()
                    self.state = 4436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.REQUIRE:
                    self.state = 4437
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4449
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NONE]:
                        self.state = 4438
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                        self.state = 4439
                        self.tlsOption()
                        self.state = 4446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                            self.state = 4441
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.AND:
                                self.state = 4440
                                self.match(MySqlParser.AND)


                            self.state = 4443
                            self.tlsOption()
                            self.state = 4448
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4453
                    self.match(MySqlParser.WITH)
                    self.state = 4455 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4454
                        self.userResourceOption()
                        self.state = 4457 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 460)) & ~0x3f) == 0 and ((1 << (_la - 460)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 460)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 460)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 460)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 460)))) != 0)):
                            break



                self.state = 4465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.ACCOUNT or _la==MySqlParser.PASSWORD:
                    self.state = 4463
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.PASSWORD]:
                        self.state = 4461
                        self.userPasswordOption()
                        pass
                    elif token in [MySqlParser.ACCOUNT]:
                        self.state = 4462
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateUserMysqlV57Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserLockOptionContext,i)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV57" ):
                listener.enterCreateUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV57" ):
                listener.exitCreateUserMysqlV57(self)


    class CreateUserMysqlV56Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV56" ):
                listener.enterCreateUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV56" ):
                listener.exitCreateUserMysqlV56(self)



    def createUser(self):

        localctx = MySqlParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_createUser)
        self._la = 0 # Token type
        try:
            self.state = 4524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CreateUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4470
                self.match(MySqlParser.CREATE)
                self.state = 4471
                self.match(MySqlParser.USER)
                self.state = 4472
                self.userAuthOption()
                self.state = 4477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4473
                    self.match(MySqlParser.COMMA)
                    self.state = 4474
                    self.userAuthOption()
                    self.state = 4479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.CreateUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4480
                self.match(MySqlParser.CREATE)
                self.state = 4481
                self.match(MySqlParser.USER)
                self.state = 4483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 4482
                    self.ifNotExists()


                self.state = 4485
                self.userAuthOption()
                self.state = 4490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4486
                    self.match(MySqlParser.COMMA)
                    self.state = 4487
                    self.userAuthOption()
                    self.state = 4492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.REQUIRE:
                    self.state = 4493
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4505
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NONE]:
                        self.state = 4494
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                        self.state = 4495
                        self.tlsOption()
                        self.state = 4502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                            self.state = 4497
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.AND:
                                self.state = 4496
                                self.match(MySqlParser.AND)


                            self.state = 4499
                            self.tlsOption()
                            self.state = 4504
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4509
                    self.match(MySqlParser.WITH)
                    self.state = 4511 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4510
                        self.userResourceOption()
                        self.state = 4513 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 460)) & ~0x3f) == 0 and ((1 << (_la - 460)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 460)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 460)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 460)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 460)))) != 0)):
                            break



                self.state = 4521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.ACCOUNT or _la==MySqlParser.PASSWORD:
                    self.state = 4519
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.PASSWORD]:
                        self.state = 4517
                        self.userPasswordOption()
                        pass
                    elif token in [MySqlParser.ACCOUNT]:
                        self.state = 4518
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)




    def dropUser(self):

        localctx = MySqlParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_dropUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4526
            self.match(MySqlParser.DROP)
            self.state = 4527
            self.match(MySqlParser.USER)
            self.state = 4529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 4528
                self.ifExists()


            self.state = 4531
            self.userName()
            self.state = 4536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4532
                self.match(MySqlParser.COMMA)
                self.state = 4533
                self.userName()
                self.state = 4538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.privilegeObject = None # Token
            self.tlsNone = None # Token

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GRANT)
            else:
                return self.getToken(MySqlParser.GRANT, i)

        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PrivelegeClauseContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def privilegeLevel(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeLevelContext,0)


        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)


        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def OPTION(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.OPTION)
            else:
                return self.getToken(MySqlParser.OPTION, i)

        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def ADMIN(self):
            return self.getToken(MySqlParser.ADMIN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_grantStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantStatement" ):
                listener.enterGrantStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantStatement" ):
                listener.exitGrantStatement(self)




    def grantStatement(self):

        localctx = MySqlParser.GrantStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_grantStatement)
        self._la = 0 # Token type
        try:
            self.state = 4618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,675,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4539
                self.match(MySqlParser.GRANT)
                self.state = 4540
                self.privelegeClause()
                self.state = 4545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4541
                    self.match(MySqlParser.COMMA)
                    self.state = 4542
                    self.privelegeClause()
                    self.state = 4547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4548
                self.match(MySqlParser.ON)
                self.state = 4550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
                if la_ == 1:
                    self.state = 4549
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.TABLE or _la==MySqlParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4552
                self.privilegeLevel()
                self.state = 4553
                self.match(MySqlParser.TO)
                self.state = 4554
                self.userAuthOption()
                self.state = 4559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4555
                    self.match(MySqlParser.COMMA)
                    self.state = 4556
                    self.userAuthOption()
                    self.state = 4561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.REQUIRE:
                    self.state = 4562
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4574
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NONE]:
                        self.state = 4563
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                        self.state = 4564
                        self.tlsOption()
                        self.state = 4571
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                            self.state = 4566
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.AND:
                                self.state = 4565
                                self.match(MySqlParser.AND)


                            self.state = 4568
                            self.tlsOption()
                            self.state = 4573
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4578
                    self.match(MySqlParser.WITH)
                    self.state = 4584
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,668,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4582
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [MySqlParser.GRANT]:
                                self.state = 4579
                                self.match(MySqlParser.GRANT)
                                self.state = 4580
                                self.match(MySqlParser.OPTION)
                                pass
                            elif token in [MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS]:
                                self.state = 4581
                                self.userResourceOption()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 4586
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,668,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4589
                self.match(MySqlParser.GRANT)
                self.state = 4590
                self.uid()
                self.state = 4595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4591
                    self.match(MySqlParser.COMMA)
                    self.state = 4592
                    self.uid()
                    self.state = 4597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4598
                self.match(MySqlParser.TO)
                self.state = 4601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
                if la_ == 1:
                    self.state = 4599
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 4600
                    self.uid()
                    pass


                self.state = 4610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4603
                    self.match(MySqlParser.COMMA)
                    self.state = 4606
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,672,self._ctx)
                    if la_ == 1:
                        self.state = 4604
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 4605
                        self.uid()
                        pass


                    self.state = 4612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4613
                    self.match(MySqlParser.WITH)
                    self.state = 4614
                    self.match(MySqlParser.ADMIN)
                    self.state = 4615
                    self.match(MySqlParser.OPTION)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantProxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.toOther = list() # of UserNameContexts

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GRANT)
            else:
                return self.getToken(MySqlParser.GRANT, i)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_grantProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantProxy" ):
                listener.enterGrantProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantProxy" ):
                listener.exitGrantProxy(self)




    def grantProxy(self):

        localctx = MySqlParser.GrantProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_grantProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4620
            self.match(MySqlParser.GRANT)
            self.state = 4621
            self.match(MySqlParser.PROXY)
            self.state = 4622
            self.match(MySqlParser.ON)
            self.state = 4623
            localctx.fromFirst = self.userName()
            self.state = 4624
            self.match(MySqlParser.TO)
            self.state = 4625
            localctx.toFirst = self.userName()
            self.state = 4630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4626
                self.match(MySqlParser.COMMA)
                self.state = 4627
                localctx._userName = self.userName()
                localctx.toOther.append(localctx._userName)
                self.state = 4632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 4633
                self.match(MySqlParser.WITH)
                self.state = 4634
                self.match(MySqlParser.GRANT)
                self.state = 4635
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def renameUserClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RenameUserClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RenameUserClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)




    def renameUser(self):

        localctx = MySqlParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4638
            self.match(MySqlParser.RENAME)
            self.state = 4639
            self.match(MySqlParser.USER)
            self.state = 4640
            self.renameUserClause()
            self.state = 4645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4641
                self.match(MySqlParser.COMMA)
                self.state = 4642
                self.renameUserClause()
                self.state = 4647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_revokeStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DetailRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.privilegeObject = None # Token
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PrivelegeClauseContext,i)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def privilegeLevel(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeLevelContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetailRevoke" ):
                listener.enterDetailRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetailRevoke" ):
                listener.exitDetailRevoke(self)


    class RoleRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleRevoke" ):
                listener.enterRoleRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleRevoke" ):
                listener.exitRoleRevoke(self)


    class ShortRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def GRANT(self):
            return self.getToken(MySqlParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortRevoke" ):
                listener.enterShortRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortRevoke" ):
                listener.exitShortRevoke(self)



    def revokeStatement(self):

        localctx = MySqlParser.RevokeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_revokeStatement)
        self._la = 0 # Token type
        try:
            self.state = 4712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,688,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.DetailRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4648
                self.match(MySqlParser.REVOKE)
                self.state = 4649
                self.privelegeClause()
                self.state = 4654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4650
                    self.match(MySqlParser.COMMA)
                    self.state = 4651
                    self.privelegeClause()
                    self.state = 4656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4657
                self.match(MySqlParser.ON)
                self.state = 4659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,680,self._ctx)
                if la_ == 1:
                    self.state = 4658
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.TABLE or _la==MySqlParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4661
                self.privilegeLevel()
                self.state = 4662
                self.match(MySqlParser.FROM)
                self.state = 4663
                self.userName()
                self.state = 4668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4664
                    self.match(MySqlParser.COMMA)
                    self.state = 4665
                    self.userName()
                    self.state = 4670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.ShortRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4671
                self.match(MySqlParser.REVOKE)
                self.state = 4672
                self.match(MySqlParser.ALL)
                self.state = 4674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIVILEGES:
                    self.state = 4673
                    self.match(MySqlParser.PRIVILEGES)


                self.state = 4676
                self.match(MySqlParser.COMMA)
                self.state = 4677
                self.match(MySqlParser.GRANT)
                self.state = 4678
                self.match(MySqlParser.OPTION)
                self.state = 4679
                self.match(MySqlParser.FROM)
                self.state = 4680
                self.userName()
                self.state = 4685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4681
                    self.match(MySqlParser.COMMA)
                    self.state = 4682
                    self.userName()
                    self.state = 4687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = MySqlParser.RoleRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4688
                self.match(MySqlParser.REVOKE)
                self.state = 4689
                self.uid()
                self.state = 4694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4690
                    self.match(MySqlParser.COMMA)
                    self.state = 4691
                    self.uid()
                    self.state = 4696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4697
                self.match(MySqlParser.FROM)
                self.state = 4700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,685,self._ctx)
                if la_ == 1:
                    self.state = 4698
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 4699
                    self.uid()
                    pass


                self.state = 4709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4702
                    self.match(MySqlParser.COMMA)
                    self.state = 4705
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
                    if la_ == 1:
                        self.state = 4703
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 4704
                        self.uid()
                        pass


                    self.state = 4711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeProxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onUser = None # UserNameContext
            self.fromFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.fromOther = list() # of UserNameContexts

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_revokeProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeProxy" ):
                listener.enterRevokeProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeProxy" ):
                listener.exitRevokeProxy(self)




    def revokeProxy(self):

        localctx = MySqlParser.RevokeProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_revokeProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4714
            self.match(MySqlParser.REVOKE)
            self.state = 4715
            self.match(MySqlParser.PROXY)
            self.state = 4716
            self.match(MySqlParser.ON)
            self.state = 4717
            localctx.onUser = self.userName()
            self.state = 4718
            self.match(MySqlParser.FROM)
            self.state = 4719
            localctx.fromFirst = self.userName()
            self.state = 4724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4720
                self.match(MySqlParser.COMMA)
                self.state = 4721
                localctx._userName = self.userName()
                localctx.fromOther.append(localctx._userName)
                self.state = 4726
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPasswordStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_setPasswordStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPasswordStatement" ):
                listener.enterSetPasswordStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPasswordStatement" ):
                listener.exitSetPasswordStatement(self)




    def setPasswordStatement(self):

        localctx = MySqlParser.SetPasswordStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_setPasswordStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4727
            self.match(MySqlParser.SET)
            self.state = 4728
            self.match(MySqlParser.PASSWORD)
            self.state = 4731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 4729
                self.match(MySqlParser.FOR)
                self.state = 4730
                self.userName()


            self.state = 4733
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 4736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.OLD_PASSWORD, MySqlParser.PASSWORD]:
                self.state = 4734
                self.passwordFunctionClause()
                pass
            elif token in [MySqlParser.STRING_LITERAL]:
                self.state = 4735
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def userPasswordOption(self):
            return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_userSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserSpecification" ):
                listener.enterUserSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserSpecification" ):
                listener.exitUserSpecification(self)




    def userSpecification(self):

        localctx = MySqlParser.UserSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_userSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4738
            self.userName()
            self.state = 4739
            self.userPasswordOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserAuthOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_userAuthOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleAuthOption" ):
                listener.enterSimpleAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleAuthOption" ):
                listener.exitSimpleAuthOption(self)


    class PasswordAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.hashed = None # Token
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordAuthOption" ):
                listener.enterPasswordAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordAuthOption" ):
                listener.exitPasswordAuthOption(self)


    class StringAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(MySqlParser.AuthPluginContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringAuthOption" ):
                listener.enterStringAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringAuthOption" ):
                listener.exitStringAuthOption(self)


    class HashAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(MySqlParser.AuthPluginContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashAuthOption" ):
                listener.enterHashAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashAuthOption" ):
                listener.exitHashAuthOption(self)



    def userAuthOption(self):

        localctx = MySqlParser.UserAuthOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_userAuthOption)
        self._la = 0 # Token type
        try:
            self.state = 4765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,694,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PasswordAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4741
                self.userName()
                self.state = 4742
                self.match(MySqlParser.IDENTIFIED)
                self.state = 4743
                self.match(MySqlParser.BY)
                self.state = 4744
                self.match(MySqlParser.PASSWORD)
                self.state = 4745
                localctx.hashed = self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                localctx = MySqlParser.StringAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4747
                self.userName()
                self.state = 4748
                self.match(MySqlParser.IDENTIFIED)
                self.state = 4751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4749
                    self.match(MySqlParser.WITH)
                    self.state = 4750
                    self.authPlugin()


                self.state = 4753
                self.match(MySqlParser.BY)
                self.state = 4754
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = MySqlParser.HashAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4756
                self.userName()
                self.state = 4757
                self.match(MySqlParser.IDENTIFIED)
                self.state = 4758
                self.match(MySqlParser.WITH)
                self.state = 4759
                self.authPlugin()
                self.state = 4762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 4760
                    self.match(MySqlParser.AS)
                    self.state = 4761
                    self.match(MySqlParser.STRING_LITERAL)


                pass

            elif la_ == 4:
                localctx = MySqlParser.SimpleAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4764
                self.userName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlsOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SSL(self):
            return self.getToken(MySqlParser.SSL, 0)

        def X509(self):
            return self.getToken(MySqlParser.X509, 0)

        def CIPHER(self):
            return self.getToken(MySqlParser.CIPHER, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ISSUER(self):
            return self.getToken(MySqlParser.ISSUER, 0)

        def SUBJECT(self):
            return self.getToken(MySqlParser.SUBJECT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tlsOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTlsOption" ):
                listener.enterTlsOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTlsOption" ):
                listener.exitTlsOption(self)




    def tlsOption(self):

        localctx = MySqlParser.TlsOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_tlsOption)
        try:
            self.state = 4775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SSL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4767
                self.match(MySqlParser.SSL)
                pass
            elif token in [MySqlParser.X509]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4768
                self.match(MySqlParser.X509)
                pass
            elif token in [MySqlParser.CIPHER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4769
                self.match(MySqlParser.CIPHER)
                self.state = 4770
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ISSUER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4771
                self.match(MySqlParser.ISSUER)
                self.state = 4772
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.SUBJECT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4773
                self.match(MySqlParser.SUBJECT)
                self.state = 4774
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserResourceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userResourceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserResourceOption" ):
                listener.enterUserResourceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserResourceOption" ):
                listener.exitUserResourceOption(self)




    def userResourceOption(self):

        localctx = MySqlParser.UserResourceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_userResourceOption)
        try:
            self.state = 4785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.MAX_QUERIES_PER_HOUR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4777
                self.match(MySqlParser.MAX_QUERIES_PER_HOUR)
                self.state = 4778
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_UPDATES_PER_HOUR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4779
                self.match(MySqlParser.MAX_UPDATES_PER_HOUR)
                self.state = 4780
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_CONNECTIONS_PER_HOUR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4781
                self.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR)
                self.state = 4782
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_USER_CONNECTIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4783
                self.match(MySqlParser.MAX_USER_CONNECTIONS)
                self.state = 4784
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expireType = None # Token

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def EXPIRE(self):
            return self.getToken(MySqlParser.EXPIRE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def NEVER(self):
            return self.getToken(MySqlParser.NEVER, 0)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userPasswordOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPasswordOption" ):
                listener.enterUserPasswordOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPasswordOption" ):
                listener.exitUserPasswordOption(self)




    def userPasswordOption(self):

        localctx = MySqlParser.UserPasswordOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_userPasswordOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4787
            self.match(MySqlParser.PASSWORD)
            self.state = 4788
            self.match(MySqlParser.EXPIRE)
            self.state = 4795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DEFAULT]:
                self.state = 4789
                localctx.expireType = self.match(MySqlParser.DEFAULT)
                pass
            elif token in [MySqlParser.NEVER]:
                self.state = 4790
                localctx.expireType = self.match(MySqlParser.NEVER)
                pass
            elif token in [MySqlParser.INTERVAL]:
                self.state = 4791
                localctx.expireType = self.match(MySqlParser.INTERVAL)
                self.state = 4792
                self.decimalLiteral()
                self.state = 4793
                self.match(MySqlParser.DAY)
                pass
            elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.ACCOUNT, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PASSWORD, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUSMINUS, MySqlParser.LR_BRACKET, MySqlParser.COMMA, MySqlParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserLockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lockType = None # Token

        def ACCOUNT(self):
            return self.getToken(MySqlParser.ACCOUNT, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(MySqlParser.UNLOCK, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserLockOption" ):
                listener.enterUserLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserLockOption" ):
                listener.exitUserLockOption(self)




    def userLockOption(self):

        localctx = MySqlParser.UserLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_userLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4797
            self.match(MySqlParser.ACCOUNT)
            self.state = 4798
            localctx.lockType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.LOCK or _la==MySqlParser.UNLOCK):
                localctx.lockType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivelegeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privelegeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivelegeClause" ):
                listener.enterPrivelegeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivelegeClause" ):
                listener.exitPrivelegeClause(self)




    def privelegeClause(self):

        localctx = MySqlParser.PrivelegeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_privelegeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4800
            self.privilege()
            self.state = 4805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 4801
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4802
                self.uidList()
                self.state = 4803
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def ROUTINE(self):
            return self.getToken(MySqlParser.ROUTINE, 0)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(MySqlParser.FILE, 0)

        def GRANT(self):
            return self.getToken(MySqlParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def PROCESS(self):
            return self.getToken(MySqlParser.PROCESS, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def REFERENCES(self):
            return self.getToken(MySqlParser.REFERENCES, 0)

        def RELOAD(self):
            return self.getToken(MySqlParser.RELOAD, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def CLIENT(self):
            return self.getToken(MySqlParser.CLIENT, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(MySqlParser.DATABASES, 0)

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(MySqlParser.SUPER, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def USAGE(self):
            return self.getToken(MySqlParser.USAGE, 0)

        def APPLICATION_PASSWORD_ADMIN(self):
            return self.getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0)

        def AUDIT_ADMIN(self):
            return self.getToken(MySqlParser.AUDIT_ADMIN, 0)

        def BACKUP_ADMIN(self):
            return self.getToken(MySqlParser.BACKUP_ADMIN, 0)

        def BINLOG_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ADMIN, 0)

        def BINLOG_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0)

        def CLONE_ADMIN(self):
            return self.getToken(MySqlParser.CLONE_ADMIN, 0)

        def CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.CONNECTION_ADMIN, 0)

        def ENCRYPTION_KEY_ADMIN(self):
            return self.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0)

        def FIREWALL_ADMIN(self):
            return self.getToken(MySqlParser.FIREWALL_ADMIN, 0)

        def FIREWALL_USER(self):
            return self.getToken(MySqlParser.FIREWALL_USER, 0)

        def FLUSH_OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0)

        def FLUSH_STATUS(self):
            return self.getToken(MySqlParser.FLUSH_STATUS, 0)

        def FLUSH_TABLES(self):
            return self.getToken(MySqlParser.FLUSH_TABLES, 0)

        def FLUSH_USER_RESOURCES(self):
            return self.getToken(MySqlParser.FLUSH_USER_RESOURCES, 0)

        def GROUP_REPLICATION_ADMIN(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0)

        def INNODB_REDO_LOG_ARCHIVE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0)

        def INNODB_REDO_LOG_ENABLE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0)

        def NDB_STORED_USER(self):
            return self.getToken(MySqlParser.NDB_STORED_USER, 0)

        def PERSIST_RO_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0)

        def REPLICATION_APPLIER(self):
            return self.getToken(MySqlParser.REPLICATION_APPLIER, 0)

        def REPLICATION_SLAVE_ADMIN(self):
            return self.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0)

        def RESOURCE_GROUP_ADMIN(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0)

        def RESOURCE_GROUP_USER(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_USER, 0)

        def ROLE_ADMIN(self):
            return self.getToken(MySqlParser.ROLE_ADMIN, 0)

        def SERVICE_CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SET_USER_ID(self):
            return self.getToken(MySqlParser.SET_USER_ID, 0)

        def SHOW_ROUTINE(self):
            return self.getToken(MySqlParser.SHOW_ROUTINE, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySqlParser.SYSTEM_USER, 0)

        def SYSTEM_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0)

        def TABLE_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0)

        def VERSION_TOKEN_ADMIN(self):
            return self.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0)

        def XA_RECOVER_ADMIN(self):
            return self.getToken(MySqlParser.XA_RECOVER_ADMIN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = MySqlParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 4886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4807
                self.match(MySqlParser.ALL)
                self.state = 4809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIVILEGES:
                    self.state = 4808
                    self.match(MySqlParser.PRIVILEGES)


                pass
            elif token in [MySqlParser.ALTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4811
                self.match(MySqlParser.ALTER)
                self.state = 4813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ROUTINE:
                    self.state = 4812
                    self.match(MySqlParser.ROUTINE)


                pass
            elif token in [MySqlParser.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4815
                self.match(MySqlParser.CREATE)
                self.state = 4823
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.TEMPORARY]:
                    self.state = 4816
                    self.match(MySqlParser.TEMPORARY)
                    self.state = 4817
                    self.match(MySqlParser.TABLES)
                    pass
                elif token in [MySqlParser.ROUTINE]:
                    self.state = 4818
                    self.match(MySqlParser.ROUTINE)
                    pass
                elif token in [MySqlParser.VIEW]:
                    self.state = 4819
                    self.match(MySqlParser.VIEW)
                    pass
                elif token in [MySqlParser.USER]:
                    self.state = 4820
                    self.match(MySqlParser.USER)
                    pass
                elif token in [MySqlParser.TABLESPACE]:
                    self.state = 4821
                    self.match(MySqlParser.TABLESPACE)
                    pass
                elif token in [MySqlParser.ROLE]:
                    self.state = 4822
                    self.match(MySqlParser.ROLE)
                    pass
                elif token in [MySqlParser.ON, MySqlParser.LR_BRACKET, MySqlParser.COMMA]:
                    pass
                else:
                    pass
                pass
            elif token in [MySqlParser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4825
                self.match(MySqlParser.DELETE)
                pass
            elif token in [MySqlParser.DROP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4826
                self.match(MySqlParser.DROP)
                self.state = 4828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ROLE:
                    self.state = 4827
                    self.match(MySqlParser.ROLE)


                pass
            elif token in [MySqlParser.EVENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4830
                self.match(MySqlParser.EVENT)
                pass
            elif token in [MySqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4831
                self.match(MySqlParser.EXECUTE)
                pass
            elif token in [MySqlParser.FILE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4832
                self.match(MySqlParser.FILE)
                pass
            elif token in [MySqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4833
                self.match(MySqlParser.GRANT)
                self.state = 4834
                self.match(MySqlParser.OPTION)
                pass
            elif token in [MySqlParser.INDEX]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4835
                self.match(MySqlParser.INDEX)
                pass
            elif token in [MySqlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4836
                self.match(MySqlParser.INSERT)
                pass
            elif token in [MySqlParser.LOCK]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4837
                self.match(MySqlParser.LOCK)
                self.state = 4838
                self.match(MySqlParser.TABLES)
                pass
            elif token in [MySqlParser.PROCESS]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4839
                self.match(MySqlParser.PROCESS)
                pass
            elif token in [MySqlParser.PROXY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4840
                self.match(MySqlParser.PROXY)
                pass
            elif token in [MySqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4841
                self.match(MySqlParser.REFERENCES)
                pass
            elif token in [MySqlParser.RELOAD]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4842
                self.match(MySqlParser.RELOAD)
                pass
            elif token in [MySqlParser.REPLICATION]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4843
                self.match(MySqlParser.REPLICATION)
                self.state = 4844
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CLIENT or _la==MySqlParser.SLAVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SELECT]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4845
                self.match(MySqlParser.SELECT)
                pass
            elif token in [MySqlParser.SHOW]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4846
                self.match(MySqlParser.SHOW)
                self.state = 4847
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASES or _la==MySqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4848
                self.match(MySqlParser.SHUTDOWN)
                pass
            elif token in [MySqlParser.SUPER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 4849
                self.match(MySqlParser.SUPER)
                pass
            elif token in [MySqlParser.TRIGGER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 4850
                self.match(MySqlParser.TRIGGER)
                pass
            elif token in [MySqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 4851
                self.match(MySqlParser.UPDATE)
                pass
            elif token in [MySqlParser.USAGE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 4852
                self.match(MySqlParser.USAGE)
                pass
            elif token in [MySqlParser.APPLICATION_PASSWORD_ADMIN]:
                self.enterOuterAlt(localctx, 25)
                self.state = 4853
                self.match(MySqlParser.APPLICATION_PASSWORD_ADMIN)
                pass
            elif token in [MySqlParser.AUDIT_ADMIN]:
                self.enterOuterAlt(localctx, 26)
                self.state = 4854
                self.match(MySqlParser.AUDIT_ADMIN)
                pass
            elif token in [MySqlParser.BACKUP_ADMIN]:
                self.enterOuterAlt(localctx, 27)
                self.state = 4855
                self.match(MySqlParser.BACKUP_ADMIN)
                pass
            elif token in [MySqlParser.BINLOG_ADMIN]:
                self.enterOuterAlt(localctx, 28)
                self.state = 4856
                self.match(MySqlParser.BINLOG_ADMIN)
                pass
            elif token in [MySqlParser.BINLOG_ENCRYPTION_ADMIN]:
                self.enterOuterAlt(localctx, 29)
                self.state = 4857
                self.match(MySqlParser.BINLOG_ENCRYPTION_ADMIN)
                pass
            elif token in [MySqlParser.CLONE_ADMIN]:
                self.enterOuterAlt(localctx, 30)
                self.state = 4858
                self.match(MySqlParser.CLONE_ADMIN)
                pass
            elif token in [MySqlParser.CONNECTION_ADMIN]:
                self.enterOuterAlt(localctx, 31)
                self.state = 4859
                self.match(MySqlParser.CONNECTION_ADMIN)
                pass
            elif token in [MySqlParser.ENCRYPTION_KEY_ADMIN]:
                self.enterOuterAlt(localctx, 32)
                self.state = 4860
                self.match(MySqlParser.ENCRYPTION_KEY_ADMIN)
                pass
            elif token in [MySqlParser.FIREWALL_ADMIN]:
                self.enterOuterAlt(localctx, 33)
                self.state = 4861
                self.match(MySqlParser.FIREWALL_ADMIN)
                pass
            elif token in [MySqlParser.FIREWALL_USER]:
                self.enterOuterAlt(localctx, 34)
                self.state = 4862
                self.match(MySqlParser.FIREWALL_USER)
                pass
            elif token in [MySqlParser.FLUSH_OPTIMIZER_COSTS]:
                self.enterOuterAlt(localctx, 35)
                self.state = 4863
                self.match(MySqlParser.FLUSH_OPTIMIZER_COSTS)
                pass
            elif token in [MySqlParser.FLUSH_STATUS]:
                self.enterOuterAlt(localctx, 36)
                self.state = 4864
                self.match(MySqlParser.FLUSH_STATUS)
                pass
            elif token in [MySqlParser.FLUSH_TABLES]:
                self.enterOuterAlt(localctx, 37)
                self.state = 4865
                self.match(MySqlParser.FLUSH_TABLES)
                pass
            elif token in [MySqlParser.FLUSH_USER_RESOURCES]:
                self.enterOuterAlt(localctx, 38)
                self.state = 4866
                self.match(MySqlParser.FLUSH_USER_RESOURCES)
                pass
            elif token in [MySqlParser.GROUP_REPLICATION_ADMIN]:
                self.enterOuterAlt(localctx, 39)
                self.state = 4867
                self.match(MySqlParser.GROUP_REPLICATION_ADMIN)
                pass
            elif token in [MySqlParser.INNODB_REDO_LOG_ARCHIVE]:
                self.enterOuterAlt(localctx, 40)
                self.state = 4868
                self.match(MySqlParser.INNODB_REDO_LOG_ARCHIVE)
                pass
            elif token in [MySqlParser.INNODB_REDO_LOG_ENABLE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 4869
                self.match(MySqlParser.INNODB_REDO_LOG_ENABLE)
                pass
            elif token in [MySqlParser.NDB_STORED_USER]:
                self.enterOuterAlt(localctx, 42)
                self.state = 4870
                self.match(MySqlParser.NDB_STORED_USER)
                pass
            elif token in [MySqlParser.PERSIST_RO_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 43)
                self.state = 4871
                self.match(MySqlParser.PERSIST_RO_VARIABLES_ADMIN)
                pass
            elif token in [MySqlParser.REPLICATION_APPLIER]:
                self.enterOuterAlt(localctx, 44)
                self.state = 4872
                self.match(MySqlParser.REPLICATION_APPLIER)
                pass
            elif token in [MySqlParser.REPLICATION_SLAVE_ADMIN]:
                self.enterOuterAlt(localctx, 45)
                self.state = 4873
                self.match(MySqlParser.REPLICATION_SLAVE_ADMIN)
                pass
            elif token in [MySqlParser.RESOURCE_GROUP_ADMIN]:
                self.enterOuterAlt(localctx, 46)
                self.state = 4874
                self.match(MySqlParser.RESOURCE_GROUP_ADMIN)
                pass
            elif token in [MySqlParser.RESOURCE_GROUP_USER]:
                self.enterOuterAlt(localctx, 47)
                self.state = 4875
                self.match(MySqlParser.RESOURCE_GROUP_USER)
                pass
            elif token in [MySqlParser.ROLE_ADMIN]:
                self.enterOuterAlt(localctx, 48)
                self.state = 4876
                self.match(MySqlParser.ROLE_ADMIN)
                pass
            elif token in [MySqlParser.SERVICE_CONNECTION_ADMIN]:
                self.enterOuterAlt(localctx, 49)
                self.state = 4877
                self.match(MySqlParser.SERVICE_CONNECTION_ADMIN)
                pass
            elif token in [MySqlParser.SESSION_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 50)
                self.state = 4878
                self.match(MySqlParser.SESSION_VARIABLES_ADMIN)
                pass
            elif token in [MySqlParser.SET_USER_ID]:
                self.enterOuterAlt(localctx, 51)
                self.state = 4879
                self.match(MySqlParser.SET_USER_ID)
                pass
            elif token in [MySqlParser.SHOW_ROUTINE]:
                self.enterOuterAlt(localctx, 52)
                self.state = 4880
                self.match(MySqlParser.SHOW_ROUTINE)
                pass
            elif token in [MySqlParser.SYSTEM_USER]:
                self.enterOuterAlt(localctx, 53)
                self.state = 4881
                self.match(MySqlParser.SYSTEM_USER)
                pass
            elif token in [MySqlParser.SYSTEM_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 54)
                self.state = 4882
                self.match(MySqlParser.SYSTEM_VARIABLES_ADMIN)
                pass
            elif token in [MySqlParser.TABLE_ENCRYPTION_ADMIN]:
                self.enterOuterAlt(localctx, 55)
                self.state = 4883
                self.match(MySqlParser.TABLE_ENCRYPTION_ADMIN)
                pass
            elif token in [MySqlParser.VERSION_TOKEN_ADMIN]:
                self.enterOuterAlt(localctx, 56)
                self.state = 4884
                self.match(MySqlParser.VERSION_TOKEN_ADMIN)
                pass
            elif token in [MySqlParser.XA_RECOVER_ADMIN]:
                self.enterOuterAlt(localctx, 57)
                self.state = 4885
                self.match(MySqlParser.XA_RECOVER_ADMIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_privilegeLevel

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefiniteSchemaPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteSchemaPrivLevel" ):
                listener.enterDefiniteSchemaPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteSchemaPrivLevel" ):
                listener.exitDefiniteSchemaPrivLevel(self)


    class DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def dottedId(self):
            return self.getTypedRuleContext(MySqlParser.DottedIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel2" ):
                listener.enterDefiniteFullTablePrivLevel2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel2" ):
                listener.exitDefiniteFullTablePrivLevel2(self)


    class DefiniteFullTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel" ):
                listener.enterDefiniteFullTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel" ):
                listener.exitDefiniteFullTablePrivLevel(self)


    class GlobalPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STAR)
            else:
                return self.getToken(MySqlParser.STAR, i)
        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalPrivLevel" ):
                listener.enterGlobalPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalPrivLevel" ):
                listener.exitGlobalPrivLevel(self)


    class DefiniteTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteTablePrivLevel" ):
                listener.enterDefiniteTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteTablePrivLevel" ):
                listener.exitDefiniteTablePrivLevel(self)


    class CurrentSchemaPriviLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchemaPriviLevel" ):
                listener.enterCurrentSchemaPriviLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchemaPriviLevel" ):
                listener.exitCurrentSchemaPriviLevel(self)



    def privilegeLevel(self):

        localctx = MySqlParser.PrivilegeLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_privilegeLevel)
        try:
            self.state = 4904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CurrentSchemaPriviLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4888
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = MySqlParser.GlobalPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4889
                self.match(MySqlParser.STAR)
                self.state = 4890
                self.match(MySqlParser.DOT)
                self.state = 4891
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 3:
                localctx = MySqlParser.DefiniteSchemaPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4892
                self.uid()
                self.state = 4893
                self.match(MySqlParser.DOT)
                self.state = 4894
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 4:
                localctx = MySqlParser.DefiniteFullTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4896
                self.uid()
                self.state = 4897
                self.match(MySqlParser.DOT)
                self.state = 4898
                self.uid()
                pass

            elif la_ == 5:
                localctx = MySqlParser.DefiniteFullTablePrivLevel2Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4900
                self.uid()
                self.state = 4901
                self.dottedId()
                pass

            elif la_ == 6:
                localctx = MySqlParser.DefiniteTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4903
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_renameUserClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUserClause" ):
                listener.enterRenameUserClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUserClause" ):
                listener.exitRenameUserClause(self)




    def renameUserClause(self):

        localctx = MySqlParser.RenameUserClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_renameUserClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4906
            localctx.fromFirst = self.userName()
            self.state = 4907
            self.match(MySqlParser.TO)
            self.state = 4908
            localctx.toFirst = self.userName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def ANALYZE(self):
            return self.getToken(MySqlParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_analyzeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTable" ):
                listener.enterAnalyzeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTable" ):
                listener.exitAnalyzeTable(self)




    def analyzeTable(self):

        localctx = MySqlParser.AnalyzeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_analyzeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4910
            self.match(MySqlParser.ANALYZE)
            self.state = 4912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 4911
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4914
            self.match(MySqlParser.TABLE)
            self.state = 4915
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def checkTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CheckTableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CheckTableOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_checkTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTable" ):
                listener.enterCheckTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTable" ):
                listener.exitCheckTable(self)




    def checkTable(self):

        localctx = MySqlParser.CheckTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_checkTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4917
            self.match(MySqlParser.CHECK)
            self.state = 4918
            self.match(MySqlParser.TABLE)
            self.state = 4919
            self.tables()
            self.state = 4923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.FOR or _la==MySqlParser.CHANGED or _la==MySqlParser.EXTENDED or _la==MySqlParser.FAST or _la==MySqlParser.MEDIUM or _la==MySqlParser.QUICK:
                self.state = 4920
                self.checkTableOption()
                self.state = 4925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_checksumTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumTable" ):
                listener.enterChecksumTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumTable" ):
                listener.exitChecksumTable(self)




    def checksumTable(self):

        localctx = MySqlParser.ChecksumTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_checksumTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4926
            self.match(MySqlParser.CHECKSUM)
            self.state = 4927
            self.match(MySqlParser.TABLE)
            self.state = 4928
            self.tables()
            self.state = 4930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED or _la==MySqlParser.QUICK:
                self.state = 4929
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.EXTENDED or _la==MySqlParser.QUICK):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def OPTIMIZE(self):
            return self.getToken(MySqlParser.OPTIMIZE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_optimizeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizeTable" ):
                listener.enterOptimizeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizeTable" ):
                listener.exitOptimizeTable(self)




    def optimizeTable(self):

        localctx = MySqlParser.OptimizeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_optimizeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4932
            self.match(MySqlParser.OPTIMIZE)
            self.state = 4934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 4933
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4936
            _la = self._input.LA(1)
            if not(_la==MySqlParser.TABLE or _la==MySqlParser.TABLES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4937
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def USE_FRM(self):
            return self.getToken(MySqlParser.USE_FRM, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_repairTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)




    def repairTable(self):

        localctx = MySqlParser.RepairTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_repairTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4939
            self.match(MySqlParser.REPAIR)
            self.state = 4941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 4940
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4943
            self.match(MySqlParser.TABLE)
            self.state = 4944
            self.tables()
            self.state = 4946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.QUICK:
                self.state = 4945
                self.match(MySqlParser.QUICK)


            self.state = 4949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED:
                self.state = 4948
                self.match(MySqlParser.EXTENDED)


            self.state = 4952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USE_FRM:
                self.state = 4951
                self.match(MySqlParser.USE_FRM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def FAST(self):
            return self.getToken(MySqlParser.FAST, 0)

        def MEDIUM(self):
            return self.getToken(MySqlParser.MEDIUM, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def CHANGED(self):
            return self.getToken(MySqlParser.CHANGED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_checkTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableOption" ):
                listener.enterCheckTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableOption" ):
                listener.exitCheckTableOption(self)




    def checkTableOption(self):

        localctx = MySqlParser.CheckTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_checkTableOption)
        try:
            self.state = 4961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4954
                self.match(MySqlParser.FOR)
                self.state = 4955
                self.match(MySqlParser.UPGRADE)
                pass
            elif token in [MySqlParser.QUICK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4956
                self.match(MySqlParser.QUICK)
                pass
            elif token in [MySqlParser.FAST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4957
                self.match(MySqlParser.FAST)
                pass
            elif token in [MySqlParser.MEDIUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4958
                self.match(MySqlParser.MEDIUM)
                pass
            elif token in [MySqlParser.EXTENDED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4959
                self.match(MySqlParser.EXTENDED)
                pass
            elif token in [MySqlParser.CHANGED]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4960
                self.match(MySqlParser.CHANGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returnType = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def STRING(self):
            return self.getToken(MySqlParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)

        def REAL(self):
            return self.getToken(MySqlParser.REAL, 0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)

        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createUdfunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdfunction" ):
                listener.enterCreateUdfunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdfunction" ):
                listener.exitCreateUdfunction(self)




    def createUdfunction(self):

        localctx = MySqlParser.CreateUdfunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_createUdfunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4963
            self.match(MySqlParser.CREATE)
            self.state = 4965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AGGREGATE:
                self.state = 4964
                self.match(MySqlParser.AGGREGATE)


            self.state = 4967
            self.match(MySqlParser.FUNCTION)
            self.state = 4968
            self.uid()
            self.state = 4969
            self.match(MySqlParser.RETURNS)
            self.state = 4970
            localctx.returnType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (MySqlParser.INTEGER - 191)) | (1 << (MySqlParser.REAL - 191)) | (1 << (MySqlParser.DECIMAL - 191)))) != 0) or _la==MySqlParser.STRING):
                localctx.returnType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4971
            self.match(MySqlParser.SONAME)
            self.state = 4972
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTALL(self):
            return self.getToken(MySqlParser.INSTALL, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_installPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallPlugin" ):
                listener.enterInstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallPlugin" ):
                listener.exitInstallPlugin(self)




    def installPlugin(self):

        localctx = MySqlParser.InstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_installPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4974
            self.match(MySqlParser.INSTALL)
            self.state = 4975
            self.match(MySqlParser.PLUGIN)
            self.state = 4976
            self.uid()
            self.state = 4977
            self.match(MySqlParser.SONAME)
            self.state = 4978
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UninstallPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNINSTALL(self):
            return self.getToken(MySqlParser.UNINSTALL, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_uninstallPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUninstallPlugin" ):
                listener.enterUninstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUninstallPlugin" ):
                listener.exitUninstallPlugin(self)




    def uninstallPlugin(self):

        localctx = MySqlParser.UninstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_uninstallPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4980
            self.match(MySqlParser.UNINSTALL)
            self.state = 4981
            self.match(MySqlParser.PLUGIN)
            self.state = 4982
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_setStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SetTransactionContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setTransactionStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetTransactionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)


    class SetCharsetContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCharset" ):
                listener.enterSetCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCharset" ):
                listener.exitSetCharset(self)


    class SetNamesContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def NAMES(self):
            return self.getToken(MySqlParser.NAMES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNames" ):
                listener.enterSetNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNames" ):
                listener.exitSetNames(self)


    class SetPasswordContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setPasswordStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetPasswordStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPassword" ):
                listener.enterSetPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPassword" ):
                listener.exitSetPassword(self)


    class SetAutocommitContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setAutocommitStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetAutocommitStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommit" ):
                listener.enterSetAutocommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommit" ):
                listener.exitSetAutocommit(self)


    class SetNewValueInsideTriggerContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def VAR_ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.VAR_ASSIGN)
            else:
                return self.getToken(MySqlParser.VAR_ASSIGN, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNewValueInsideTrigger" ):
                listener.enterSetNewValueInsideTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNewValueInsideTrigger" ):
                listener.exitSetNewValueInsideTrigger(self)


    class SetVariableContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.VariableClauseContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def VAR_ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.VAR_ASSIGN)
            else:
                return self.getToken(MySqlParser.VAR_ASSIGN, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVariable" ):
                listener.enterSetVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVariable" ):
                listener.exitSetVariable(self)



    def setStatement(self):

        localctx = MySqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.state = 5035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4984
                self.match(MySqlParser.SET)
                self.state = 4985
                self.variableClause()
                self.state = 4986
                _la = self._input.LA(1)
                if not(_la==MySqlParser.VAR_ASSIGN or _la==MySqlParser.EQUAL_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4987
                self.expression(0)
                self.state = 4995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4988
                    self.match(MySqlParser.COMMA)
                    self.state = 4989
                    self.variableClause()
                    self.state = 4990
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.VAR_ASSIGN or _la==MySqlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4991
                    self.expression(0)
                    self.state = 4997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.SetCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4998
                self.match(MySqlParser.SET)
                self.state = 5002
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CHARACTER]:
                    self.state = 4999
                    self.match(MySqlParser.CHARACTER)
                    self.state = 5000
                    self.match(MySqlParser.SET)
                    pass
                elif token in [MySqlParser.CHARSET]:
                    self.state = 5001
                    self.match(MySqlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5006
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 5004
                    self.charsetName()
                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 5005
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = MySqlParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5008
                self.match(MySqlParser.SET)
                self.state = 5009
                self.match(MySqlParser.NAMES)
                self.state = 5016
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 5010
                    self.charsetName()
                    self.state = 5013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.COLLATE:
                        self.state = 5011
                        self.match(MySqlParser.COLLATE)
                        self.state = 5012
                        self.collationName()


                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 5015
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = MySqlParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5018
                self.setPasswordStatement()
                pass

            elif la_ == 5:
                localctx = MySqlParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5019
                self.setTransactionStatement()
                pass

            elif la_ == 6:
                localctx = MySqlParser.SetAutocommitContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5020
                self.setAutocommitStatement()
                pass

            elif la_ == 7:
                localctx = MySqlParser.SetNewValueInsideTriggerContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5021
                self.match(MySqlParser.SET)
                self.state = 5022
                self.fullId()
                self.state = 5023
                _la = self._input.LA(1)
                if not(_la==MySqlParser.VAR_ASSIGN or _la==MySqlParser.EQUAL_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5024
                self.expression(0)
                self.state = 5032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5025
                    self.match(MySqlParser.COMMA)
                    self.state = 5026
                    self.fullId()
                    self.state = 5027
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.VAR_ASSIGN or _la==MySqlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5028
                    self.expression(0)
                    self.state = 5034
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_showStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowOpenTablesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowOpenTables" ):
                listener.enterShowOpenTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowOpenTables" ):
                listener.exitShowOpenTables(self)


    class ShowGlobalInfoContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showGlobalInfoClause(self):
            return self.getTypedRuleContext(MySqlParser.ShowGlobalInfoClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfo" ):
                listener.enterShowGlobalInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfo" ):
                listener.exitShowGlobalInfo(self)


    class ShowCreateFullIdObjectContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.namedEntity = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)
        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)
        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateFullIdObject" ):
                listener.enterShowCreateFullIdObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateFullIdObject" ):
                listener.exitShowCreateFullIdObject(self)


    class ShowCreateUserContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateUser" ):
                listener.enterShowCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateUser" ):
                listener.exitShowCreateUser(self)


    class ShowErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)
        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowErrors" ):
                listener.enterShowErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowErrors" ):
                listener.exitShowErrors(self)


    class ShowCountErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCountErrors" ):
                listener.enterShowCountErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCountErrors" ):
                listener.exitShowCountErrors(self)


    class ShowObjectFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showCommonEntity(self):
            return self.getTypedRuleContext(MySqlParser.ShowCommonEntityContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowObjectFilter" ):
                listener.enterShowObjectFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowObjectFilter" ):
                listener.exitShowObjectFilter(self)


    class ShowCreateDbContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDb" ):
                listener.enterShowCreateDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDb" ):
                listener.exitShowCreateDb(self)


    class ShowEngineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.engineOption = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def MUTEX(self):
            return self.getToken(MySqlParser.MUTEX, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowEngine" ):
                listener.enterShowEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowEngine" ):
                listener.exitShowEngine(self)


    class ShowSchemaFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showSchemaEntity(self):
            return self.getTypedRuleContext(MySqlParser.ShowSchemaEntityContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaFilter" ):
                listener.enterShowSchemaFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaFilter" ):
                listener.exitShowSchemaFilter(self)


    class ShowIndexesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def INDEXES(self):
            return self.getToken(MySqlParser.INDEXES, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.FROM)
            else:
                return self.getToken(MySqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IN)
            else:
                return self.getToken(MySqlParser.IN, i)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexes" ):
                listener.enterShowIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexes" ):
                listener.exitShowIndexes(self)


    class ShowLogEventsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.filename = None # Token
            self.fromPosition = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)
        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)
        def RELAYLOG(self):
            return self.getToken(MySqlParser.RELAYLOG, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowLogEvents" ):
                listener.enterShowLogEvents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowLogEvents" ):
                listener.exitShowLogEvents(self)


    class ShowMasterLogsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMasterLogs" ):
                listener.enterShowMasterLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMasterLogs" ):
                listener.exitShowMasterLogs(self)


    class ShowGrantsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(MySqlParser.GRANTS, 0)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)


    class ShowSlaveStatusContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)
        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSlaveStatus" ):
                listener.enterShowSlaveStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSlaveStatus" ):
                listener.exitShowSlaveStatus(self)


    class ShowRoutineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.routine = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CODE(self):
            return self.getToken(MySqlParser.CODE, 0)
        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoutine" ):
                listener.enterShowRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoutine" ):
                listener.exitShowRoutine(self)


    class ShowProfileContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.queryCount = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def PROFILE(self):
            return self.getToken(MySqlParser.PROFILE, 0)
        def showProfileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ShowProfileTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ShowProfileTypeContext,i)

        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfile" ):
                listener.enterShowProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfile" ):
                listener.exitShowProfile(self)


    class ShowColumnsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.columnsFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.FROM)
            else:
                return self.getToken(MySqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IN)
            else:
                return self.getToken(MySqlParser.IN, i)
        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)



    def showStatement(self):

        localctx = MySqlParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 5188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ShowMasterLogsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5037
                self.match(MySqlParser.SHOW)
                self.state = 5038
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINARY or _la==MySqlParser.MASTER):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5039
                self.match(MySqlParser.LOGS)
                pass

            elif la_ == 2:
                localctx = MySqlParser.ShowLogEventsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5040
                self.match(MySqlParser.SHOW)
                self.state = 5041
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINLOG or _la==MySqlParser.RELAYLOG):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5042
                self.match(MySqlParser.EVENTS)
                self.state = 5045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IN:
                    self.state = 5043
                    self.match(MySqlParser.IN)
                    self.state = 5044
                    localctx.filename = self.match(MySqlParser.STRING_LITERAL)


                self.state = 5049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM:
                    self.state = 5047
                    self.match(MySqlParser.FROM)
                    self.state = 5048
                    localctx.fromPosition = self.decimalLiteral()


                self.state = 5058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 5051
                    self.match(MySqlParser.LIMIT)
                    self.state = 5055
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
                    if la_ == 1:
                        self.state = 5052
                        localctx.offset = self.decimalLiteral()
                        self.state = 5053
                        self.match(MySqlParser.COMMA)


                    self.state = 5057
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 3:
                localctx = MySqlParser.ShowObjectFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5060
                self.match(MySqlParser.SHOW)
                self.state = 5061
                self.showCommonEntity()
                self.state = 5063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 5062
                    self.showFilter()


                pass

            elif la_ == 4:
                localctx = MySqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5065
                self.match(MySqlParser.SHOW)
                self.state = 5067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 5066
                    self.match(MySqlParser.FULL)


                self.state = 5069
                localctx.columnsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                    localctx.columnsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5070
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5071
                self.tableName()
                self.state = 5074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 5072
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5073
                    self.uid()


                self.state = 5077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 5076
                    self.showFilter()


                pass

            elif la_ == 5:
                localctx = MySqlParser.ShowCreateDbContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5079
                self.match(MySqlParser.SHOW)
                self.state = 5080
                self.match(MySqlParser.CREATE)
                self.state = 5081
                localctx.schemaFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.schemaFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 5082
                    self.ifNotExists()


                self.state = 5085
                self.uid()
                pass

            elif la_ == 6:
                localctx = MySqlParser.ShowCreateFullIdObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5086
                self.match(MySqlParser.SHOW)
                self.state = 5087
                self.match(MySqlParser.CREATE)
                self.state = 5088
                localctx.namedEntity = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (MySqlParser.PROCEDURE - 120)) | (1 << (MySqlParser.TABLE - 120)) | (1 << (MySqlParser.TRIGGER - 120)))) != 0) or _la==MySqlParser.EVENT or _la==MySqlParser.FUNCTION or _la==MySqlParser.VIEW):
                    localctx.namedEntity = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5089
                self.fullId()
                pass

            elif la_ == 7:
                localctx = MySqlParser.ShowCreateUserContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5090
                self.match(MySqlParser.SHOW)
                self.state = 5091
                self.match(MySqlParser.CREATE)
                self.state = 5092
                self.match(MySqlParser.USER)
                self.state = 5093
                self.userName()
                pass

            elif la_ == 8:
                localctx = MySqlParser.ShowEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5094
                self.match(MySqlParser.SHOW)
                self.state = 5095
                self.match(MySqlParser.ENGINE)
                self.state = 5096
                self.engineName()
                self.state = 5097
                localctx.engineOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MUTEX or _la==MySqlParser.STATUS):
                    localctx.engineOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = MySqlParser.ShowGlobalInfoContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5099
                self.match(MySqlParser.SHOW)
                self.state = 5100
                self.showGlobalInfoClause()
                pass

            elif la_ == 10:
                localctx = MySqlParser.ShowErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5101
                self.match(MySqlParser.SHOW)
                self.state = 5102
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ERRORS or _la==MySqlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

                self.state = 5103
                self.match(MySqlParser.LIMIT)
                self.state = 5107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,731,self._ctx)
                if la_ == 1:
                    self.state = 5104
                    localctx.offset = self.decimalLiteral()
                    self.state = 5105
                    self.match(MySqlParser.COMMA)


                self.state = 5109
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 11:
                localctx = MySqlParser.ShowCountErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5110
                self.match(MySqlParser.SHOW)
                self.state = 5111
                self.match(MySqlParser.COUNT)
                self.state = 5112
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5113
                self.match(MySqlParser.STAR)
                self.state = 5114
                self.match(MySqlParser.RR_BRACKET)
                self.state = 5115
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ERRORS or _la==MySqlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = MySqlParser.ShowSchemaFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5116
                self.match(MySqlParser.SHOW)
                self.state = 5117
                self.showSchemaEntity()
                self.state = 5120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 5118
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5119
                    self.uid()


                self.state = 5123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 5122
                    self.showFilter()


                pass

            elif la_ == 13:
                localctx = MySqlParser.ShowRoutineContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5125
                self.match(MySqlParser.SHOW)
                self.state = 5126
                localctx.routine = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.FUNCTION):
                    localctx.routine = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5127
                self.match(MySqlParser.CODE)
                self.state = 5128
                self.fullId()
                pass

            elif la_ == 14:
                localctx = MySqlParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 5129
                self.match(MySqlParser.SHOW)
                self.state = 5130
                self.match(MySqlParser.GRANTS)
                self.state = 5133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5131
                    self.match(MySqlParser.FOR)
                    self.state = 5132
                    self.userName()


                pass

            elif la_ == 15:
                localctx = MySqlParser.ShowIndexesContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 5135
                self.match(MySqlParser.SHOW)
                self.state = 5136
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEYS or _la==MySqlParser.INDEXES):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5137
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5138
                self.tableName()
                self.state = 5141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 5139
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5140
                    self.uid()


                self.state = 5145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WHERE:
                    self.state = 5143
                    self.match(MySqlParser.WHERE)
                    self.state = 5144
                    self.expression(0)


                pass

            elif la_ == 16:
                localctx = MySqlParser.ShowOpenTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 5147
                self.match(MySqlParser.SHOW)
                self.state = 5148
                self.match(MySqlParser.OPEN)
                self.state = 5149
                self.match(MySqlParser.TABLES)
                self.state = 5152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 5150
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5151
                    self.uid()


                self.state = 5155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 5154
                    self.showFilter()


                pass

            elif la_ == 17:
                localctx = MySqlParser.ShowProfileContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 5157
                self.match(MySqlParser.SHOW)
                self.state = 5158
                self.match(MySqlParser.PROFILE)
                self.state = 5159
                self.showProfileType()
                self.state = 5164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5160
                    self.match(MySqlParser.COMMA)
                    self.state = 5161
                    self.showProfileType()
                    self.state = 5166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5167
                    self.match(MySqlParser.FOR)
                    self.state = 5168
                    self.match(MySqlParser.QUERY)
                    self.state = 5169
                    localctx.queryCount = self.decimalLiteral()


                self.state = 5172
                self.match(MySqlParser.LIMIT)
                self.state = 5176
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
                if la_ == 1:
                    self.state = 5173
                    localctx.offset = self.decimalLiteral()
                    self.state = 5174
                    self.match(MySqlParser.COMMA)


                self.state = 5178
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = MySqlParser.ShowSlaveStatusContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 5180
                self.match(MySqlParser.SHOW)
                self.state = 5181
                self.match(MySqlParser.SLAVE)
                self.state = 5182
                self.match(MySqlParser.STATUS)
                self.state = 5186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5183
                    self.match(MySqlParser.FOR)
                    self.state = 5184
                    self.match(MySqlParser.CHANNEL)
                    self.state = 5185
                    self.match(MySqlParser.STRING_LITERAL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(MySqlParser.GLOBAL_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def AT_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AT_SIGN)
            else:
                return self.getToken(MySqlParser.AT_SIGN, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_variableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableClause" ):
                listener.enterVariableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableClause" ):
                listener.exitVariableClause(self)




    def variableClause(self):

        localctx = MySqlParser.VariableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_variableClause)
        self._la = 0 # Token type
        try:
            self.state = 5200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5190
                self.match(MySqlParser.LOCAL_ID)
                pass
            elif token in [MySqlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5191
                self.match(MySqlParser.GLOBAL_ID)
                pass
            elif token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.AT_SIGN, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
                if la_ == 1:
                    self.state = 5194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AT_SIGN:
                        self.state = 5192
                        self.match(MySqlParser.AT_SIGN)
                        self.state = 5193
                        self.match(MySqlParser.AT_SIGN)


                    self.state = 5196
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.LOCAL or _la==MySqlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5199
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommonEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def COLLATION(self):
            return self.getToken(MySqlParser.COLLATION, 0)

        def DATABASES(self):
            return self.getToken(MySqlParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(MySqlParser.SCHEMAS, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def VARIABLES(self):
            return self.getToken(MySqlParser.VARIABLES, 0)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showCommonEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommonEntity" ):
                listener.enterShowCommonEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommonEntity" ):
                listener.exitShowCommonEntity(self)




    def showCommonEntity(self):

        localctx = MySqlParser.ShowCommonEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_showCommonEntity)
        self._la = 0 # Token type
        try:
            self.state = 5215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5202
                self.match(MySqlParser.CHARACTER)
                self.state = 5203
                self.match(MySqlParser.SET)
                pass
            elif token in [MySqlParser.COLLATION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5204
                self.match(MySqlParser.COLLATION)
                pass
            elif token in [MySqlParser.DATABASES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5205
                self.match(MySqlParser.DATABASES)
                pass
            elif token in [MySqlParser.SCHEMAS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5206
                self.match(MySqlParser.SCHEMAS)
                pass
            elif token in [MySqlParser.FUNCTION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5207
                self.match(MySqlParser.FUNCTION)
                self.state = 5208
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.PROCEDURE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5209
                self.match(MySqlParser.PROCEDURE)
                self.state = 5210
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.GLOBAL, MySqlParser.SESSION, MySqlParser.STATUS, MySqlParser.VARIABLES]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION:
                    self.state = 5211
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5214
                _la = self._input.LA(1)
                if not(_la==MySqlParser.STATUS or _la==MySqlParser.VARIABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_showFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFilter" ):
                listener.enterShowFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFilter" ):
                listener.exitShowFilter(self)




    def showFilter(self):

        localctx = MySqlParser.ShowFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_showFilter)
        try:
            self.state = 5221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LIKE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5217
                self.match(MySqlParser.LIKE)
                self.state = 5218
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.WHERE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5219
                self.match(MySqlParser.WHERE)
                self.state = 5220
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGlobalInfoClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINES(self):
            return self.getToken(MySqlParser.ENGINES, 0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def PLUGINS(self):
            return self.getToken(MySqlParser.PLUGINS, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def PROCESSLIST(self):
            return self.getToken(MySqlParser.PROCESSLIST, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def PROFILES(self):
            return self.getToken(MySqlParser.PROFILES, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)

        def AUTHORS(self):
            return self.getToken(MySqlParser.AUTHORS, 0)

        def CONTRIBUTORS(self):
            return self.getToken(MySqlParser.CONTRIBUTORS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showGlobalInfoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfoClause" ):
                listener.enterShowGlobalInfoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfoClause" ):
                listener.exitShowGlobalInfoClause(self)




    def showGlobalInfoClause(self):

        localctx = MySqlParser.ShowGlobalInfoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_showGlobalInfoClause)
        self._la = 0 # Token type
        try:
            self.state = 5240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ENGINES, MySqlParser.STORAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORAGE:
                    self.state = 5223
                    self.match(MySqlParser.STORAGE)


                self.state = 5226
                self.match(MySqlParser.ENGINES)
                pass
            elif token in [MySqlParser.MASTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5227
                self.match(MySqlParser.MASTER)
                self.state = 5228
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.PLUGINS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5229
                self.match(MySqlParser.PLUGINS)
                pass
            elif token in [MySqlParser.PRIVILEGES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5230
                self.match(MySqlParser.PRIVILEGES)
                pass
            elif token in [MySqlParser.FULL, MySqlParser.PROCESSLIST]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 5231
                    self.match(MySqlParser.FULL)


                self.state = 5234
                self.match(MySqlParser.PROCESSLIST)
                pass
            elif token in [MySqlParser.PROFILES]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5235
                self.match(MySqlParser.PROFILES)
                pass
            elif token in [MySqlParser.SLAVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5236
                self.match(MySqlParser.SLAVE)
                self.state = 5237
                self.match(MySqlParser.HOSTS)
                pass
            elif token in [MySqlParser.AUTHORS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5238
                self.match(MySqlParser.AUTHORS)
                pass
            elif token in [MySqlParser.CONTRIBUTORS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5239
                self.match(MySqlParser.CONTRIBUTORS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSchemaEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def TRIGGERS(self):
            return self.getToken(MySqlParser.TRIGGERS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showSchemaEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaEntity" ):
                listener.enterShowSchemaEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaEntity" ):
                listener.exitShowSchemaEntity(self)




    def showSchemaEntity(self):

        localctx = MySqlParser.ShowSchemaEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_showSchemaEntity)
        self._la = 0 # Token type
        try:
            self.state = 5250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.EVENTS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5242
                self.match(MySqlParser.EVENTS)
                pass
            elif token in [MySqlParser.TABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5243
                self.match(MySqlParser.TABLE)
                self.state = 5244
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.FULL, MySqlParser.TABLES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 5245
                    self.match(MySqlParser.FULL)


                self.state = 5248
                self.match(MySqlParser.TABLES)
                pass
            elif token in [MySqlParser.TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5249
                self.match(MySqlParser.TRIGGERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProfileTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def BLOCK(self):
            return self.getToken(MySqlParser.BLOCK, 0)

        def IO(self):
            return self.getToken(MySqlParser.IO, 0)

        def CONTEXT(self):
            return self.getToken(MySqlParser.CONTEXT, 0)

        def SWITCHES(self):
            return self.getToken(MySqlParser.SWITCHES, 0)

        def CPU(self):
            return self.getToken(MySqlParser.CPU, 0)

        def IPC(self):
            return self.getToken(MySqlParser.IPC, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def PAGE(self):
            return self.getToken(MySqlParser.PAGE, 0)

        def FAULTS(self):
            return self.getToken(MySqlParser.FAULTS, 0)

        def SOURCE(self):
            return self.getToken(MySqlParser.SOURCE, 0)

        def SWAPS(self):
            return self.getToken(MySqlParser.SWAPS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showProfileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfileType" ):
                listener.enterShowProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfileType" ):
                listener.exitShowProfileType(self)




    def showProfileType(self):

        localctx = MySqlParser.ShowProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_showProfileType)
        try:
            self.state = 5264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5252
                self.match(MySqlParser.ALL)
                pass
            elif token in [MySqlParser.BLOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5253
                self.match(MySqlParser.BLOCK)
                self.state = 5254
                self.match(MySqlParser.IO)
                pass
            elif token in [MySqlParser.CONTEXT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5255
                self.match(MySqlParser.CONTEXT)
                self.state = 5256
                self.match(MySqlParser.SWITCHES)
                pass
            elif token in [MySqlParser.CPU]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5257
                self.match(MySqlParser.CPU)
                pass
            elif token in [MySqlParser.IPC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5258
                self.match(MySqlParser.IPC)
                pass
            elif token in [MySqlParser.MEMORY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5259
                self.match(MySqlParser.MEMORY)
                pass
            elif token in [MySqlParser.PAGE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5260
                self.match(MySqlParser.PAGE)
                self.state = 5261
                self.match(MySqlParser.FAULTS)
                pass
            elif token in [MySqlParser.SOURCE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5262
                self.match(MySqlParser.SOURCE)
                pass
            elif token in [MySqlParser.SWAPS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5263
                self.match(MySqlParser.SWAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinlogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_binlogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinlogStatement" ):
                listener.enterBinlogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinlogStatement" ):
                listener.exitBinlogStatement(self)




    def binlogStatement(self):

        localctx = MySqlParser.BinlogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_binlogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5266
            self.match(MySqlParser.BINLOG)
            self.state = 5267
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # UidContext

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def tableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableIndexesContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableIndexesContext,i)


        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_cacheIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheIndexStatement" ):
                listener.enterCacheIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheIndexStatement" ):
                listener.exitCacheIndexStatement(self)




    def cacheIndexStatement(self):

        localctx = MySqlParser.CacheIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_cacheIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5269
            self.match(MySqlParser.CACHE)
            self.state = 5270
            self.match(MySqlParser.INDEX)
            self.state = 5271
            self.tableIndexes()
            self.state = 5276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5272
                self.match(MySqlParser.COMMA)
                self.state = 5273
                self.tableIndexes()
                self.state = 5278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 5279
                self.match(MySqlParser.PARTITION)
                self.state = 5280
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5283
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 5281
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 5282
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5285
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5288
            self.match(MySqlParser.IN)
            self.state = 5289
            localctx.schema = self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.flushFormat = None # Token

        def FLUSH(self):
            return self.getToken(MySqlParser.FLUSH, 0)

        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FlushOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_flushStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)




    def flushStatement(self):

        localctx = MySqlParser.FlushStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_flushStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5291
            self.match(MySqlParser.FLUSH)
            self.state = 5293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 5292
                localctx.flushFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.flushFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5295
            self.flushOption()
            self.state = 5300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5296
                self.match(MySqlParser.COMMA)
                self.state = 5297
                self.flushOption()
                self.state = 5302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.connectionFormat = None # Token

        def KILL(self):
            return self.getToken(MySqlParser.KILL, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_killStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStatement" ):
                listener.enterKillStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStatement" ):
                listener.exitKillStatement(self)




    def killStatement(self):

        localctx = MySqlParser.KillStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_killStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5303
            self.match(MySqlParser.KILL)
            self.state = 5305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CONNECTION or _la==MySqlParser.QUERY:
                self.state = 5304
                localctx.connectionFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CONNECTION or _la==MySqlParser.QUERY):
                    localctx.connectionFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5308 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5307
                self.decimalLiteral()
                self.state = 5310 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 1070)) & ~0x3f) == 0 and ((1 << (_la - 1070)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1070)) | (1 << (MySqlParser.ONE_DECIMAL - 1070)) | (1 << (MySqlParser.TWO_DECIMAL - 1070)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1070)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadIndexIntoCacheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def loadedTableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LoadedTableIndexesContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LoadedTableIndexesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadIndexIntoCache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadIndexIntoCache" ):
                listener.enterLoadIndexIntoCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadIndexIntoCache" ):
                listener.exitLoadIndexIntoCache(self)




    def loadIndexIntoCache(self):

        localctx = MySqlParser.LoadIndexIntoCacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_loadIndexIntoCache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5312
            self.match(MySqlParser.LOAD)
            self.state = 5313
            self.match(MySqlParser.INDEX)
            self.state = 5314
            self.match(MySqlParser.INTO)
            self.state = 5315
            self.match(MySqlParser.CACHE)
            self.state = 5316
            self.loadedTableIndexes()
            self.state = 5321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5317
                self.match(MySqlParser.COMMA)
                self.state = 5318
                self.loadedTableIndexes()
                self.state = 5323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)




    def resetStatement(self):

        localctx = MySqlParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5324
            self.match(MySqlParser.RESET)
            self.state = 5325
            self.match(MySqlParser.QUERY)
            self.state = 5326
            self.match(MySqlParser.CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)




    def shutdownStatement(self):

        localctx = MySqlParser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5328
            self.match(MySqlParser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexFormat = None # Token

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIndexes" ):
                listener.enterTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIndexes" ):
                listener.exitTableIndexes(self)




    def tableIndexes(self):

        localctx = MySqlParser.TableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_tableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5330
            self.tableName()
            self.state = 5338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INDEX or _la==MySqlParser.KEY or _la==MySqlParser.LR_BRACKET:
                self.state = 5332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 5331
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5334
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5335
                self.uidList()
                self.state = 5336
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_flushOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def flushTableOption(self):
            return self.getTypedRuleContext(MySqlParser.FlushTableOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFlushOption" ):
                listener.enterTableFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFlushOption" ):
                listener.exitTableFlushOption(self)


    class ChannelFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelFlushOption" ):
                listener.enterChannelFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelFlushOption" ):
                listener.exitChannelFlushOption(self)


    class SimpleFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DES_KEY_FILE(self):
            return self.getToken(MySqlParser.DES_KEY_FILE, 0)
        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.OPTIMIZER_COSTS, 0)
        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)
        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)
        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)
        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def USER_RESOURCES(self):
            return self.getToken(MySqlParser.USER_RESOURCES, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def READ(self):
            return self.getToken(MySqlParser.READ, 0)
        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)
        def GENERAL(self):
            return self.getToken(MySqlParser.GENERAL, 0)
        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)
        def SLOW(self):
            return self.getToken(MySqlParser.SLOW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFlushOption" ):
                listener.enterSimpleFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFlushOption" ):
                listener.exitSimpleFlushOption(self)



    def flushOption(self):

        localctx = MySqlParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5358
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DES_KEY_FILE]:
                    self.state = 5340
                    self.match(MySqlParser.DES_KEY_FILE)
                    pass
                elif token in [MySqlParser.HOSTS]:
                    self.state = 5341
                    self.match(MySqlParser.HOSTS)
                    pass
                elif token in [MySqlParser.BINARY, MySqlParser.ENGINE, MySqlParser.ERROR, MySqlParser.GENERAL, MySqlParser.LOGS, MySqlParser.RELAY, MySqlParser.SLOW]:
                    self.state = 5343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.BINARY or ((((_la - 376)) & ~0x3f) == 0 and ((1 << (_la - 376)) & ((1 << (MySqlParser.ENGINE - 376)) | (1 << (MySqlParser.ERROR - 376)) | (1 << (MySqlParser.GENERAL - 376)))) != 0) or _la==MySqlParser.RELAY or _la==MySqlParser.SLOW:
                        self.state = 5342
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.BINARY or ((((_la - 376)) & ~0x3f) == 0 and ((1 << (_la - 376)) & ((1 << (MySqlParser.ENGINE - 376)) | (1 << (MySqlParser.ERROR - 376)) | (1 << (MySqlParser.GENERAL - 376)))) != 0) or _la==MySqlParser.RELAY or _la==MySqlParser.SLOW):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 5345
                    self.match(MySqlParser.LOGS)
                    pass
                elif token in [MySqlParser.OPTIMIZER_COSTS]:
                    self.state = 5346
                    self.match(MySqlParser.OPTIMIZER_COSTS)
                    pass
                elif token in [MySqlParser.PRIVILEGES]:
                    self.state = 5347
                    self.match(MySqlParser.PRIVILEGES)
                    pass
                elif token in [MySqlParser.QUERY]:
                    self.state = 5348
                    self.match(MySqlParser.QUERY)
                    self.state = 5349
                    self.match(MySqlParser.CACHE)
                    pass
                elif token in [MySqlParser.STATUS]:
                    self.state = 5350
                    self.match(MySqlParser.STATUS)
                    pass
                elif token in [MySqlParser.USER_RESOURCES]:
                    self.state = 5351
                    self.match(MySqlParser.USER_RESOURCES)
                    pass
                elif token in [MySqlParser.TABLES]:
                    self.state = 5352
                    self.match(MySqlParser.TABLES)
                    self.state = 5356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.WITH:
                        self.state = 5353
                        self.match(MySqlParser.WITH)
                        self.state = 5354
                        self.match(MySqlParser.READ)
                        self.state = 5355
                        self.match(MySqlParser.LOCK)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = MySqlParser.ChannelFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5360
                self.match(MySqlParser.RELAY)
                self.state = 5361
                self.match(MySqlParser.LOGS)
                self.state = 5363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5362
                    self.channelOption()


                pass

            elif la_ == 3:
                localctx = MySqlParser.TableFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5365
                self.match(MySqlParser.TABLES)
                self.state = 5366
                self.tables()
                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR or _la==MySqlParser.WITH:
                    self.state = 5367
                    self.flushTableOption()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def EXPORT(self):
            return self.getToken(MySqlParser.EXPORT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_flushTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTableOption" ):
                listener.enterFlushTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTableOption" ):
                listener.exitFlushTableOption(self)




    def flushTableOption(self):

        localctx = MySqlParser.FlushTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_flushTableOption)
        try:
            self.state = 5377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5372
                self.match(MySqlParser.WITH)
                self.state = 5373
                self.match(MySqlParser.READ)
                self.state = 5374
                self.match(MySqlParser.LOCK)
                pass
            elif token in [MySqlParser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5375
                self.match(MySqlParser.FOR)
                self.state = 5376
                self.match(MySqlParser.EXPORT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadedTableIndexesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partitionList = None # UidListContext
            self.indexFormat = None # Token
            self.indexList = None # UidListContext

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def LEAVES(self):
            return self.getToken(MySqlParser.LEAVES, 0)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadedTableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadedTableIndexes" ):
                listener.enterLoadedTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadedTableIndexes" ):
                listener.exitLoadedTableIndexes(self)




    def loadedTableIndexes(self):

        localctx = MySqlParser.LoadedTableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_loadedTableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5379
            self.tableName()
            self.state = 5387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 5380
                self.match(MySqlParser.PARTITION)
                self.state = 5381
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5384
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.OPTIONAL]:
                    self.state = 5382
                    localctx.partitionList = self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 5383
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5386
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,776,self._ctx)
            if la_ == 1:
                self.state = 5390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 5389
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5392
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5393
                localctx.indexList = self.uidList()
                self.state = 5394
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 5398
                self.match(MySqlParser.IGNORE)
                self.state = 5399
                self.match(MySqlParser.LEAVES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.column = None # UidContext
            self.pattern = None # Token

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def EXPLAIN(self):
            return self.getToken(MySqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(MySqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)




    def simpleDescribeStatement(self):

        localctx = MySqlParser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_simpleDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5402
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5403
            self.tableName()
            self.state = 5406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
            if la_ == 1:
                self.state = 5404
                localctx.column = self.uid()

            elif la_ == 2:
                self.state = 5405
                localctx.pattern = self.match(MySqlParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.formatType = None # Token
            self.formatValue = None # Token

        def describeObjectClause(self):
            return self.getTypedRuleContext(MySqlParser.DescribeObjectClauseContext,0)


        def EXPLAIN(self):
            return self.getToken(MySqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(MySqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def FORMAT(self):
            return self.getToken(MySqlParser.FORMAT, 0)

        def TRADITIONAL(self):
            return self.getToken(MySqlParser.TRADITIONAL, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDescribeStatement" ):
                listener.enterFullDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDescribeStatement" ):
                listener.exitFullDescribeStatement(self)




    def fullDescribeStatement(self):

        localctx = MySqlParser.FullDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_fullDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5408
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED or _la==MySqlParser.PARTITIONS or _la==MySqlParser.FORMAT:
                self.state = 5409
                localctx.formatType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.EXTENDED or _la==MySqlParser.PARTITIONS or _la==MySqlParser.FORMAT):
                    localctx.formatType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5410
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5411
                localctx.formatValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.JSON or _la==MySqlParser.TRADITIONAL):
                    localctx.formatValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5414
            self.describeObjectClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(MySqlParser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)




    def helpStatement(self):

        localctx = MySqlParser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5416
            self.match(MySqlParser.HELP)
            self.state = 5417
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MySqlParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5419
            self.match(MySqlParser.USE)
            self.state = 5420
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNAL(self):
            return self.getToken(MySqlParser.SIGNAL, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def signalConditionInformation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SignalConditionInformationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SignalConditionInformationContext,i)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_signalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalStatement" ):
                listener.enterSignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalStatement" ):
                listener.exitSignalStatement(self)




    def signalStatement(self):

        localctx = MySqlParser.SignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_signalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5422
            self.match(MySqlParser.SIGNAL)
            self.state = 5430
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SQLSTATE]:
                self.state = 5423
                self.match(MySqlParser.SQLSTATE)
                self.state = 5425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 5424
                    self.match(MySqlParser.VALUE)


                self.state = 5427
                self.stringLiteral()
                pass
            elif token in [MySqlParser.ID]:
                self.state = 5428
                self.match(MySqlParser.ID)
                pass
            elif token in [MySqlParser.REVERSE_QUOTE_ID]:
                self.state = 5429
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,783,self._ctx)
            if la_ == 1:
                self.state = 5432
                self.match(MySqlParser.SET)
                self.state = 5433
                self.signalConditionInformation()
                self.state = 5438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5434
                    self.match(MySqlParser.COMMA)
                    self.state = 5435
                    self.signalConditionInformation()
                    self.state = 5440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESIGNAL(self):
            return self.getToken(MySqlParser.RESIGNAL, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def signalConditionInformation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SignalConditionInformationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SignalConditionInformationContext,i)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resignalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResignalStatement" ):
                listener.enterResignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResignalStatement" ):
                listener.exitResignalStatement(self)




    def resignalStatement(self):

        localctx = MySqlParser.ResignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_resignalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5443
            self.match(MySqlParser.RESIGNAL)
            self.state = 5451
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SQLSTATE]:
                self.state = 5444
                self.match(MySqlParser.SQLSTATE)
                self.state = 5446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 5445
                    self.match(MySqlParser.VALUE)


                self.state = 5448
                self.stringLiteral()
                pass
            elif token in [MySqlParser.ID]:
                self.state = 5449
                self.match(MySqlParser.ID)
                pass
            elif token in [MySqlParser.REVERSE_QUOTE_ID]:
                self.state = 5450
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass
            elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUSMINUS, MySqlParser.LR_BRACKET, MySqlParser.SEMI]:
                pass
            else:
                pass
            self.state = 5462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,787,self._ctx)
            if la_ == 1:
                self.state = 5453
                self.match(MySqlParser.SET)
                self.state = 5454
                self.signalConditionInformation()
                self.state = 5459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5455
                    self.match(MySqlParser.COMMA)
                    self.state = 5456
                    self.signalConditionInformation()
                    self.state = 5461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalConditionInformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def DECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.DECIMAL_LITERAL, 0)

        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_signalConditionInformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalConditionInformation" ):
                listener.enterSignalConditionInformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalConditionInformation" ):
                listener.exitSignalConditionInformation(self)




    def signalConditionInformation(self):

        localctx = MySqlParser.SignalConditionInformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_signalConditionInformation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5464
            _la = self._input.LA(1)
            if not(((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)))) != 0) or _la==MySqlParser.MESSAGE_TEXT or _la==MySqlParser.MYSQL_ERRNO or _la==MySqlParser.SUBCLASS_ORIGIN or _la==MySqlParser.TABLE_NAME or _la==MySqlParser.CATALOG_NAME or _la==MySqlParser.SCHEMA_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5465
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 5470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,788,self._ctx)
            if la_ == 1:
                self.state = 5466
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.state = 5467
                self.match(MySqlParser.DECIMAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 5468
                self.mysqlVariable()
                pass

            elif la_ == 4:
                self.state = 5469
                self.simpleId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiagnosticsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(MySqlParser.GET, 0)

        def DIAGNOSTICS(self):
            return self.getToken(MySqlParser.DIAGNOSTICS, 0)

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def STACKED(self):
            return self.getToken(MySqlParser.STACKED, 0)

        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.VariableClauseContext,i)


        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def CONDITION(self):
            return self.getToken(MySqlParser.CONDITION, 0)

        def diagnosticsConditionInformationName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DiagnosticsConditionInformationNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DiagnosticsConditionInformationNameContext,i)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NUMBER)
            else:
                return self.getToken(MySqlParser.NUMBER, i)

        def ROW_COUNT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ROW_COUNT)
            else:
                return self.getToken(MySqlParser.ROW_COUNT, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_diagnosticsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnosticsStatement" ):
                listener.enterDiagnosticsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnosticsStatement" ):
                listener.exitDiagnosticsStatement(self)




    def diagnosticsStatement(self):

        localctx = MySqlParser.DiagnosticsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_diagnosticsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5472
            self.match(MySqlParser.GET)
            self.state = 5474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CURRENT or _la==MySqlParser.STACKED:
                self.state = 5473
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CURRENT or _la==MySqlParser.STACKED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5476
            self.match(MySqlParser.DIAGNOSTICS)
            self.state = 5508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.AT_SIGN, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID, MySqlParser.OPTIONAL]:
                self.state = 5477
                self.variableClause()
                self.state = 5478
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5479
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NUMBER or _la==MySqlParser.ROW_COUNT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5480
                    self.match(MySqlParser.COMMA)
                    self.state = 5481
                    self.variableClause()
                    self.state = 5482
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 5483
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.NUMBER or _la==MySqlParser.ROW_COUNT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.CONDITION]:
                self.state = 5490
                self.match(MySqlParser.CONDITION)
                self.state = 5493
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                    self.state = 5491
                    self.decimalLiteral()
                    pass
                elif token in [MySqlParser.QUESTION_, MySqlParser.PERCENT_S_, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.GROUP, MySqlParser.LEFT, MySqlParser.NUMBER, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD, MySqlParser.AT_SIGN, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID, MySqlParser.OPTIONAL]:
                    self.state = 5492
                    self.variableClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5495
                self.variableClause()
                self.state = 5496
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5497
                self.diagnosticsConditionInformationName()
                self.state = 5505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5498
                    self.match(MySqlParser.COMMA)
                    self.state = 5499
                    self.variableClause()
                    self.state = 5500
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 5501
                    self.diagnosticsConditionInformationName()
                    self.state = 5507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiagnosticsConditionInformationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(MySqlParser.RETURNED_SQLSTATE, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_diagnosticsConditionInformationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnosticsConditionInformationName" ):
                listener.enterDiagnosticsConditionInformationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnosticsConditionInformationName" ):
                listener.exitDiagnosticsConditionInformationName(self)




    def diagnosticsConditionInformationName(self):

        localctx = MySqlParser.DiagnosticsConditionInformationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_diagnosticsConditionInformationName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5510
            _la = self._input.LA(1)
            if not(((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (MySqlParser.CLASS_ORIGIN - 330)) | (1 << (MySqlParser.COLUMN_NAME - 330)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 330)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 330)) | (1 << (MySqlParser.CONSTRAINT_NAME - 330)) | (1 << (MySqlParser.CURSOR_NAME - 330)))) != 0) or _la==MySqlParser.MESSAGE_TEXT or _la==MySqlParser.MYSQL_ERRNO or ((((_la - 542)) & ~0x3f) == 0 and ((1 << (_la - 542)) & ((1 << (MySqlParser.RETURNED_SQLSTATE - 542)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 542)) | (1 << (MySqlParser.TABLE_NAME - 542)))) != 0) or _la==MySqlParser.CATALOG_NAME or _la==MySqlParser.SCHEMA_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeObjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_describeObjectClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DescribeStatementsContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def deleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.DeleteStatementContext,0)

        def insertStatement(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementContext,0)

        def replaceStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplaceStatementContext,0)

        def updateStatement(self):
            return self.getTypedRuleContext(MySqlParser.UpdateStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatements" ):
                listener.enterDescribeStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatements" ):
                listener.exitDescribeStatements(self)


    class DescribeConnectionContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeConnection" ):
                listener.enterDescribeConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeConnection" ):
                listener.exitDescribeConnection(self)



    def describeObjectClause(self):

        localctx = MySqlParser.DescribeObjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_describeObjectClause)
        try:
            self.state = 5522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DELETE, MySqlParser.INSERT, MySqlParser.REPLACE, MySqlParser.SELECT, MySqlParser.UPDATE, MySqlParser.LR_BRACKET]:
                localctx = MySqlParser.DescribeStatementsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5517
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.SELECT, MySqlParser.LR_BRACKET]:
                    self.state = 5512
                    self.selectStatement()
                    pass
                elif token in [MySqlParser.DELETE]:
                    self.state = 5513
                    self.deleteStatement()
                    pass
                elif token in [MySqlParser.INSERT]:
                    self.state = 5514
                    self.insertStatement()
                    pass
                elif token in [MySqlParser.REPLACE]:
                    self.state = 5515
                    self.replaceStatement()
                    pass
                elif token in [MySqlParser.UPDATE]:
                    self.state = 5516
                    self.updateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.FOR]:
                localctx = MySqlParser.DescribeConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5519
                self.match(MySqlParser.FOR)
                self.state = 5520
                self.match(MySqlParser.CONNECTION)
                self.state = 5521
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(MySqlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)




    def fullId(self):

        localctx = MySqlParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5524
            self.uid()
            self.state = 5528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
            if la_ == 1:
                self.state = 5525
                self.match(MySqlParser.DOT_ID)

            elif la_ == 2:
                self.state = 5526
                self.match(MySqlParser.DOT)
                self.state = 5527
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = MySqlParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5530
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DottedIdContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = MySqlParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_fullColumnName)
        try:
            self.state = 5544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5532
                self.uid()
                self.state = 5537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
                if la_ == 1:
                    self.state = 5533
                    self.dottedId()
                    self.state = 5535
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
                    if la_ == 1:
                        self.state = 5534
                        self.dottedId()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5539
                self.matchWildcard()
                self.state = 5540
                self.dottedId()
                self.state = 5542
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,799,self._ctx)
                if la_ == 1:
                    self.state = 5541
                    self.dottedId()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)




    def indexColumnName(self):

        localctx = MySqlParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,801,self._ctx)
            if la_ == 1:
                self.state = 5546
                self.uid()
                pass

            elif la_ == 2:
                self.state = 5547
                self.match(MySqlParser.STRING_LITERAL)
                pass


            self.state = 5554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 5550
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5551
                self.decimalLiteral()
                self.state = 5552
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ASC or _la==MySqlParser.DESC:
                self.state = 5556
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(MySqlParser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MySqlParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_userName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5559
            _la = self._input.LA(1)
            if not(((((_la - 1080)) & ~0x3f) == 0 and ((1 << (_la - 1080)) & ((1 << (MySqlParser.STRING_LITERAL - 1080)) | (1 << (MySqlParser.ID - 1080)) | (1 << (MySqlParser.STRING_USER_NAME - 1080)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MysqlVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(MySqlParser.GLOBAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_mysqlVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariable" ):
                listener.enterMysqlVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariable" ):
                listener.exitMysqlVariable(self)




    def mysqlVariable(self):

        localctx = MySqlParser.MysqlVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_mysqlVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5561
            _la = self._input.LA(1)
            if not(_la==MySqlParser.LOCAL_ID or _la==MySqlParser.GLOBAL_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameBaseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = MySqlParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_charsetName)
        try:
            self.state = 5567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5563
                self.match(MySqlParser.BINARY)
                pass
            elif token in [MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5564
                self.charsetNameBase()
                pass
            elif token in [MySqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5565
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.CHARSET_REVERSE_QOUTE_STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5566
                self.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = MySqlParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_collationName)
        try:
            self.state = 5571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5569
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5570
                self.match(MySqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE(self):
            return self.getToken(MySqlParser.ARCHIVE, 0)

        def BLACKHOLE(self):
            return self.getToken(MySqlParser.BLACKHOLE, 0)

        def CSV(self):
            return self.getToken(MySqlParser.CSV, 0)

        def FEDERATED(self):
            return self.getToken(MySqlParser.FEDERATED, 0)

        def INNODB(self):
            return self.getToken(MySqlParser.INNODB, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def MRG_MYISAM(self):
            return self.getToken(MySqlParser.MRG_MYISAM, 0)

        def MYISAM(self):
            return self.getToken(MySqlParser.MYISAM, 0)

        def NDB(self):
            return self.getToken(MySqlParser.NDB, 0)

        def NDBCLUSTER(self):
            return self.getToken(MySqlParser.NDBCLUSTER, 0)

        def PERFORMANCE_SCHEMA(self):
            return self.getToken(MySqlParser.PERFORMANCE_SCHEMA, 0)

        def TOKUDB(self):
            return self.getToken(MySqlParser.TOKUDB, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def CONNECT(self):
            return self.getToken(MySqlParser.CONNECT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_engineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineName" ):
                listener.enterEngineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineName" ):
                listener.exitEngineName(self)




    def engineName(self):

        localctx = MySqlParser.EngineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_engineName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5573
            _la = self._input.LA(1)
            if not(_la==MySqlParser.CONNECT or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (MySqlParser.ARCHIVE - 722)) | (1 << (MySqlParser.BLACKHOLE - 722)) | (1 << (MySqlParser.CSV - 722)) | (1 << (MySqlParser.FEDERATED - 722)) | (1 << (MySqlParser.INNODB - 722)) | (1 << (MySqlParser.MEMORY - 722)) | (1 << (MySqlParser.MRG_MYISAM - 722)) | (1 << (MySqlParser.MYISAM - 722)) | (1 << (MySqlParser.NDB - 722)) | (1 << (MySqlParser.NDBCLUSTER - 722)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 722)) | (1 << (MySqlParser.TOKUDB - 722)))) != 0) or ((((_la - 1080)) & ~0x3f) == 0 and ((1 << (_la - 1080)) & ((1 << (MySqlParser.STRING_LITERAL - 1080)) | (1 << (MySqlParser.ID - 1080)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1080)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUS)
            else:
                return self.getToken(MySqlParser.MINUS, i)

        def COLON_SYMB(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COLON_SYMB)
            else:
                return self.getToken(MySqlParser.COLON_SYMB, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)




    def uuidSet(self):

        localctx = MySqlParser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5575
            self.decimalLiteral()
            self.state = 5576
            self.match(MySqlParser.MINUS)
            self.state = 5577
            self.decimalLiteral()
            self.state = 5578
            self.match(MySqlParser.MINUS)
            self.state = 5579
            self.decimalLiteral()
            self.state = 5580
            self.match(MySqlParser.MINUS)
            self.state = 5581
            self.decimalLiteral()
            self.state = 5582
            self.match(MySqlParser.MINUS)
            self.state = 5583
            self.decimalLiteral()
            self.state = 5589 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5584
                self.match(MySqlParser.COLON_SYMB)
                self.state = 5585
                self.decimalLiteral()
                self.state = 5586
                self.match(MySqlParser.MINUS)
                self.state = 5587
                self.decimalLiteral()
                self.state = 5591 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.globalTableUid = None # XuidStringIdContext
            self.qualifier = None # XuidStringIdContext
            self.idFormat = None # DecimalLiteralContext

        def xuidStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.XuidStringIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.XuidStringIdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)




    def xid(self):

        localctx = MySqlParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5593
            localctx.globalTableUid = self.xuidStringId()
            self.state = 5600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMA:
                self.state = 5594
                self.match(MySqlParser.COMMA)
                self.state = 5595
                localctx.qualifier = self.xuidStringId()
                self.state = 5598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COMMA:
                    self.state = 5596
                    self.match(MySqlParser.COMMA)
                    self.state = 5597
                    localctx.idFormat = self.decimalLiteral()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XuidStringIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(MySqlParser.BIT_STRING, 0)

        def HEXADECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.HEXADECIMAL_LITERAL)
            else:
                return self.getToken(MySqlParser.HEXADECIMAL_LITERAL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_xuidStringId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXuidStringId" ):
                listener.enterXuidStringId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXuidStringId" ):
                listener.exitXuidStringId(self)




    def xuidStringId(self):

        localctx = MySqlParser.XuidStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_xuidStringId)
        self._la = 0 # Token type
        try:
            self.state = 5609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5602
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.BIT_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5603
                self.match(MySqlParser.BIT_STRING)
                pass
            elif token in [MySqlParser.HEXADECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5605 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5604
                    self.match(MySqlParser.HEXADECIMAL_LITERAL)
                    self.state = 5607 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.HEXADECIMAL_LITERAL):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_authPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPlugin" ):
                listener.enterAuthPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPlugin" ):
                listener.exitAuthPlugin(self)




    def authPlugin(self):

        localctx = MySqlParser.AuthPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_authPlugin)
        try:
            self.state = 5613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,811,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5611
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5612
                self.match(MySqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)




    def uid(self):

        localctx = MySqlParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_uid)
        try:
            self.state = 5618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,812,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5615
                self.simpleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5616
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5617
                self.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameBaseContext,0)


        def transactionLevelBase(self):
            return self.getTypedRuleContext(MySqlParser.TransactionLevelBaseContext,0)


        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def privilegesBase(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegesBaseContext,0)


        def intervalTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeBaseContext,0)


        def dataTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeBaseContext,0)


        def keywordsCanBeId(self):
            return self.getTypedRuleContext(MySqlParser.KeywordsCanBeIdContext,0)


        def functionNameBase(self):
            return self.getTypedRuleContext(MySqlParser.FunctionNameBaseContext,0)


        def parameterMarker(self):
            return self.getTypedRuleContext(MySqlParser.ParameterMarkerContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)




    def simpleId(self):

        localctx = MySqlParser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_simpleId)
        try:
            self.state = 5630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5620
                self.match(MySqlParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5621
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5622
                self.transactionLevelBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5623
                self.engineName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5624
                self.privilegesBase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5625
                self.intervalTypeBase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5626
                self.dataTypeBase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5627
                self.keywordsCanBeId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5628
                self.functionNameBase()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5629
                self.parameterMarker()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(MySqlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)




    def dottedId(self):

        localctx = MySqlParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_dottedId)
        try:
            self.state = 5635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5632
                self.match(MySqlParser.DOT_ID)
                pass
            elif token in [MySqlParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5633
                self.match(MySqlParser.DOT)
                self.state = 5634
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = MySqlParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5637
            _la = self._input.LA(1)
            if not(((((_la - 1070)) & ~0x3f) == 0 and ((1 << (_la - 1070)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1070)) | (1 << (MySqlParser.ONE_DECIMAL - 1070)) | (1 << (MySqlParser.TWO_DECIMAL - 1070)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1070)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSizeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESIZE_LITERAL(self):
            return self.getToken(MySqlParser.FILESIZE_LITERAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_fileSizeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSizeLiteral" ):
                listener.enterFileSizeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSizeLiteral" ):
                listener.exitFileSizeLiteral(self)




    def fileSizeLiteral(self):

        localctx = MySqlParser.FileSizeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_fileSizeLiteral)
        try:
            self.state = 5641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FILESIZE_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5639
                self.match(MySqlParser.FILESIZE_LITERAL)
                pass
            elif token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5640
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(MySqlParser.STRING_CHARSET_NAME, 0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = MySqlParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 5666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,822,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5648
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.STRING_LITERAL, MySqlParser.STRING_CHARSET_NAME]:
                    self.state = 5644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.STRING_CHARSET_NAME:
                        self.state = 5643
                        self.match(MySqlParser.STRING_CHARSET_NAME)


                    self.state = 5646
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [MySqlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5647
                    self.match(MySqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5651 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5650
                        self.match(MySqlParser.STRING_LITERAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 5653 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,818,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5660
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.STRING_LITERAL, MySqlParser.STRING_CHARSET_NAME]:
                    self.state = 5656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.STRING_CHARSET_NAME:
                        self.state = 5655
                        self.match(MySqlParser.STRING_CHARSET_NAME)


                    self.state = 5658
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [MySqlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5659
                    self.match(MySqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,821,self._ctx)
                if la_ == 1:
                    self.state = 5662
                    self.match(MySqlParser.COLLATE)
                    self.state = 5663
                    self.collationName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(MySqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MySqlParser.FALSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = MySqlParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5668
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FALSE or _la==MySqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexadecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(MySqlParser.STRING_CHARSET_NAME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_hexadecimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)




    def hexadecimalLiteral(self):

        localctx = MySqlParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_hexadecimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.STRING_CHARSET_NAME:
                self.state = 5670
                self.match(MySqlParser.STRING_CHARSET_NAME)


            self.state = 5673
            self.match(MySqlParser.HEXADECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(MySqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)




    def nullNotnull(self):

        localctx = MySqlParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOT:
                self.state = 5675
                self.match(MySqlParser.NOT)


            self.state = 5678
            _la = self._input.LA(1)
            if not(_la==MySqlParser.NULL_LITERAL or _la==MySqlParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def parameterMarker(self):
            return self.getTypedRuleContext(MySqlParser.ParameterMarkerContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.HexadecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(MySqlParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(MySqlParser.BIT_STRING, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(MySqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = MySqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,826,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5680
                self.parameterMarker()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5681
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5682
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5683
                self.match(MySqlParser.MINUS)
                self.state = 5684
                self.decimalLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5685
                self.hexadecimalLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5686
                self.booleanLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5687
                self.match(MySqlParser.REAL_LITERAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5688
                self.match(MySqlParser.BIT_STRING)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 5689
                    self.match(MySqlParser.NOT)


                self.state = 5692
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NULL_LITERAL or _la==MySqlParser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpatialDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTION, 0)
        def GEOMCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMCOLLECTION, 0)
        def LINESTRING(self):
            return self.getToken(MySqlParser.LINESTRING, 0)
        def MULTILINESTRING(self):
            return self.getToken(MySqlParser.MULTILINESTRING, 0)
        def MULTIPOINT(self):
            return self.getToken(MySqlParser.MULTIPOINT, 0)
        def MULTIPOLYGON(self):
            return self.getToken(MySqlParser.MULTIPOLYGON, 0)
        def POINT(self):
            return self.getToken(MySqlParser.POINT, 0)
        def POLYGON(self):
            return self.getToken(MySqlParser.POLYGON, 0)
        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)
        def GEOMETRY(self):
            return self.getToken(MySqlParser.GEOMETRY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialDataType" ):
                listener.enterSpatialDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialDataType" ):
                listener.exitSpatialDataType(self)


    class LongVarbinaryDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARBINARY(self):
            return self.getToken(MySqlParser.VARBINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongVarbinaryDataType" ):
                listener.enterLongVarbinaryDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongVarbinaryDataType" ):
                listener.exitLongVarbinaryDataType(self)


    class CollectionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def collectionOptions(self):
            return self.getTypedRuleContext(MySqlParser.CollectionOptionsContext,0)

        def ENUM(self):
            return self.getToken(MySqlParser.ENUM, 0)
        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionDataType" ):
                listener.enterCollectionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionDataType" ):
                listener.exitCollectionDataType(self)


    class NationalVaryingStringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def NATIONAL(self):
            return self.getToken(MySqlParser.NATIONAL, 0)
        def VARYING(self):
            return self.getToken(MySqlParser.VARYING, 0)
        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNationalVaryingStringDataType" ):
                listener.enterNationalVaryingStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNationalVaryingStringDataType" ):
                listener.exitNationalVaryingStringDataType(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def TINYINT(self):
            return self.getToken(MySqlParser.TINYINT, 0)
        def SMALLINT(self):
            return self.getToken(MySqlParser.SMALLINT, 0)
        def MEDIUMINT(self):
            return self.getToken(MySqlParser.MEDIUMINT, 0)
        def INT(self):
            return self.getToken(MySqlParser.INT, 0)
        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)
        def BIGINT(self):
            return self.getToken(MySqlParser.BIGINT, 0)
        def MIDDLEINT(self):
            return self.getToken(MySqlParser.MIDDLEINT, 0)
        def INT1(self):
            return self.getToken(MySqlParser.INT1, 0)
        def INT2(self):
            return self.getToken(MySqlParser.INT2, 0)
        def INT3(self):
            return self.getToken(MySqlParser.INT3, 0)
        def INT4(self):
            return self.getToken(MySqlParser.INT4, 0)
        def INT8(self):
            return self.getToken(MySqlParser.INT8, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def ZEROFILL(self):
            return self.getToken(MySqlParser.ZEROFILL, 0)
        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)
        def UNSIGNED(self):
            return self.getToken(MySqlParser.UNSIGNED, 0)
        def REAL(self):
            return self.getToken(MySqlParser.REAL, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoDimensionContext,0)

        def DOUBLE(self):
            return self.getToken(MySqlParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(MySqlParser.PRECISION, 0)
        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)
        def DEC(self):
            return self.getToken(MySqlParser.DEC, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def NUMERIC(self):
            return self.getToken(MySqlParser.NUMERIC, 0)
        def FLOAT(self):
            return self.getToken(MySqlParser.FLOAT, 0)
        def FLOAT4(self):
            return self.getToken(MySqlParser.FLOAT4, 0)
        def FLOAT8(self):
            return self.getToken(MySqlParser.FLOAT8, 0)
        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoOptionalDimensionContext,0)

        def BIT(self):
            return self.getToken(MySqlParser.BIT, 0)
        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)
        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)
        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def VARBINARY(self):
            return self.getToken(MySqlParser.VARBINARY, 0)
        def BLOB(self):
            return self.getToken(MySqlParser.BLOB, 0)
        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)


    class StringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def CHARACTER(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.CHARACTER)
            else:
                return self.getToken(MySqlParser.CHARACTER, i)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def TINYTEXT(self):
            return self.getToken(MySqlParser.TINYTEXT, 0)
        def TEXT(self):
            return self.getToken(MySqlParser.TEXT, 0)
        def MEDIUMTEXT(self):
            return self.getToken(MySqlParser.MEDIUMTEXT, 0)
        def LONGTEXT(self):
            return self.getToken(MySqlParser.LONGTEXT, 0)
        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)
        def NVARCHAR(self):
            return self.getToken(MySqlParser.NVARCHAR, 0)
        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARYING(self):
            return self.getToken(MySqlParser.VARYING, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BINARY)
            else:
                return self.getToken(MySqlParser.BINARY, i)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringDataType" ):
                listener.enterStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringDataType" ):
                listener.exitStringDataType(self)


    class LongVarcharDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongVarcharDataType" ):
                listener.enterLongVarcharDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongVarcharDataType" ):
                listener.exitLongVarcharDataType(self)


    class NationalStringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def NATIONAL(self):
            return self.getToken(MySqlParser.NATIONAL, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNationalStringDataType" ):
                listener.enterNationalStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNationalStringDataType" ):
                listener.exitNationalStringDataType(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)
        def TINYBLOB(self):
            return self.getToken(MySqlParser.TINYBLOB, 0)
        def MEDIUMBLOB(self):
            return self.getToken(MySqlParser.MEDIUMBLOB, 0)
        def LONGBLOB(self):
            return self.getToken(MySqlParser.LONGBLOB, 0)
        def BOOL(self):
            return self.getToken(MySqlParser.BOOL, 0)
        def BOOLEAN(self):
            return self.getToken(MySqlParser.BOOLEAN, 0)
        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)



    def dataType(self):

        localctx = MySqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 5826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,861,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.StringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5695
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHARACTER or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (MySqlParser.CHAR - 207)) | (1 << (MySqlParser.VARCHAR - 207)) | (1 << (MySqlParser.NVARCHAR - 207)) | (1 << (MySqlParser.LONG - 207)) | (1 << (MySqlParser.TINYTEXT - 207)) | (1 << (MySqlParser.TEXT - 207)) | (1 << (MySqlParser.MEDIUMTEXT - 207)) | (1 << (MySqlParser.LONGTEXT - 207)))) != 0) or _la==MySqlParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VARYING:
                    self.state = 5696
                    self.match(MySqlParser.VARYING)


                self.state = 5700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,828,self._ctx)
                if la_ == 1:
                    self.state = 5699
                    self.lengthOneDimension()


                self.state = 5703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
                if la_ == 1:
                    self.state = 5702
                    self.match(MySqlParser.BINARY)


                self.state = 5711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
                if la_ == 1:
                    self.state = 5708
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.CHARACTER]:
                        self.state = 5705
                        self.match(MySqlParser.CHARACTER)
                        self.state = 5706
                        self.match(MySqlParser.SET)
                        pass
                    elif token in [MySqlParser.CHARSET]:
                        self.state = 5707
                        self.match(MySqlParser.CHARSET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5710
                    self.charsetName()


                self.state = 5716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
                if la_ == 1:
                    self.state = 5713
                    self.match(MySqlParser.COLLATE)
                    self.state = 5714
                    self.collationName()

                elif la_ == 2:
                    self.state = 5715
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 2:
                localctx = MySqlParser.NationalStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5718
                self.match(MySqlParser.NATIONAL)
                self.state = 5719
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHARACTER or _la==MySqlParser.VARCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
                if la_ == 1:
                    self.state = 5720
                    self.lengthOneDimension()


                self.state = 5724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.BINARY:
                    self.state = 5723
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 3:
                localctx = MySqlParser.NationalStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5726
                self.match(MySqlParser.NCHAR)
                self.state = 5727
                localctx.typeName = self.match(MySqlParser.VARCHAR)
                self.state = 5729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,835,self._ctx)
                if la_ == 1:
                    self.state = 5728
                    self.lengthOneDimension()


                self.state = 5732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.BINARY:
                    self.state = 5731
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 4:
                localctx = MySqlParser.NationalVaryingStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5734
                self.match(MySqlParser.NATIONAL)
                self.state = 5735
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHARACTER or _la==MySqlParser.CHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5736
                self.match(MySqlParser.VARYING)
                self.state = 5738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,837,self._ctx)
                if la_ == 1:
                    self.state = 5737
                    self.lengthOneDimension()


                self.state = 5741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.BINARY:
                    self.state = 5740
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 5:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5743
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (MySqlParser.TINYINT - 181)) | (1 << (MySqlParser.SMALLINT - 181)) | (1 << (MySqlParser.MEDIUMINT - 181)) | (1 << (MySqlParser.MIDDLEINT - 181)) | (1 << (MySqlParser.INT - 181)) | (1 << (MySqlParser.INT1 - 181)) | (1 << (MySqlParser.INT2 - 181)) | (1 << (MySqlParser.INT3 - 181)) | (1 << (MySqlParser.INT4 - 181)) | (1 << (MySqlParser.INT8 - 181)) | (1 << (MySqlParser.INTEGER - 181)) | (1 << (MySqlParser.BIGINT - 181)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,839,self._ctx)
                if la_ == 1:
                    self.state = 5744
                    self.lengthOneDimension()


                self.state = 5748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,840,self._ctx)
                if la_ == 1:
                    self.state = 5747
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.SIGNED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ZEROFILL:
                    self.state = 5750
                    self.match(MySqlParser.ZEROFILL)


                pass

            elif la_ == 6:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5753
                localctx.typeName = self.match(MySqlParser.REAL)
                self.state = 5755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,842,self._ctx)
                if la_ == 1:
                    self.state = 5754
                    self.lengthTwoDimension()


                self.state = 5758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
                if la_ == 1:
                    self.state = 5757
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.SIGNED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ZEROFILL:
                    self.state = 5760
                    self.match(MySqlParser.ZEROFILL)


                pass

            elif la_ == 7:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5763
                localctx.typeName = self.match(MySqlParser.DOUBLE)
                self.state = 5765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRECISION:
                    self.state = 5764
                    self.match(MySqlParser.PRECISION)


                self.state = 5768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,846,self._ctx)
                if la_ == 1:
                    self.state = 5767
                    self.lengthTwoDimension()


                self.state = 5771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,847,self._ctx)
                if la_ == 1:
                    self.state = 5770
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.SIGNED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ZEROFILL:
                    self.state = 5773
                    self.match(MySqlParser.ZEROFILL)


                pass

            elif la_ == 8:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5776
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (MySqlParser.FLOAT - 196)) | (1 << (MySqlParser.FLOAT4 - 196)) | (1 << (MySqlParser.FLOAT8 - 196)) | (1 << (MySqlParser.DECIMAL - 196)) | (1 << (MySqlParser.DEC - 196)) | (1 << (MySqlParser.NUMERIC - 196)))) != 0) or _la==MySqlParser.FIXED):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
                if la_ == 1:
                    self.state = 5777
                    self.lengthTwoOptionalDimension()


                self.state = 5781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
                if la_ == 1:
                    self.state = 5780
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.SIGNED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ZEROFILL:
                    self.state = 5783
                    self.match(MySqlParser.ZEROFILL)


                pass

            elif la_ == 9:
                localctx = MySqlParser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5786
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TINYBLOB - 202)) | (1 << (MySqlParser.MEDIUMBLOB - 202)) | (1 << (MySqlParser.LONGBLOB - 202)) | (1 << (MySqlParser.SERIAL - 202)))) != 0) or _la==MySqlParser.BOOL or _la==MySqlParser.BOOLEAN):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5787
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (MySqlParser.TIME - 203)) | (1 << (MySqlParser.TIMESTAMP - 203)) | (1 << (MySqlParser.DATETIME - 203)) | (1 << (MySqlParser.YEAR - 203)) | (1 << (MySqlParser.BINARY - 203)) | (1 << (MySqlParser.VARBINARY - 203)) | (1 << (MySqlParser.BLOB - 203)))) != 0) or _la==MySqlParser.BIT):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,852,self._ctx)
                if la_ == 1:
                    self.state = 5788
                    self.lengthOneDimension()


                pass

            elif la_ == 11:
                localctx = MySqlParser.CollectionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5791
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SET or _la==MySqlParser.ENUM):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5792
                self.collectionOptions()
                self.state = 5794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.BINARY:
                    self.state = 5793
                    self.match(MySqlParser.BINARY)


                self.state = 5802
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,855,self._ctx)
                if la_ == 1:
                    self.state = 5799
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.CHARACTER]:
                        self.state = 5796
                        self.match(MySqlParser.CHARACTER)
                        self.state = 5797
                        self.match(MySqlParser.SET)
                        pass
                    elif token in [MySqlParser.CHARSET]:
                        self.state = 5798
                        self.match(MySqlParser.CHARSET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5801
                    self.charsetName()


                pass

            elif la_ == 12:
                localctx = MySqlParser.SpatialDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5804
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.JSON or ((((_la - 738)) & ~0x3f) == 0 and ((1 << (_la - 738)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 738)) | (1 << (MySqlParser.GEOMCOLLECTION - 738)) | (1 << (MySqlParser.GEOMETRY - 738)) | (1 << (MySqlParser.LINESTRING - 738)) | (1 << (MySqlParser.MULTILINESTRING - 738)) | (1 << (MySqlParser.MULTIPOINT - 738)) | (1 << (MySqlParser.MULTIPOLYGON - 738)) | (1 << (MySqlParser.POINT - 738)) | (1 << (MySqlParser.POLYGON - 738)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                localctx = MySqlParser.LongVarcharDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5805
                localctx.typeName = self.match(MySqlParser.LONG)
                self.state = 5807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VARCHAR:
                    self.state = 5806
                    self.match(MySqlParser.VARCHAR)


                self.state = 5810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.BINARY:
                    self.state = 5809
                    self.match(MySqlParser.BINARY)


                self.state = 5818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,859,self._ctx)
                if la_ == 1:
                    self.state = 5815
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.CHARACTER]:
                        self.state = 5812
                        self.match(MySqlParser.CHARACTER)
                        self.state = 5813
                        self.match(MySqlParser.SET)
                        pass
                    elif token in [MySqlParser.CHARSET]:
                        self.state = 5814
                        self.match(MySqlParser.CHARSET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5817
                    self.charsetName()


                self.state = 5822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,860,self._ctx)
                if la_ == 1:
                    self.state = 5820
                    self.match(MySqlParser.COLLATE)
                    self.state = 5821
                    self.collationName()


                pass

            elif la_ == 14:
                localctx = MySqlParser.LongVarbinaryDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 5824
                self.match(MySqlParser.LONG)
                self.state = 5825
                self.match(MySqlParser.VARBINARY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_collectionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionOptions" ):
                listener.enterCollectionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionOptions" ):
                listener.exitCollectionOptions(self)




    def collectionOptions(self):

        localctx = MySqlParser.CollectionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_collectionOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5828
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5829
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 5834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5830
                self.match(MySqlParser.COMMA)
                self.state = 5831
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 5836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5837
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConvertedDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)


        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)

        def lengthTwoDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoDimensionContext,0)


        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(MySqlParser.UNSIGNED, 0)

        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_convertedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConvertedDataType" ):
                listener.enterConvertedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConvertedDataType" ):
                listener.exitConvertedDataType(self)




    def convertedDataType(self):

        localctx = MySqlParser.ConvertedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_convertedDataType)
        self._la = 0 # Token type
        try:
            self.state = 5864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BINARY, MySqlParser.NCHAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5839
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINARY or _la==MySqlParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 5840
                    self.lengthOneDimension()


                pass
            elif token in [MySqlParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5843
                localctx.typeName = self.match(MySqlParser.CHAR)
                self.state = 5845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 5844
                    self.lengthOneDimension()


                self.state = 5853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CHARACTER or _la==MySqlParser.CHARSET:
                    self.state = 5850
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.CHARACTER]:
                        self.state = 5847
                        self.match(MySqlParser.CHARACTER)
                        self.state = 5848
                        self.match(MySqlParser.SET)
                        pass
                    elif token in [MySqlParser.CHARSET]:
                        self.state = 5849
                        self.match(MySqlParser.CHARSET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5852
                    self.charsetName()


                pass
            elif token in [MySqlParser.DATE, MySqlParser.TIME, MySqlParser.DATETIME, MySqlParser.JSON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5855
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.DATETIME - 202)))) != 0) or _la==MySqlParser.JSON):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5856
                localctx.typeName = self.match(MySqlParser.DECIMAL)
                self.state = 5858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 5857
                    self.lengthTwoDimension()


                pass
            elif token in [MySqlParser.UNSIGNED, MySqlParser.SIGNED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5860
                _la = self._input.LA(1)
                if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.SIGNED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTEGER:
                    self.state = 5861
                    self.match(MySqlParser.INTEGER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)




    def lengthOneDimension(self):

        localctx = MySqlParser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5866
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5867
            self.decimalLiteral()
            self.state = 5868
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)




    def lengthTwoDimension(self):

        localctx = MySqlParser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5870
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5871
            self.decimalLiteral()
            self.state = 5872
            self.match(MySqlParser.COMMA)
            self.state = 5873
            self.decimalLiteral()
            self.state = 5874
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoOptionalDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthTwoOptionalDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoOptionalDimension" ):
                listener.enterLengthTwoOptionalDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoOptionalDimension" ):
                listener.exitLengthTwoOptionalDimension(self)




    def lengthTwoOptionalDimension(self):

        localctx = MySqlParser.LengthTwoOptionalDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_lengthTwoOptionalDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5876
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5877
            self.decimalLiteral()
            self.state = 5880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMA:
                self.state = 5878
                self.match(MySqlParser.COMMA)
                self.state = 5879
                self.decimalLiteral()


            self.state = 5882
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)




    def uidList(self):

        localctx = MySqlParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_uidList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5884
            self.uid()
            self.state = 5889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,871,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5885
                    self.match(MySqlParser.COMMA)
                    self.state = 5886
                    self.uid() 
                self.state = 5891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,871,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)




    def tables(self):

        localctx = MySqlParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_tables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5892
            self.tableName()
            self.state = 5897
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,872,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5893
                    self.match(MySqlParser.COMMA)
                    self.state = 5894
                    self.tableName() 
                self.state = 5899
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,872,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexColumnNameContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)




    def indexColumnNames(self):

        localctx = MySqlParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5900
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5901
            self.indexColumnName()
            self.state = 5906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5902
                self.match(MySqlParser.COMMA)
                self.state = 5903
                self.indexColumnName()
                self.state = 5908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5909
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = MySqlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5911
            self.expression(0)
            self.state = 5916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5912
                self.match(MySqlParser.COMMA)
                self.state = 5913
                self.expression(0)
                self.state = 5918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionOrDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)




    def expressionsWithDefaults(self):

        localctx = MySqlParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5919
            self.expressionOrDefault()
            self.state = 5924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5920
                self.match(MySqlParser.COMMA)
                self.state = 5921
                self.expressionOrDefault()
                self.state = 5926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_constants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstants" ):
                listener.enterConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstants" ):
                listener.exitConstants(self)




    def constants(self):

        localctx = MySqlParser.ConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_constants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5927
            self.constant()
            self.state = 5932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5928
                self.match(MySqlParser.COMMA)
                self.state = 5929
                self.constant()
                self.state = 5934
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_simpleStrings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStrings" ):
                listener.enterSimpleStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStrings" ):
                listener.exitSimpleStrings(self)




    def simpleStrings(self):

        localctx = MySqlParser.SimpleStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_simpleStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5935
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 5940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5936
                self.match(MySqlParser.COMMA)
                self.state = 5937
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 5942
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCAL_ID)
            else:
                return self.getToken(MySqlParser.LOCAL_ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_userVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariables" ):
                listener.enterUserVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariables" ):
                listener.exitUserVariables(self)




    def userVariables(self):

        localctx = MySqlParser.UserVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_userVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5943
            self.match(MySqlParser.LOCAL_ID)
            self.state = 5948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5944
                self.match(MySqlParser.COMMA)
                self.state = 5945
                self.match(MySqlParser.LOCAL_ID)
                self.state = 5950
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def currentTimestamp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CurrentTimestampContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CurrentTimestampContext,i)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(MySqlParser.UnaryOperatorContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = MySqlParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,880,self._ctx)
            if la_ == 1:
                self.state = 5951
                self.match(MySqlParser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.state = 5953
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,879,self._ctx)
                if la_ == 1:
                    self.state = 5952
                    self.unaryOperator()


                self.state = 5955
                self.constant()
                pass

            elif la_ == 3:
                self.state = 5956
                self.currentTimestamp()
                pass

            elif la_ == 4:
                self.state = 5957
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5958
                self.expression(0)
                self.state = 5959
                self.match(MySqlParser.RR_BRACKET)
                pass


            self.state = 5966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,881,self._ctx)
            if la_ == 1:
                self.state = 5963
                self.match(MySqlParser.ON)
                self.state = 5964
                self.match(MySqlParser.UPDATE)
                self.state = 5965
                self.currentTimestamp()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrentTimestampContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(MySqlParser.NOW, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(MySqlParser.LOCALTIMESTAMP, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_currentTimestamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentTimestamp" ):
                listener.enterCurrentTimestamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentTimestamp" ):
                listener.exitCurrentTimestamp(self)




    def currentTimestamp(self):

        localctx = MySqlParser.CurrentTimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_currentTimestamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CURRENT_TIMESTAMP, MySqlParser.LOCALTIME, MySqlParser.LOCALTIMESTAMP]:
                self.state = 5968
                _la = self._input.LA(1)
                if not(((((_la - 286)) & ~0x3f) == 0 and ((1 << (_la - 286)) & ((1 << (MySqlParser.CURRENT_TIMESTAMP - 286)) | (1 << (MySqlParser.LOCALTIME - 286)) | (1 << (MySqlParser.LOCALTIMESTAMP - 286)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,883,self._ctx)
                if la_ == 1:
                    self.state = 5969
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 5971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 1070)) & ~0x3f) == 0 and ((1 << (_la - 1070)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1070)) | (1 << (MySqlParser.ONE_DECIMAL - 1070)) | (1 << (MySqlParser.TWO_DECIMAL - 1070)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1070)))) != 0):
                        self.state = 5970
                        self.decimalLiteral()


                    self.state = 5973
                    self.match(MySqlParser.RR_BRACKET)


                pass
            elif token in [MySqlParser.NOW]:
                self.state = 5976
                self.match(MySqlParser.NOW)
                self.state = 5977
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 1070)) & ~0x3f) == 0 and ((1 << (_la - 1070)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1070)) | (1 << (MySqlParser.ONE_DECIMAL - 1070)) | (1 << (MySqlParser.TWO_DECIMAL - 1070)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1070)))) != 0):
                    self.state = 5978
                    self.decimalLiteral()


                self.state = 5981
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = MySqlParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_expressionOrDefault)
        try:
            self.state = 5986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,886,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5984
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5985
                self.match(MySqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = MySqlParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5988
            self.match(MySqlParser.IF)
            self.state = 5989
            self.match(MySqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = MySqlParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5991
            self.match(MySqlParser.IF)
            self.state = 5992
            self.match(MySqlParser.NOT)
            self.state = 5993
            self.match(MySqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecificFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specificFunction(self):
            return self.getTypedRuleContext(MySqlParser.SpecificFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecificFunctionCall" ):
                listener.enterSpecificFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecificFunctionCall" ):
                listener.exitSpecificFunctionCall(self)


    class PasswordFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionCall" ):
                listener.enterPasswordFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionCall" ):
                listener.exitPasswordFunctionCall(self)


    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(MySqlParser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)


    class ScalarFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalarFunctionName(self):
            return self.getTypedRuleContext(MySqlParser.ScalarFunctionNameContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionCall" ):
                listener.enterScalarFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionCall" ):
                listener.exitScalarFunctionCall(self)



    def functionCall(self):

        localctx = MySqlParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_functionCall)
        try:
            self.state = 6012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,889,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SpecificFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5995
                self.specificFunction()
                pass

            elif la_ == 2:
                localctx = MySqlParser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5996
                self.aggregateWindowedFunction()
                pass

            elif la_ == 3:
                localctx = MySqlParser.ScalarFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5997
                self.scalarFunctionName()
                self.state = 5998
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,887,self._ctx)
                if la_ == 1:
                    self.state = 5999
                    self.functionArgs()


                self.state = 6002
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6004
                self.fullId()
                self.state = 6005
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6007
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
                if la_ == 1:
                    self.state = 6006
                    self.functionArgs()


                self.state = 6009
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = MySqlParser.PasswordFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6011
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecificFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_specificFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positionString = None # StringLiteralContext
            self.positionExpression = None # ExpressionContext
            self.inString = None # StringLiteralContext
            self.inExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(MySqlParser.POSITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionFunctionCall" ):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionFunctionCall" ):
                listener.exitPositionFunctionCall(self)


    class TrimFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positioinForm = None # Token
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromString = None # StringLiteralContext
            self.fromExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(MySqlParser.TRIM, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def BOTH(self):
            return self.getToken(MySqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(MySqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(MySqlParser.TRAILING, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunctionCall" ):
                listener.enterTrimFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunctionCall" ):
                listener.exitTrimFunctionCall(self)


    class JsonValueFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_VALUE(self):
            return self.getToken(MySqlParser.JSON_VALUE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def RETURNING(self):
            return self.getToken(MySqlParser.RETURNING, 0)
        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)
        def EMPTY(self):
            return self.getToken(MySqlParser.EMPTY, 0)
        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ERROR)
            else:
                return self.getToken(MySqlParser.ERROR, i)
        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NULL)
            else:
                return self.getToken(MySqlParser.NULL, i)
        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)
        def defaultValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DefaultValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DefaultValueContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueFunctionCall" ):
                listener.enterJsonValueFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueFunctionCall" ):
                listener.exitJsonValueFunctionCall(self)


    class CaseFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(MySqlParser.CASE, 0)
        def END(self):
            return self.getToken(MySqlParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFunctionCall" ):
                listener.enterCaseFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFunctionCall" ):
                listener.exitCaseFunctionCall(self)


    class ExtractFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(MySqlParser.EXTRACT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFunctionCall" ):
                listener.enterExtractFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFunctionCall" ):
                listener.exitExtractFunctionCall(self)


    class DataTypeFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.separator = None # Token
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def CAST(self):
            return self.getToken(MySqlParser.CAST, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeFunctionCall" ):
                listener.enterDataTypeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeFunctionCall" ):
                listener.exitDataTypeFunctionCall(self)


    class ValuesFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesFunctionCall" ):
                listener.enterValuesFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesFunctionCall" ):
                listener.exitValuesFunctionCall(self)


    class CaseExpressionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(MySqlParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpressionFunctionCall" ):
                listener.enterCaseExpressionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpressionFunctionCall" ):
                listener.exitCaseExpressionFunctionCall(self)


    class SimpleFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(MySqlParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(MySqlParser.CURRENT_TIME, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)
        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)


    class CharFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFunctionCall" ):
                listener.enterCharFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFunctionCall" ):
                listener.exitCharFunctionCall(self)


    class WeightFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.stringFormat = None # Token
            self.copyFrom(ctx)

        def WEIGHT_STRING(self):
            return self.getToken(MySqlParser.WEIGHT_STRING, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def levelsInWeightString(self):
            return self.getTypedRuleContext(MySqlParser.LevelsInWeightStringContext,0)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightFunctionCall" ):
                listener.enterWeightFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightFunctionCall" ):
                listener.exitWeightFunctionCall(self)


    class GetFormatFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.datetimeFormat = None # Token
            self.copyFrom(ctx)

        def GET_FORMAT(self):
            return self.getToken(MySqlParser.GET_FORMAT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)
        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)
        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetFormatFunctionCall" ):
                listener.enterGetFormatFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetFormatFunctionCall" ):
                listener.exitGetFormatFunctionCall(self)


    class SubstrFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromDecimal = None # DecimalLiteralContext
            self.fromExpression = None # ExpressionContext
            self.forDecimal = None # DecimalLiteralContext
            self.forExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def SUBSTR(self):
            return self.getToken(MySqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(MySqlParser.SUBSTRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrFunctionCall" ):
                listener.enterSubstrFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrFunctionCall" ):
                listener.exitSubstrFunctionCall(self)



    def specificFunction(self):

        localctx = MySqlParser.SpecificFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_specificFunction)
        self._la = 0 # Token type
        try:
            self.state = 6206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,915,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6014
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CURRENT_USER or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (MySqlParser.CURRENT_DATE - 284)) | (1 << (MySqlParser.CURRENT_TIME - 284)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 284)) | (1 << (MySqlParser.LOCALTIME - 284)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6017
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,890,self._ctx)
                if la_ == 1:
                    self.state = 6015
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6016
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6019
                self.match(MySqlParser.CONVERT)
                self.state = 6020
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6021
                self.expression(0)
                self.state = 6022
                localctx.separator = self.match(MySqlParser.COMMA)
                self.state = 6023
                self.convertedDataType()
                self.state = 6024
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6026
                self.match(MySqlParser.CONVERT)
                self.state = 6027
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6028
                self.expression(0)
                self.state = 6029
                self.match(MySqlParser.USING)
                self.state = 6030
                self.charsetName()
                self.state = 6031
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6033
                self.match(MySqlParser.CAST)
                self.state = 6034
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6035
                self.expression(0)
                self.state = 6036
                self.match(MySqlParser.AS)
                self.state = 6037
                self.convertedDataType()
                self.state = 6038
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = MySqlParser.ValuesFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6040
                self.match(MySqlParser.VALUES)
                self.state = 6041
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6042
                self.fullColumnName()
                self.state = 6043
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = MySqlParser.CaseExpressionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6045
                self.match(MySqlParser.CASE)
                self.state = 6046
                self.expression(0)
                self.state = 6048 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6047
                    self.caseFuncAlternative()
                    self.state = 6050 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.WHEN):
                        break

                self.state = 6054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ELSE:
                    self.state = 6052
                    self.match(MySqlParser.ELSE)
                    self.state = 6053
                    localctx.elseArg = self.functionArg()


                self.state = 6056
                self.match(MySqlParser.END)
                pass

            elif la_ == 7:
                localctx = MySqlParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 6058
                self.match(MySqlParser.CASE)
                self.state = 6060 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6059
                    self.caseFuncAlternative()
                    self.state = 6062 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.WHEN):
                        break

                self.state = 6066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ELSE:
                    self.state = 6064
                    self.match(MySqlParser.ELSE)
                    self.state = 6065
                    localctx.elseArg = self.functionArg()


                self.state = 6068
                self.match(MySqlParser.END)
                pass

            elif la_ == 8:
                localctx = MySqlParser.CharFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 6070
                self.match(MySqlParser.CHAR)
                self.state = 6071
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6072
                self.functionArgs()
                self.state = 6075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 6073
                    self.match(MySqlParser.USING)
                    self.state = 6074
                    self.charsetName()


                self.state = 6077
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = MySqlParser.PositionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 6079
                self.match(MySqlParser.POSITION)
                self.state = 6080
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,896,self._ctx)
                if la_ == 1:
                    self.state = 6081
                    localctx.positionString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6082
                    localctx.positionExpression = self.expression(0)
                    pass


                self.state = 6085
                self.match(MySqlParser.IN)
                self.state = 6088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,897,self._ctx)
                if la_ == 1:
                    self.state = 6086
                    localctx.inString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6087
                    localctx.inExpression = self.expression(0)
                    pass


                self.state = 6090
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.SubstrFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 6092
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SUBSTR or _la==MySqlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6093
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6096
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,898,self._ctx)
                if la_ == 1:
                    self.state = 6094
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6095
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6098
                self.match(MySqlParser.FROM)
                self.state = 6101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
                if la_ == 1:
                    self.state = 6099
                    localctx.fromDecimal = self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6100
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 6103
                    self.match(MySqlParser.FOR)
                    self.state = 6106
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,900,self._ctx)
                    if la_ == 1:
                        self.state = 6104
                        localctx.forDecimal = self.decimalLiteral()
                        pass

                    elif la_ == 2:
                        self.state = 6105
                        localctx.forExpression = self.expression(0)
                        pass




                self.state = 6110
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = MySqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 6112
                self.match(MySqlParser.TRIM)
                self.state = 6113
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6114
                localctx.positioinForm = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BOTH or _la==MySqlParser.LEADING or _la==MySqlParser.TRAILING):
                    localctx.positioinForm = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6117
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,902,self._ctx)
                if la_ == 1:
                    self.state = 6115
                    localctx.sourceString = self.stringLiteral()

                elif la_ == 2:
                    self.state = 6116
                    localctx.sourceExpression = self.expression(0)


                self.state = 6119
                self.match(MySqlParser.FROM)
                self.state = 6122
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,903,self._ctx)
                if la_ == 1:
                    self.state = 6120
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6121
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6124
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = MySqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 6126
                self.match(MySqlParser.TRIM)
                self.state = 6127
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6130
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,904,self._ctx)
                if la_ == 1:
                    self.state = 6128
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6129
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6132
                self.match(MySqlParser.FROM)
                self.state = 6135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,905,self._ctx)
                if la_ == 1:
                    self.state = 6133
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6134
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6137
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = MySqlParser.WeightFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 6139
                self.match(MySqlParser.WEIGHT_STRING)
                self.state = 6140
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,906,self._ctx)
                if la_ == 1:
                    self.state = 6141
                    self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6142
                    self.expression(0)
                    pass


                self.state = 6151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 6145
                    self.match(MySqlParser.AS)
                    self.state = 6146
                    localctx.stringFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CHAR or _la==MySqlParser.BINARY):
                        localctx.stringFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6147
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6148
                    self.decimalLiteral()
                    self.state = 6149
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 6154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LEVEL:
                    self.state = 6153
                    self.levelsInWeightString()


                self.state = 6156
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = MySqlParser.ExtractFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6158
                self.match(MySqlParser.EXTRACT)
                self.state = 6159
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6160
                self.intervalType()
                self.state = 6161
                self.match(MySqlParser.FROM)
                self.state = 6164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,909,self._ctx)
                if la_ == 1:
                    self.state = 6162
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6163
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6166
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = MySqlParser.GetFormatFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 6168
                self.match(MySqlParser.GET_FORMAT)
                self.state = 6169
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6170
                localctx.datetimeFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.DATETIME - 202)))) != 0)):
                    localctx.datetimeFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6171
                self.match(MySqlParser.COMMA)
                self.state = 6172
                self.stringLiteral()
                self.state = 6173
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = MySqlParser.JsonValueFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 6175
                self.match(MySqlParser.JSON_VALUE)
                self.state = 6176
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6177
                self.expression(0)
                self.state = 6178
                self.match(MySqlParser.COMMA)
                self.state = 6179
                self.expression(0)
                self.state = 6182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.RETURNING:
                    self.state = 6180
                    self.match(MySqlParser.RETURNING)
                    self.state = 6181
                    self.convertedDataType()


                self.state = 6192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
                if la_ == 1:
                    self.state = 6188
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NULL]:
                        self.state = 6184
                        self.match(MySqlParser.NULL)
                        pass
                    elif token in [MySqlParser.ERROR]:
                        self.state = 6185
                        self.match(MySqlParser.ERROR)
                        pass
                    elif token in [MySqlParser.DEFAULT]:
                        self.state = 6186
                        self.match(MySqlParser.DEFAULT)
                        self.state = 6187
                        self.defaultValue()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6190
                    self.match(MySqlParser.ON)
                    self.state = 6191
                    self.match(MySqlParser.EMPTY)


                self.state = 6202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT or _la==MySqlParser.ERROR or _la==MySqlParser.NULL:
                    self.state = 6198
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NULL]:
                        self.state = 6194
                        self.match(MySqlParser.NULL)
                        pass
                    elif token in [MySqlParser.ERROR]:
                        self.state = 6195
                        self.match(MySqlParser.ERROR)
                        pass
                    elif token in [MySqlParser.DEFAULT]:
                        self.state = 6196
                        self.match(MySqlParser.DEFAULT)
                        self.state = 6197
                        self.defaultValue()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6200
                    self.match(MySqlParser.ON)
                    self.state = 6201
                    self.match(MySqlParser.ERROR)


                self.state = 6204
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseFuncAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # FunctionArgContext
            self.consequent = None # FunctionArgContext

        def WHEN(self):
            return self.getToken(MySqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def functionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionArgContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionArgContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseFuncAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFuncAlternative" ):
                listener.enterCaseFuncAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFuncAlternative" ):
                listener.exitCaseFuncAlternative(self)




    def caseFuncAlternative(self):

        localctx = MySqlParser.CaseFuncAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_caseFuncAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6208
            self.match(MySqlParser.WHEN)
            self.state = 6209
            localctx.condition = self.functionArg()
            self.state = 6210
            self.match(MySqlParser.THEN)
            self.state = 6211
            localctx.consequent = self.functionArg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelsInWeightStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_levelsInWeightString

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LevelWeightRangeContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.lastLevel = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)
        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightRange" ):
                listener.enterLevelWeightRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightRange" ):
                listener.exitLevelWeightRange(self)


    class LevelWeightListContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)
        def levelInWeightListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LevelInWeightListElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LevelInWeightListElementContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightList" ):
                listener.enterLevelWeightList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightList" ):
                listener.exitLevelWeightList(self)



    def levelsInWeightString(self):

        localctx = MySqlParser.LevelsInWeightStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_levelsInWeightString)
        self._la = 0 # Token type
        try:
            self.state = 6227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,917,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.LevelWeightListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6213
                self.match(MySqlParser.LEVEL)
                self.state = 6214
                self.levelInWeightListElement()
                self.state = 6219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 6215
                    self.match(MySqlParser.COMMA)
                    self.state = 6216
                    self.levelInWeightListElement()
                    self.state = 6221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.LevelWeightRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6222
                self.match(MySqlParser.LEVEL)
                self.state = 6223
                localctx.firstLevel = self.decimalLiteral()
                self.state = 6224
                self.match(MySqlParser.MINUS)
                self.state = 6225
                localctx.lastLevel = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelInWeightListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.orderType = None # Token

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def REVERSE(self):
            return self.getToken(MySqlParser.REVERSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_levelInWeightListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelInWeightListElement" ):
                listener.enterLevelInWeightListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelInWeightListElement" ):
                listener.exitLevelInWeightListElement(self)




    def levelInWeightListElement(self):

        localctx = MySqlParser.LevelInWeightListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_levelInWeightListElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6229
            self.decimalLiteral()
            self.state = 6231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ASC or _la==MySqlParser.DESC or _la==MySqlParser.REVERSE:
                self.state = 6230
                localctx.orderType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC or _la==MySqlParser.REVERSE):
                    localctx.orderType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token
            self.separator = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(MySqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(MySqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(MySqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(MySqlParser.SUM, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def BIT_AND(self):
            return self.getToken(MySqlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySqlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySqlParser.BIT_XOR, 0)

        def STD(self):
            return self.getToken(MySqlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySqlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySqlParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(MySqlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySqlParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(MySqlParser.VARIANCE, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySqlParser.GROUP_CONCAT, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.OrderByExpressionContext,i)


        def SEPARATOR(self):
            return self.getToken(MySqlParser.SEPARATOR, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)




    def aggregateWindowedFunction(self):

        localctx = MySqlParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 6289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6233
                _la = self._input.LA(1)
                if not(((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (MySqlParser.AVG - 268)) | (1 << (MySqlParser.MAX - 268)) | (1 << (MySqlParser.MIN - 268)) | (1 << (MySqlParser.SUM - 268)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6234
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,919,self._ctx)
                if la_ == 1:
                    self.state = 6235
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6238
                self.functionArg()
                self.state = 6239
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6241
                self.match(MySqlParser.COUNT)
                self.state = 6242
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
                if la_ == 1:
                    self.state = 6243
                    localctx.starArg = self.match(MySqlParser.STAR)
                    pass

                elif la_ == 2:
                    self.state = 6245
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
                    if la_ == 1:
                        self.state = 6244
                        localctx.aggregator = self.match(MySqlParser.ALL)


                    self.state = 6247
                    self.functionArg()
                    pass


                self.state = 6250
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6251
                self.match(MySqlParser.COUNT)
                self.state = 6252
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6253
                localctx.aggregator = self.match(MySqlParser.DISTINCT)
                self.state = 6254
                self.functionArgs()
                self.state = 6255
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6257
                _la = self._input.LA(1)
                if not(((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & ((1 << (MySqlParser.BIT_AND - 269)) | (1 << (MySqlParser.BIT_OR - 269)) | (1 << (MySqlParser.BIT_XOR - 269)) | (1 << (MySqlParser.STD - 269)) | (1 << (MySqlParser.STDDEV - 269)) | (1 << (MySqlParser.STDDEV_POP - 269)) | (1 << (MySqlParser.STDDEV_SAMP - 269)) | (1 << (MySqlParser.VAR_POP - 269)) | (1 << (MySqlParser.VAR_SAMP - 269)) | (1 << (MySqlParser.VARIANCE - 269)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6258
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
                if la_ == 1:
                    self.state = 6259
                    localctx.aggregator = self.match(MySqlParser.ALL)


                self.state = 6262
                self.functionArg()
                self.state = 6263
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6265
                self.match(MySqlParser.GROUP_CONCAT)
                self.state = 6266
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                if la_ == 1:
                    self.state = 6267
                    localctx.aggregator = self.match(MySqlParser.DISTINCT)


                self.state = 6270
                self.functionArgs()
                self.state = 6281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ORDER:
                    self.state = 6271
                    self.match(MySqlParser.ORDER)
                    self.state = 6272
                    self.match(MySqlParser.BY)
                    self.state = 6273
                    self.orderByExpression()
                    self.state = 6278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 6274
                        self.match(MySqlParser.COMMA)
                        self.state = 6275
                        self.orderByExpression()
                        self.state = 6280
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SEPARATOR:
                    self.state = 6283
                    self.match(MySqlParser.SEPARATOR)
                    self.state = 6284
                    localctx.separator = self.match(MySqlParser.STRING_LITERAL)


                self.state = 6287
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionNameBase(self):
            return self.getTypedRuleContext(MySqlParser.FunctionNameBaseContext,0)


        def ASCII(self):
            return self.getToken(MySqlParser.ASCII, 0)

        def CURDATE(self):
            return self.getToken(MySqlParser.CURDATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(MySqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(MySqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def CURTIME(self):
            return self.getToken(MySqlParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(MySqlParser.DATE_ADD, 0)

        def DATE_SUB(self):
            return self.getToken(MySqlParser.DATE_SUB, 0)

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(MySqlParser.LOCALTIMESTAMP, 0)

        def MID(self):
            return self.getToken(MySqlParser.MID, 0)

        def NOW(self):
            return self.getToken(MySqlParser.NOW, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def SUBSTR(self):
            return self.getToken(MySqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(MySqlParser.SUBSTRING, 0)

        def SYSDATE(self):
            return self.getToken(MySqlParser.SYSDATE, 0)

        def TRIM(self):
            return self.getToken(MySqlParser.TRIM, 0)

        def UTC_DATE(self):
            return self.getToken(MySqlParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(MySqlParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(MySqlParser.UTC_TIMESTAMP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_scalarFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionName" ):
                listener.enterScalarFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionName" ):
                listener.exitScalarFunctionName(self)




    def scalarFunctionName(self):

        localctx = MySqlParser.ScalarFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_scalarFunctionName)
        try:
            self.state = 6314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.YEAR, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.INVISIBLE, MySqlParser.VISIBLE, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.MOD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6291
                self.functionNameBase()
                pass
            elif token in [MySqlParser.ASCII]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6292
                self.match(MySqlParser.ASCII)
                pass
            elif token in [MySqlParser.CURDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6293
                self.match(MySqlParser.CURDATE)
                pass
            elif token in [MySqlParser.CURRENT_DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6294
                self.match(MySqlParser.CURRENT_DATE)
                pass
            elif token in [MySqlParser.CURRENT_TIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6295
                self.match(MySqlParser.CURRENT_TIME)
                pass
            elif token in [MySqlParser.CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6296
                self.match(MySqlParser.CURRENT_TIMESTAMP)
                pass
            elif token in [MySqlParser.CURTIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6297
                self.match(MySqlParser.CURTIME)
                pass
            elif token in [MySqlParser.DATE_ADD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6298
                self.match(MySqlParser.DATE_ADD)
                pass
            elif token in [MySqlParser.DATE_SUB]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6299
                self.match(MySqlParser.DATE_SUB)
                pass
            elif token in [MySqlParser.IF]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6300
                self.match(MySqlParser.IF)
                pass
            elif token in [MySqlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6301
                self.match(MySqlParser.INSERT)
                pass
            elif token in [MySqlParser.LOCALTIME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6302
                self.match(MySqlParser.LOCALTIME)
                pass
            elif token in [MySqlParser.LOCALTIMESTAMP]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6303
                self.match(MySqlParser.LOCALTIMESTAMP)
                pass
            elif token in [MySqlParser.MID]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6304
                self.match(MySqlParser.MID)
                pass
            elif token in [MySqlParser.NOW]:
                self.enterOuterAlt(localctx, 15)
                self.state = 6305
                self.match(MySqlParser.NOW)
                pass
            elif token in [MySqlParser.REPLACE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 6306
                self.match(MySqlParser.REPLACE)
                pass
            elif token in [MySqlParser.SUBSTR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 6307
                self.match(MySqlParser.SUBSTR)
                pass
            elif token in [MySqlParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 18)
                self.state = 6308
                self.match(MySqlParser.SUBSTRING)
                pass
            elif token in [MySqlParser.SYSDATE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 6309
                self.match(MySqlParser.SYSDATE)
                pass
            elif token in [MySqlParser.TRIM]:
                self.enterOuterAlt(localctx, 20)
                self.state = 6310
                self.match(MySqlParser.TRIM)
                pass
            elif token in [MySqlParser.UTC_DATE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 6311
                self.match(MySqlParser.UTC_DATE)
                pass
            elif token in [MySqlParser.UTC_TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 6312
                self.match(MySqlParser.UTC_TIME)
                pass
            elif token in [MySqlParser.UTC_TIMESTAMP]:
                self.enterOuterAlt(localctx, 23)
                self.state = 6313
                self.match(MySqlParser.UTC_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordFunctionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySqlParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_passwordFunctionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionClause" ):
                listener.enterPasswordFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionClause" ):
                listener.exitPasswordFunctionClause(self)




    def passwordFunctionClause(self):

        localctx = MySqlParser.PasswordFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_passwordFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6316
            localctx.functionName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.OLD_PASSWORD or _la==MySqlParser.PASSWORD):
                localctx.functionName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6317
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6318
            self.functionArg()
            self.state = 6319
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)




    def functionArgs(self):

        localctx = MySqlParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,929,self._ctx)
            if la_ == 1:
                self.state = 6321
                self.constant()
                pass

            elif la_ == 2:
                self.state = 6322
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 6323
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 6324
                self.expression(0)
                pass


            self.state = 6336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6327
                self.match(MySqlParser.COMMA)
                self.state = 6332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
                if la_ == 1:
                    self.state = 6328
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 6329
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 6330
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 6331
                    self.expression(0)
                    pass


                self.state = 6338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)




    def functionArg(self):

        localctx = MySqlParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_functionArg)
        try:
            self.state = 6343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6339
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6340
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6341
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6342
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(MySqlParser.IS, 0)
        def TRUE(self):
            return self.getToken(MySqlParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(MySqlParser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(MySqlParser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(MySqlParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 606
        self.enterRecursionRule(localctx, 606, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,934,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6346
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NOT or _la==MySqlParser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6347
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = MySqlParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6348
                self.predicate(0)
                self.state = 6349
                self.match(MySqlParser.IS)
                self.state = 6351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 6350
                    self.match(MySqlParser.NOT)


                self.state = 6353
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FALSE or _la==MySqlParser.TRUE or _la==MySqlParser.UNKNOWN):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = MySqlParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6355
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,935,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MySqlParser.LogicalExpressionContext(self, MySqlParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 6358
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 6359
                    self.logicalOperator()
                    self.state = 6360
                    self.expression(4) 
                self.state = 6366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,935,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SoundsLikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def SOUNDS(self):
            return self.getToken(MySqlParser.SOUNDS, 0)
        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoundsLikePredicate" ):
                listener.enterSoundsLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoundsLikePredicate" ):
                listener.exitSoundsLikePredicate(self)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(MySqlParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)


    class SubqueryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def ANY(self):
            return self.getToken(MySqlParser.ANY, 0)
        def SOME(self):
            return self.getToken(MySqlParser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparisonPredicate" ):
                listener.enterSubqueryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparisonPredicate" ):
                listener.exitSubqueryComparisonPredicate(self)


    class JsonMemberOfPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def MEMBER(self):
            return self.getToken(MySqlParser.MEMBER, 0)
        def OF(self):
            return self.getToken(MySqlParser.OF, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMemberOfPredicate" ):
                listener.enterJsonMemberOfPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMemberOfPredicate" ):
                listener.exitJsonMemberOfPredicate(self)


    class BinaryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparisonPredicate" ):
                listener.enterBinaryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparisonPredicate" ):
                listener.exitBinaryComparisonPredicate(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(MySqlParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(MySqlParser.AND, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(MySqlParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(MySqlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(MySqlParser.ESCAPE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)


    class RegexpPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.regex = None # Token
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def REGEXP(self):
            return self.getToken(MySqlParser.REGEXP, 0)
        def RLIKE(self):
            return self.getToken(MySqlParser.RLIKE, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexpPredicate" ):
                listener.enterRegexpPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexpPredicate" ):
                listener.exitRegexpPredicate(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 608
        self.enterRecursionRule(localctx, 608, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MySqlParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 6370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,936,self._ctx)
            if la_ == 1:
                self.state = 6368
                self.match(MySqlParser.LOCAL_ID)
                self.state = 6369
                self.match(MySqlParser.VAR_ASSIGN)


            self.state = 6372
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 6438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,944,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6436
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
                    if la_ == 1:
                        localctx = MySqlParser.BinaryComparisonPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6374
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 6375
                        self.comparisonOperator()
                        self.state = 6376
                        localctx.right = self.predicate(9)
                        pass

                    elif la_ == 2:
                        localctx = MySqlParser.BetweenPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6378
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 6380
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 6379
                            self.match(MySqlParser.NOT)


                        self.state = 6382
                        self.match(MySqlParser.BETWEEN)
                        self.state = 6383
                        self.predicate(0)
                        self.state = 6384
                        self.match(MySqlParser.AND)
                        self.state = 6385
                        self.predicate(7)
                        pass

                    elif la_ == 3:
                        localctx = MySqlParser.SoundsLikePredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6387
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 6388
                        self.match(MySqlParser.SOUNDS)
                        self.state = 6389
                        self.match(MySqlParser.LIKE)
                        self.state = 6390
                        self.predicate(6)
                        pass

                    elif la_ == 4:
                        localctx = MySqlParser.RegexpPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6391
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6393
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 6392
                            self.match(MySqlParser.NOT)


                        self.state = 6395
                        localctx.regex = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.REGEXP or _la==MySqlParser.RLIKE):
                            localctx.regex = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6396
                        self.predicate(4)
                        pass

                    elif la_ == 5:
                        localctx = MySqlParser.InPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6397
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 6399
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 6398
                            self.match(MySqlParser.NOT)


                        self.state = 6401
                        self.match(MySqlParser.IN)
                        self.state = 6402
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 6405
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,940,self._ctx)
                        if la_ == 1:
                            self.state = 6403
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 6404
                            self.expressions()
                            pass


                        self.state = 6407
                        self.match(MySqlParser.RR_BRACKET)
                        pass

                    elif la_ == 6:
                        localctx = MySqlParser.IsNullPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6409
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 6410
                        self.match(MySqlParser.IS)
                        self.state = 6411
                        self.nullNotnull()
                        pass

                    elif la_ == 7:
                        localctx = MySqlParser.SubqueryComparisonPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6412
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 6413
                        self.comparisonOperator()
                        self.state = 6414
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.ANY or _la==MySqlParser.SOME):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6415
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 6416
                        self.selectStatement()
                        self.state = 6417
                        self.match(MySqlParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = MySqlParser.LikePredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6419
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 6421
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 6420
                            self.match(MySqlParser.NOT)


                        self.state = 6423
                        self.match(MySqlParser.LIKE)
                        self.state = 6424
                        self.predicate(0)
                        self.state = 6427
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
                        if la_ == 1:
                            self.state = 6425
                            self.match(MySqlParser.ESCAPE)
                            self.state = 6426
                            self.match(MySqlParser.STRING_LITERAL)


                        pass

                    elif la_ == 9:
                        localctx = MySqlParser.JsonMemberOfPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6429
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6430
                        self.match(MySqlParser.MEMBER)
                        self.state = 6431
                        self.match(MySqlParser.OF)
                        self.state = 6432
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 6433
                        self.predicate(0)
                        self.state = 6434
                        self.match(MySqlParser.RR_BRACKET)
                        pass

             
                self.state = 6440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,944,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(MySqlParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)


    class CollateExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateExpressionAtom" ):
                listener.enterCollateExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateExpressionAtom" ):
                listener.exitCollateExpressionAtom(self)


    class MysqlVariableExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariableExpressionAtom" ):
                listener.enterMysqlVariableExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariableExpressionAtom" ):
                listener.exitMysqlVariableExpressionAtom(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedRowExpressionAtom" ):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedRowExpressionAtom" ):
                listener.exitNestedRowExpressionAtom(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(MySqlParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)


    class ExistsExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpressionAtom" ):
                listener.enterExistsExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpressionAtom" ):
                listener.exitExistsExpressionAtom(self)


    class IntervalExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpressionAtom" ):
                listener.enterIntervalExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpressionAtom" ):
                listener.exitIntervalExpressionAtom(self)


    class JsonExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def jsonOperator(self):
            return self.getTypedRuleContext(MySqlParser.JsonOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExpressionAtom" ):
                listener.enterJsonExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExpressionAtom" ):
                listener.exitJsonExpressionAtom(self)


    class SubqueryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpressionAtom" ):
                listener.enterSubqueryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpressionAtom" ):
                listener.exitSubqueryExpressionAtom(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(MySqlParser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 610
        self.enterRecursionRule(localctx, 610, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,947,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6442
                self.constant()
                pass

            elif la_ == 2:
                localctx = MySqlParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6443
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = MySqlParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6444
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = MySqlParser.MysqlVariableExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6445
                self.mysqlVariable()
                pass

            elif la_ == 5:
                localctx = MySqlParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6446
                self.unaryOperator()
                self.state = 6447
                self.expressionAtom(10)
                pass

            elif la_ == 6:
                localctx = MySqlParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6449
                self.match(MySqlParser.BINARY)
                self.state = 6450
                self.expressionAtom(9)
                pass

            elif la_ == 7:
                localctx = MySqlParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6451
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6452
                self.expression(0)
                self.state = 6457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 6453
                    self.match(MySqlParser.COMMA)
                    self.state = 6454
                    self.expression(0)
                    self.state = 6459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6460
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = MySqlParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6462
                self.match(MySqlParser.ROW)
                self.state = 6463
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6464
                self.expression(0)
                self.state = 6467 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6465
                    self.match(MySqlParser.COMMA)
                    self.state = 6466
                    self.expression(0)
                    self.state = 6469 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.COMMA):
                        break

                self.state = 6471
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = MySqlParser.ExistsExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6473
                self.match(MySqlParser.EXISTS)
                self.state = 6474
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6475
                self.selectStatement()
                self.state = 6476
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.SubqueryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6478
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6479
                self.selectStatement()
                self.state = 6480
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = MySqlParser.IntervalExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6482
                self.match(MySqlParser.INTERVAL)
                self.state = 6483
                self.expression(0)
                self.state = 6484
                self.intervalType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,949,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6503
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,948,self._ctx)
                    if la_ == 1:
                        localctx = MySqlParser.BitExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6488
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6489
                        self.bitOperator()
                        self.state = 6490
                        localctx.right = self.expressionAtom(4)
                        pass

                    elif la_ == 2:
                        localctx = MySqlParser.MathExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6492
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6493
                        self.mathOperator()
                        self.state = 6494
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 3:
                        localctx = MySqlParser.JsonExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6496
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6497
                        self.jsonOperator()
                        self.state = 6498
                        localctx.right = self.expressionAtom(2)
                        pass

                    elif la_ == 4:
                        localctx = MySqlParser.CollateExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6500
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 6501
                        self.match(MySqlParser.COLLATE)
                        self.state = 6502
                        self.collationName()
                        pass

             
                self.state = 6507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,949,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(MySqlParser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = MySqlParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6508
            _la = self._input.LA(1)
            if not(_la==MySqlParser.NOT or ((((_la - 1051)) & ~0x3f) == 0 and ((1 << (_la - 1051)) & ((1 << (MySqlParser.PLUS - 1051)) | (1 << (MySqlParser.MINUS - 1051)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 1051)) | (1 << (MySqlParser.BIT_NOT_OP - 1051)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(MySqlParser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySqlParser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = MySqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_comparisonOperator)
        try:
            self.state = 6524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,950,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6510
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6511
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6512
                self.match(MySqlParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6513
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 6514
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6515
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 6516
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6517
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 6518
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6519
                self.match(MySqlParser.EXCLAMATION_SYMBOL)
                self.state = 6520
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6521
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 6522
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 6523
                self.match(MySqlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def BIT_AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BIT_AND_OP)
            else:
                return self.getToken(MySqlParser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(MySqlParser.XOR, 0)

        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def BIT_OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BIT_OR_OP)
            else:
                return self.getToken(MySqlParser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = MySqlParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_logicalOperator)
        try:
            self.state = 6533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6526
                self.match(MySqlParser.AND)
                pass
            elif token in [MySqlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6527
                self.match(MySqlParser.BIT_AND_OP)
                self.state = 6528
                self.match(MySqlParser.BIT_AND_OP)
                pass
            elif token in [MySqlParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6529
                self.match(MySqlParser.XOR)
                pass
            elif token in [MySqlParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6530
                self.match(MySqlParser.OR)
                pass
            elif token in [MySqlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6531
                self.match(MySqlParser.BIT_OR_OP)
                self.state = 6532
                self.match(MySqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LESS_SYMBOL)
            else:
                return self.getToken(MySqlParser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GREATER_SYMBOL)
            else:
                return self.getToken(MySqlParser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(MySqlParser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(MySqlParser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(MySqlParser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)




    def bitOperator(self):

        localctx = MySqlParser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_bitOperator)
        try:
            self.state = 6542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6535
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 6536
                self.match(MySqlParser.LESS_SYMBOL)
                pass
            elif token in [MySqlParser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6537
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 6538
                self.match(MySqlParser.GREATER_SYMBOL)
                pass
            elif token in [MySqlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6539
                self.match(MySqlParser.BIT_AND_OP)
                pass
            elif token in [MySqlParser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6540
                self.match(MySqlParser.BIT_XOR_OP)
                pass
            elif token in [MySqlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6541
                self.match(MySqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(MySqlParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(MySqlParser.MODULE, 0)

        def DIV(self):
            return self.getToken(MySqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(MySqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def MINUSMINUS(self):
            return self.getToken(MySqlParser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)




    def mathOperator(self):

        localctx = MySqlParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6544
            _la = self._input.LA(1)
            if not(((((_la - 1048)) & ~0x3f) == 0 and ((1 << (_la - 1048)) & ((1 << (MySqlParser.STAR - 1048)) | (1 << (MySqlParser.DIVIDE - 1048)) | (1 << (MySqlParser.MODULE - 1048)) | (1 << (MySqlParser.PLUS - 1048)) | (1 << (MySqlParser.MINUSMINUS - 1048)) | (1 << (MySqlParser.MINUS - 1048)) | (1 << (MySqlParser.DIV - 1048)) | (1 << (MySqlParser.MOD - 1048)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GREATER_SYMBOL)
            else:
                return self.getToken(MySqlParser.GREATER_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_jsonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOperator" ):
                listener.enterJsonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOperator" ):
                listener.exitJsonOperator(self)




    def jsonOperator(self):

        localctx = MySqlParser.JsonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_jsonOperator)
        try:
            self.state = 6551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,953,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6546
                self.match(MySqlParser.MINUS)
                self.state = 6547
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6548
                self.match(MySqlParser.MINUS)
                self.state = 6549
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 6550
                self.match(MySqlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(MySqlParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(MySqlParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(MySqlParser.BIG5, 0)

        def CP1250(self):
            return self.getToken(MySqlParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(MySqlParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(MySqlParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(MySqlParser.CP1257, 0)

        def CP850(self):
            return self.getToken(MySqlParser.CP850, 0)

        def CP852(self):
            return self.getToken(MySqlParser.CP852, 0)

        def CP866(self):
            return self.getToken(MySqlParser.CP866, 0)

        def CP932(self):
            return self.getToken(MySqlParser.CP932, 0)

        def DEC8(self):
            return self.getToken(MySqlParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(MySqlParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(MySqlParser.EUCKR, 0)

        def GB2312(self):
            return self.getToken(MySqlParser.GB2312, 0)

        def GBK(self):
            return self.getToken(MySqlParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(MySqlParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(MySqlParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(MySqlParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(MySqlParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(MySqlParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(MySqlParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(MySqlParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(MySqlParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(MySqlParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(MySqlParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(MySqlParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(MySqlParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(MySqlParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(MySqlParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(MySqlParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(MySqlParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(MySqlParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(MySqlParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(MySqlParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(MySqlParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(MySqlParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(MySqlParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(MySqlParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(MySqlParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charsetNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetNameBase" ):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetNameBase" ):
                listener.exitCharsetNameBase(self)




    def charsetNameBase(self):

        localctx = MySqlParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6553
            _la = self._input.LA(1)
            if not(((((_la - 682)) & ~0x3f) == 0 and ((1 << (_la - 682)) & ((1 << (MySqlParser.ARMSCII8 - 682)) | (1 << (MySqlParser.ASCII - 682)) | (1 << (MySqlParser.BIG5 - 682)) | (1 << (MySqlParser.CP1250 - 682)) | (1 << (MySqlParser.CP1251 - 682)) | (1 << (MySqlParser.CP1256 - 682)) | (1 << (MySqlParser.CP1257 - 682)) | (1 << (MySqlParser.CP850 - 682)) | (1 << (MySqlParser.CP852 - 682)) | (1 << (MySqlParser.CP866 - 682)) | (1 << (MySqlParser.CP932 - 682)) | (1 << (MySqlParser.DEC8 - 682)) | (1 << (MySqlParser.EUCJPMS - 682)) | (1 << (MySqlParser.EUCKR - 682)) | (1 << (MySqlParser.GB2312 - 682)) | (1 << (MySqlParser.GBK - 682)) | (1 << (MySqlParser.GEOSTD8 - 682)) | (1 << (MySqlParser.GREEK - 682)) | (1 << (MySqlParser.HEBREW - 682)) | (1 << (MySqlParser.HP8 - 682)) | (1 << (MySqlParser.KEYBCS2 - 682)) | (1 << (MySqlParser.KOI8R - 682)) | (1 << (MySqlParser.KOI8U - 682)) | (1 << (MySqlParser.LATIN1 - 682)) | (1 << (MySqlParser.LATIN2 - 682)) | (1 << (MySqlParser.LATIN5 - 682)) | (1 << (MySqlParser.LATIN7 - 682)) | (1 << (MySqlParser.MACCE - 682)) | (1 << (MySqlParser.MACROMAN - 682)) | (1 << (MySqlParser.SJIS - 682)) | (1 << (MySqlParser.SWE7 - 682)) | (1 << (MySqlParser.TIS620 - 682)) | (1 << (MySqlParser.UCS2 - 682)) | (1 << (MySqlParser.UJIS - 682)) | (1 << (MySqlParser.UTF16 - 682)) | (1 << (MySqlParser.UTF16LE - 682)) | (1 << (MySqlParser.UTF32 - 682)) | (1 << (MySqlParser.UTF8 - 682)) | (1 << (MySqlParser.UTF8MB3 - 682)) | (1 << (MySqlParser.UTF8MB4 - 682)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(MySqlParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(MySqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(MySqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(MySqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionLevelBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevelBase" ):
                listener.enterTransactionLevelBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevelBase" ):
                listener.exitTransactionLevelBase(self)




    def transactionLevelBase(self):

        localctx = MySqlParser.TransactionLevelBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_transactionLevelBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6555
            _la = self._input.LA(1)
            if not(((((_la - 734)) & ~0x3f) == 0 and ((1 << (_la - 734)) & ((1 << (MySqlParser.REPEATABLE - 734)) | (1 << (MySqlParser.COMMITTED - 734)) | (1 << (MySqlParser.UNCOMMITTED - 734)) | (1 << (MySqlParser.SERIALIZABLE - 734)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegesBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def ROUTINE(self):
            return self.getToken(MySqlParser.ROUTINE, 0)

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(MySqlParser.FILE, 0)

        def PROCESS(self):
            return self.getToken(MySqlParser.PROCESS, 0)

        def RELOAD(self):
            return self.getToken(MySqlParser.RELOAD, 0)

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(MySqlParser.SUPER, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privilegesBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegesBase" ):
                listener.enterPrivilegesBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegesBase" ):
                listener.exitPrivilegesBase(self)




    def privilegesBase(self):

        localctx = MySqlParser.PrivilegesBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_privilegesBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6557
            _la = self._input.LA(1)
            if not(((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & ((1 << (MySqlParser.TABLES - 641)) | (1 << (MySqlParser.ROUTINE - 641)) | (1 << (MySqlParser.EXECUTE - 641)) | (1 << (MySqlParser.FILE - 641)) | (1 << (MySqlParser.PROCESS - 641)) | (1 << (MySqlParser.RELOAD - 641)) | (1 << (MySqlParser.SHUTDOWN - 641)) | (1 << (MySqlParser.SUPER - 641)) | (1 << (MySqlParser.PRIVILEGES - 641)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUARTER(self):
            return self.getToken(MySqlParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(MySqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(MySqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(MySqlParser.MINUTE, 0)

        def WEEK(self):
            return self.getToken(MySqlParser.WEEK, 0)

        def SECOND(self):
            return self.getToken(MySqlParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(MySqlParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_intervalTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeBase" ):
                listener.enterIntervalTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeBase" ):
                listener.exitIntervalTypeBase(self)




    def intervalTypeBase(self):

        localctx = MySqlParser.IntervalTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_intervalTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6559
            _la = self._input.LA(1)
            if not(((((_la - 633)) & ~0x3f) == 0 and ((1 << (_la - 633)) & ((1 << (MySqlParser.QUARTER - 633)) | (1 << (MySqlParser.MONTH - 633)) | (1 << (MySqlParser.DAY - 633)) | (1 << (MySqlParser.HOUR - 633)) | (1 << (MySqlParser.MINUTE - 633)) | (1 << (MySqlParser.WEEK - 633)) | (1 << (MySqlParser.SECOND - 633)) | (1 << (MySqlParser.MICROSECOND - 633)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(MySqlParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(MySqlParser.TEXT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)




    def dataTypeBase(self):

        localctx = MySqlParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6561
            _la = self._input.LA(1)
            if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.DATETIME - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.TEXT - 202)) | (1 << (MySqlParser.ENUM - 202)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordsCanBeIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(MySqlParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(MySqlParser.ACTION, 0)

        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def ANY(self):
            return self.getToken(MySqlParser.ANY, 0)

        def AT(self):
            return self.getToken(MySqlParser.AT, 0)

        def AUDIT_ADMIN(self):
            return self.getToken(MySqlParser.AUDIT_ADMIN, 0)

        def AUTHORS(self):
            return self.getToken(MySqlParser.AUTHORS, 0)

        def AUTOCOMMIT(self):
            return self.getToken(MySqlParser.AUTOCOMMIT, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)

        def AVG(self):
            return self.getToken(MySqlParser.AVG, 0)

        def AVG_ROW_LENGTH(self):
            return self.getToken(MySqlParser.AVG_ROW_LENGTH, 0)

        def BACKUP_ADMIN(self):
            return self.getToken(MySqlParser.BACKUP_ADMIN, 0)

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)

        def BINLOG_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ADMIN, 0)

        def BINLOG_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0)

        def BIT(self):
            return self.getToken(MySqlParser.BIT, 0)

        def BIT_AND(self):
            return self.getToken(MySqlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySqlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySqlParser.BIT_XOR, 0)

        def BLOCK(self):
            return self.getToken(MySqlParser.BLOCK, 0)

        def BOOL(self):
            return self.getToken(MySqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(MySqlParser.BOOLEAN, 0)

        def BTREE(self):
            return self.getToken(MySqlParser.BTREE, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def CHANGED(self):
            return self.getToken(MySqlParser.CHANGED, 0)

        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)

        def PAGE_CHECKSUM(self):
            return self.getToken(MySqlParser.PAGE_CHECKSUM, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def CIPHER(self):
            return self.getToken(MySqlParser.CIPHER, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def CLIENT(self):
            return self.getToken(MySqlParser.CLIENT, 0)

        def CLONE_ADMIN(self):
            return self.getToken(MySqlParser.CLONE_ADMIN, 0)

        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)

        def COALESCE(self):
            return self.getToken(MySqlParser.COALESCE, 0)

        def CODE(self):
            return self.getToken(MySqlParser.CODE, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def COLUMN_FORMAT(self):
            return self.getToken(MySqlParser.COLUMN_FORMAT, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(MySqlParser.COMPACT, 0)

        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def COMPRESSED(self):
            return self.getToken(MySqlParser.COMPRESSED, 0)

        def COMPRESSION(self):
            return self.getToken(MySqlParser.COMPRESSION, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def CONNECT(self):
            return self.getToken(MySqlParser.CONNECT, 0)

        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)

        def CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.CONNECTION_ADMIN, 0)

        def CONSISTENT(self):
            return self.getToken(MySqlParser.CONSISTENT, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONTAINS(self):
            return self.getToken(MySqlParser.CONTAINS, 0)

        def CONTEXT(self):
            return self.getToken(MySqlParser.CONTEXT, 0)

        def CONTRIBUTORS(self):
            return self.getToken(MySqlParser.CONTRIBUTORS, 0)

        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def CPU(self):
            return self.getToken(MySqlParser.CPU, 0)

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def DEALLOCATE(self):
            return self.getToken(MySqlParser.DEALLOCATE, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(MySqlParser.DEFAULT_AUTH, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def DELAY_KEY_WRITE(self):
            return self.getToken(MySqlParser.DELAY_KEY_WRITE, 0)

        def DES_KEY_FILE(self):
            return self.getToken(MySqlParser.DES_KEY_FILE, 0)

        def DIAGNOSTICS(self):
            return self.getToken(MySqlParser.DIAGNOSTICS, 0)

        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)

        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def DUMPFILE(self):
            return self.getToken(MySqlParser.DUMPFILE, 0)

        def DUPLICATE(self):
            return self.getToken(MySqlParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)

        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)

        def ENCRYPTION_KEY_ADMIN(self):
            return self.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def ENDS(self):
            return self.getToken(MySqlParser.ENDS, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def ENGINES(self):
            return self.getToken(MySqlParser.ENGINES, 0)

        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)

        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(MySqlParser.ESCAPE, 0)

        def EVEN(self):
            return self.getToken(MySqlParser.EVEN, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)

        def EVERY(self):
            return self.getToken(MySqlParser.EVERY, 0)

        def EXCHANGE(self):
            return self.getToken(MySqlParser.EXCHANGE, 0)

        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(MySqlParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(MySqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def EXTENT_SIZE(self):
            return self.getToken(MySqlParser.EXTENT_SIZE, 0)

        def FAST(self):
            return self.getToken(MySqlParser.FAST, 0)

        def FAULTS(self):
            return self.getToken(MySqlParser.FAULTS, 0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.FILE_BLOCK_SIZE, 0)

        def FILTER(self):
            return self.getToken(MySqlParser.FILTER, 0)

        def FIREWALL_ADMIN(self):
            return self.getToken(MySqlParser.FIREWALL_ADMIN, 0)

        def FIREWALL_USER(self):
            return self.getToken(MySqlParser.FIREWALL_USER, 0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)

        def FLUSH(self):
            return self.getToken(MySqlParser.FLUSH, 0)

        def FOLLOWS(self):
            return self.getToken(MySqlParser.FOLLOWS, 0)

        def FOUND(self):
            return self.getToken(MySqlParser.FOUND, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def GENERAL(self):
            return self.getToken(MySqlParser.GENERAL, 0)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(MySqlParser.GRANTS, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySqlParser.GROUP_CONCAT, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def GROUP_REPLICATION_ADMIN(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0)

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)

        def HELP(self):
            return self.getToken(MySqlParser.HELP, 0)

        def HOST(self):
            return self.getToken(MySqlParser.HOST, 0)

        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)

        def INDEXES(self):
            return self.getToken(MySqlParser.INDEXES, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def INNODB_REDO_LOG_ARCHIVE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0)

        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)

        def INSERT_METHOD(self):
            return self.getToken(MySqlParser.INSERT_METHOD, 0)

        def INSTALL(self):
            return self.getToken(MySqlParser.INSTALL, 0)

        def INSTANCE(self):
            return self.getToken(MySqlParser.INSTANCE, 0)

        def INTERNAL(self):
            return self.getToken(MySqlParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def IO(self):
            return self.getToken(MySqlParser.IO, 0)

        def IO_THREAD(self):
            return self.getToken(MySqlParser.IO_THREAD, 0)

        def IPC(self):
            return self.getToken(MySqlParser.IPC, 0)

        def ISOLATION(self):
            return self.getToken(MySqlParser.ISOLATION, 0)

        def ISSUER(self):
            return self.getToken(MySqlParser.ISSUER, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)

        def LANGUAGE(self):
            return self.getToken(MySqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)

        def LEAVES(self):
            return self.getToken(MySqlParser.LEAVES, 0)

        def LESS(self):
            return self.getToken(MySqlParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(MySqlParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def MASTER_AUTO_POSITION(self):
            return self.getToken(MySqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_DELAY(self):
            return self.getToken(MySqlParser.MASTER_DELAY, 0)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)

        def MASTER_HOST(self):
            return self.getToken(MySqlParser.MASTER_HOST, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(MySqlParser.MASTER_PASSWORD, 0)

        def MASTER_PORT(self):
            return self.getToken(MySqlParser.MASTER_PORT, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(MySqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_SSL(self):
            return self.getToken(MySqlParser.MASTER_SSL, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(MySqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(MySqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(MySqlParser.MASTER_SSL_KEY, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(MySqlParser.MASTER_TLS_VERSION, 0)

        def MASTER_USER(self):
            return self.getToken(MySqlParser.MASTER_USER, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0)

        def MAX(self):
            return self.getToken(MySqlParser.MAX, 0)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)

        def MAX_SIZE(self):
            return self.getToken(MySqlParser.MAX_SIZE, 0)

        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0)

        def MEDIUM(self):
            return self.getToken(MySqlParser.MEDIUM, 0)

        def MEMBER(self):
            return self.getToken(MySqlParser.MEMBER, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MID(self):
            return self.getToken(MySqlParser.MID, 0)

        def MIGRATE(self):
            return self.getToken(MySqlParser.MIGRATE, 0)

        def MIN(self):
            return self.getToken(MySqlParser.MIN, 0)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)

        def MODE(self):
            return self.getToken(MySqlParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(MySqlParser.MODIFY, 0)

        def MUTEX(self):
            return self.getToken(MySqlParser.MUTEX, 0)

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def NAME(self):
            return self.getToken(MySqlParser.NAME, 0)

        def NAMES(self):
            return self.getToken(MySqlParser.NAMES, 0)

        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def NDB_STORED_USER(self):
            return self.getToken(MySqlParser.NDB_STORED_USER, 0)

        def NEVER(self):
            return self.getToken(MySqlParser.NEVER, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def NUMBER(self):
            return self.getToken(MySqlParser.NUMBER, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def ODBC(self):
            return self.getToken(MySqlParser.ODBC, 0)

        def OFFSET(self):
            return self.getToken(MySqlParser.OFFSET, 0)

        def OF(self):
            return self.getToken(MySqlParser.OF, 0)

        def OJ(self):
            return self.getToken(MySqlParser.OJ, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySqlParser.OLD_PASSWORD, 0)

        def ONE(self):
            return self.getToken(MySqlParser.ONE, 0)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)

        def OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.OPTIMIZER_COSTS, 0)

        def OPTIONAL(self):
            return self.getToken(MySqlParser.OPTIONAL, 0)

        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def OWNER(self):
            return self.getToken(MySqlParser.OWNER, 0)

        def PACK_KEYS(self):
            return self.getToken(MySqlParser.PACK_KEYS, 0)

        def PAGE(self):
            return self.getToken(MySqlParser.PAGE, 0)

        def PARSER(self):
            return self.getToken(MySqlParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(MySqlParser.PARTIAL, 0)

        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def PERSIST_RO_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0)

        def PHASE(self):
            return self.getToken(MySqlParser.PHASE, 0)

        def PLUGINS(self):
            return self.getToken(MySqlParser.PLUGINS, 0)

        def PLUGIN_DIR(self):
            return self.getToken(MySqlParser.PLUGIN_DIR, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def PORT(self):
            return self.getToken(MySqlParser.PORT, 0)

        def PRECEDES(self):
            return self.getToken(MySqlParser.PRECEDES, 0)

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def PREV(self):
            return self.getToken(MySqlParser.PREV, 0)

        def PROCESSLIST(self):
            return self.getToken(MySqlParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(MySqlParser.PROFILE, 0)

        def PROFILES(self):
            return self.getToken(MySqlParser.PROFILES, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def REBUILD(self):
            return self.getToken(MySqlParser.REBUILD, 0)

        def RECOVER(self):
            return self.getToken(MySqlParser.RECOVER, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.REDO_BUFFER_SIZE, 0)

        def REDUNDANT(self):
            return self.getToken(MySqlParser.REDUNDANT, 0)

        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)

        def RELAYLOG(self):
            return self.getToken(MySqlParser.RELAYLOG, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)

        def REMOVE(self):
            return self.getToken(MySqlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(MySqlParser.REORGANIZE, 0)

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)

        def REPLICATE_DO_DB(self):
            return self.getToken(MySqlParser.REPLICATE_DO_DB, 0)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def REPLICATION_APPLIER(self):
            return self.getToken(MySqlParser.REPLICATION_APPLIER, 0)

        def REPLICATION_SLAVE_ADMIN(self):
            return self.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0)

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def RESOURCE_GROUP_ADMIN(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0)

        def RESOURCE_GROUP_USER(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_USER, 0)

        def RESUME(self):
            return self.getToken(MySqlParser.RESUME, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(MySqlParser.RETURNED_SQLSTATE, 0)

        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def ROLE_ADMIN(self):
            return self.getToken(MySqlParser.ROLE_ADMIN, 0)

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(MySqlParser.ROLLUP, 0)

        def ROTATE(self):
            return self.getToken(MySqlParser.ROTATE, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def ROW_FORMAT(self):
            return self.getToken(MySqlParser.ROW_FORMAT, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SET_USER_ID(self):
            return self.getToken(MySqlParser.SET_USER_ID, 0)

        def SHARE(self):
            return self.getToken(MySqlParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)

        def SHOW_ROUTINE(self):
            return self.getToken(MySqlParser.SHOW_ROUTINE, 0)

        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)

        def SIMPLE(self):
            return self.getToken(MySqlParser.SIMPLE, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def SLOW(self):
            return self.getToken(MySqlParser.SLOW, 0)

        def SNAPSHOT(self):
            return self.getToken(MySqlParser.SNAPSHOT, 0)

        def SOCKET(self):
            return self.getToken(MySqlParser.SOCKET, 0)

        def SOME(self):
            return self.getToken(MySqlParser.SOME, 0)

        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def SOUNDS(self):
            return self.getToken(MySqlParser.SOUNDS, 0)

        def SOURCE(self):
            return self.getToken(MySqlParser.SOURCE, 0)

        def SQL_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_AFTER_GTIDS, 0)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(MySqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(MySqlParser.SQL_NO_CACHE, 0)

        def SQL_THREAD(self):
            return self.getToken(MySqlParser.SQL_THREAD, 0)

        def STACKED(self):
            return self.getToken(MySqlParser.STACKED, 0)

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def STARTS(self):
            return self.getToken(MySqlParser.STARTS, 0)

        def STATS_AUTO_RECALC(self):
            return self.getToken(MySqlParser.STATS_AUTO_RECALC, 0)

        def STATS_PERSISTENT(self):
            return self.getToken(MySqlParser.STATS_PERSISTENT, 0)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def STD(self):
            return self.getToken(MySqlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySqlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySqlParser.STDDEV_SAMP, 0)

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(MySqlParser.STRING, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def SUBJECT(self):
            return self.getToken(MySqlParser.SUBJECT, 0)

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def SUBPARTITIONS(self):
            return self.getToken(MySqlParser.SUBPARTITIONS, 0)

        def SUM(self):
            return self.getToken(MySqlParser.SUM, 0)

        def SUSPEND(self):
            return self.getToken(MySqlParser.SUSPEND, 0)

        def SWAPS(self):
            return self.getToken(MySqlParser.SWAPS, 0)

        def SWITCHES(self):
            return self.getToken(MySqlParser.SWITCHES, 0)

        def SYSTEM_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def TABLE_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def THAN(self):
            return self.getToken(MySqlParser.THAN, 0)

        def TRADITIONAL(self):
            return self.getToken(MySqlParser.TRADITIONAL, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def TRANSACTIONAL(self):
            return self.getToken(MySqlParser.TRANSACTIONAL, 0)

        def TRIGGERS(self):
            return self.getToken(MySqlParser.TRIGGERS, 0)

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0)

        def UNINSTALL(self):
            return self.getToken(MySqlParser.UNINSTALL, 0)

        def UNKNOWN(self):
            return self.getToken(MySqlParser.UNKNOWN, 0)

        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def USE_FRM(self):
            return self.getToken(MySqlParser.USE_FRM, 0)

        def USER_RESOURCES(self):
            return self.getToken(MySqlParser.USER_RESOURCES, 0)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def VAR_POP(self):
            return self.getToken(MySqlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySqlParser.VAR_SAMP, 0)

        def VARIABLES(self):
            return self.getToken(MySqlParser.VARIABLES, 0)

        def VARIANCE(self):
            return self.getToken(MySqlParser.VARIANCE, 0)

        def VERSION_TOKEN_ADMIN(self):
            return self.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)

        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(MySqlParser.WRAPPER, 0)

        def X509(self):
            return self.getToken(MySqlParser.X509, 0)

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def XA_RECOVER_ADMIN(self):
            return self.getToken(MySqlParser.XA_RECOVER_ADMIN, 0)

        def XML(self):
            return self.getToken(MySqlParser.XML, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_keywordsCanBeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordsCanBeId" ):
                listener.enterKeywordsCanBeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordsCanBeId" ):
                listener.exitKeywordsCanBeId(self)




    def keywordsCanBeId(self):

        localctx = MySqlParser.KeywordsCanBeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_keywordsCanBeId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6563
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & ((1 << (MySqlParser.CURRENT - 34)) | (1 << (MySqlParser.DIAGNOSTICS - 34)) | (1 << (MySqlParser.GROUP - 34)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (MySqlParser.NUMBER - 108)) | (1 << (MySqlParser.ORDER - 108)) | (1 << (MySqlParser.STACKED - 108)))) != 0) or ((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & ((1 << (MySqlParser.SERIAL - 224)) | (1 << (MySqlParser.AVG - 224)) | (1 << (MySqlParser.BIT_AND - 224)) | (1 << (MySqlParser.BIT_OR - 224)) | (1 << (MySqlParser.BIT_XOR - 224)) | (1 << (MySqlParser.COUNT - 224)) | (1 << (MySqlParser.GROUP_CONCAT - 224)) | (1 << (MySqlParser.MAX - 224)) | (1 << (MySqlParser.MIN - 224)) | (1 << (MySqlParser.STD - 224)) | (1 << (MySqlParser.STDDEV - 224)) | (1 << (MySqlParser.STDDEV_POP - 224)) | (1 << (MySqlParser.STDDEV_SAMP - 224)) | (1 << (MySqlParser.SUM - 224)) | (1 << (MySqlParser.VAR_POP - 224)) | (1 << (MySqlParser.VAR_SAMP - 224)) | (1 << (MySqlParser.VARIANCE - 224)))) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & ((1 << (MySqlParser.ACCOUNT - 303)) | (1 << (MySqlParser.ACTION - 303)) | (1 << (MySqlParser.AFTER - 303)) | (1 << (MySqlParser.AGGREGATE - 303)) | (1 << (MySqlParser.ALGORITHM - 303)) | (1 << (MySqlParser.ANY - 303)) | (1 << (MySqlParser.AT - 303)) | (1 << (MySqlParser.AUTHORS - 303)) | (1 << (MySqlParser.AUTOCOMMIT - 303)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 303)) | (1 << (MySqlParser.AUTO_INCREMENT - 303)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 303)) | (1 << (MySqlParser.BEGIN - 303)) | (1 << (MySqlParser.BINLOG - 303)) | (1 << (MySqlParser.BIT - 303)) | (1 << (MySqlParser.BLOCK - 303)) | (1 << (MySqlParser.BOOL - 303)) | (1 << (MySqlParser.BOOLEAN - 303)) | (1 << (MySqlParser.BTREE - 303)) | (1 << (MySqlParser.CACHE - 303)) | (1 << (MySqlParser.CASCADED - 303)) | (1 << (MySqlParser.CHAIN - 303)) | (1 << (MySqlParser.CHANGED - 303)) | (1 << (MySqlParser.CHANNEL - 303)) | (1 << (MySqlParser.CHECKSUM - 303)) | (1 << (MySqlParser.PAGE_CHECKSUM - 303)) | (1 << (MySqlParser.CIPHER - 303)) | (1 << (MySqlParser.CLASS_ORIGIN - 303)) | (1 << (MySqlParser.CLIENT - 303)) | (1 << (MySqlParser.CLOSE - 303)) | (1 << (MySqlParser.COALESCE - 303)) | (1 << (MySqlParser.CODE - 303)) | (1 << (MySqlParser.COLUMNS - 303)) | (1 << (MySqlParser.COLUMN_FORMAT - 303)) | (1 << (MySqlParser.COLUMN_NAME - 303)) | (1 << (MySqlParser.COMMENT - 303)) | (1 << (MySqlParser.COMMIT - 303)) | (1 << (MySqlParser.COMPACT - 303)) | (1 << (MySqlParser.COMPLETION - 303)) | (1 << (MySqlParser.COMPRESSED - 303)) | (1 << (MySqlParser.COMPRESSION - 303)) | (1 << (MySqlParser.CONCURRENT - 303)) | (1 << (MySqlParser.CONNECT - 303)) | (1 << (MySqlParser.CONNECTION - 303)) | (1 << (MySqlParser.CONSISTENT - 303)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 303)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 303)) | (1 << (MySqlParser.CONSTRAINT_NAME - 303)) | (1 << (MySqlParser.CONTAINS - 303)) | (1 << (MySqlParser.CONTEXT - 303)) | (1 << (MySqlParser.CONTRIBUTORS - 303)) | (1 << (MySqlParser.COPY - 303)) | (1 << (MySqlParser.CPU - 303)) | (1 << (MySqlParser.CURSOR_NAME - 303)) | (1 << (MySqlParser.DATA - 303)) | (1 << (MySqlParser.DATAFILE - 303)) | (1 << (MySqlParser.DEALLOCATE - 303)) | (1 << (MySqlParser.DEFAULT_AUTH - 303)) | (1 << (MySqlParser.DEFINER - 303)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 303)) | (1 << (MySqlParser.DES_KEY_FILE - 303)) | (1 << (MySqlParser.DIRECTORY - 303)) | (1 << (MySqlParser.DISABLE - 303)) | (1 << (MySqlParser.DISCARD - 303)))) != 0) or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (MySqlParser.DISK - 367)) | (1 << (MySqlParser.DO - 367)) | (1 << (MySqlParser.DUMPFILE - 367)) | (1 << (MySqlParser.DUPLICATE - 367)) | (1 << (MySqlParser.DYNAMIC - 367)) | (1 << (MySqlParser.ENABLE - 367)) | (1 << (MySqlParser.ENCRYPTION - 367)) | (1 << (MySqlParser.END - 367)) | (1 << (MySqlParser.ENDS - 367)) | (1 << (MySqlParser.ENGINE - 367)) | (1 << (MySqlParser.ENGINES - 367)) | (1 << (MySqlParser.ERROR - 367)) | (1 << (MySqlParser.ERRORS - 367)) | (1 << (MySqlParser.ESCAPE - 367)) | (1 << (MySqlParser.EVEN - 367)) | (1 << (MySqlParser.EVENT - 367)) | (1 << (MySqlParser.EVENTS - 367)) | (1 << (MySqlParser.EVERY - 367)) | (1 << (MySqlParser.EXCHANGE - 367)) | (1 << (MySqlParser.EXCLUSIVE - 367)) | (1 << (MySqlParser.EXPIRE - 367)) | (1 << (MySqlParser.EXPORT - 367)) | (1 << (MySqlParser.EXTENDED - 367)) | (1 << (MySqlParser.EXTENT_SIZE - 367)) | (1 << (MySqlParser.FAST - 367)) | (1 << (MySqlParser.FAULTS - 367)) | (1 << (MySqlParser.FIELDS - 367)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 367)) | (1 << (MySqlParser.FILTER - 367)) | (1 << (MySqlParser.FIRST - 367)) | (1 << (MySqlParser.FIXED - 367)) | (1 << (MySqlParser.FLUSH - 367)) | (1 << (MySqlParser.FOLLOWS - 367)) | (1 << (MySqlParser.FOUND - 367)) | (1 << (MySqlParser.FULL - 367)) | (1 << (MySqlParser.FUNCTION - 367)) | (1 << (MySqlParser.GENERAL - 367)) | (1 << (MySqlParser.GLOBAL - 367)) | (1 << (MySqlParser.GRANTS - 367)) | (1 << (MySqlParser.GROUP_REPLICATION - 367)) | (1 << (MySqlParser.HANDLER - 367)) | (1 << (MySqlParser.HASH - 367)) | (1 << (MySqlParser.HELP - 367)) | (1 << (MySqlParser.HOST - 367)) | (1 << (MySqlParser.HOSTS - 367)) | (1 << (MySqlParser.IDENTIFIED - 367)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 367)) | (1 << (MySqlParser.IMPORT - 367)) | (1 << (MySqlParser.INDEXES - 367)) | (1 << (MySqlParser.INITIAL_SIZE - 367)) | (1 << (MySqlParser.INPLACE - 367)) | (1 << (MySqlParser.INSERT_METHOD - 367)) | (1 << (MySqlParser.INSTALL - 367)) | (1 << (MySqlParser.INSTANCE - 367)) | (1 << (MySqlParser.INVOKER - 367)) | (1 << (MySqlParser.IO - 367)) | (1 << (MySqlParser.IO_THREAD - 367)) | (1 << (MySqlParser.IPC - 367)) | (1 << (MySqlParser.ISOLATION - 367)) | (1 << (MySqlParser.ISSUER - 367)) | (1 << (MySqlParser.JSON - 367)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 367)) | (1 << (MySqlParser.LANGUAGE - 367)))) != 0) or ((((_la - 431)) & ~0x3f) == 0 and ((1 << (_la - 431)) & ((1 << (MySqlParser.LAST - 431)) | (1 << (MySqlParser.LEAVES - 431)) | (1 << (MySqlParser.LESS - 431)) | (1 << (MySqlParser.LEVEL - 431)) | (1 << (MySqlParser.LIST - 431)) | (1 << (MySqlParser.LOCAL - 431)) | (1 << (MySqlParser.LOGFILE - 431)) | (1 << (MySqlParser.LOGS - 431)) | (1 << (MySqlParser.MASTER - 431)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 431)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 431)) | (1 << (MySqlParser.MASTER_DELAY - 431)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 431)) | (1 << (MySqlParser.MASTER_HOST - 431)) | (1 << (MySqlParser.MASTER_LOG_FILE - 431)) | (1 << (MySqlParser.MASTER_LOG_POS - 431)) | (1 << (MySqlParser.MASTER_PASSWORD - 431)) | (1 << (MySqlParser.MASTER_PORT - 431)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 431)) | (1 << (MySqlParser.MASTER_SSL - 431)) | (1 << (MySqlParser.MASTER_SSL_CA - 431)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 431)) | (1 << (MySqlParser.MASTER_SSL_CERT - 431)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 431)) | (1 << (MySqlParser.MASTER_SSL_CRL - 431)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 431)) | (1 << (MySqlParser.MASTER_SSL_KEY - 431)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 431)) | (1 << (MySqlParser.MASTER_USER - 431)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 431)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 431)) | (1 << (MySqlParser.MAX_ROWS - 431)) | (1 << (MySqlParser.MAX_SIZE - 431)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 431)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 431)) | (1 << (MySqlParser.MEDIUM - 431)) | (1 << (MySqlParser.MEMBER - 431)) | (1 << (MySqlParser.MERGE - 431)) | (1 << (MySqlParser.MESSAGE_TEXT - 431)) | (1 << (MySqlParser.MID - 431)) | (1 << (MySqlParser.MIGRATE - 431)) | (1 << (MySqlParser.MIN_ROWS - 431)) | (1 << (MySqlParser.MODE - 431)) | (1 << (MySqlParser.MODIFY - 431)) | (1 << (MySqlParser.MUTEX - 431)) | (1 << (MySqlParser.MYSQL - 431)) | (1 << (MySqlParser.MYSQL_ERRNO - 431)) | (1 << (MySqlParser.NAME - 431)) | (1 << (MySqlParser.NAMES - 431)) | (1 << (MySqlParser.NCHAR - 431)) | (1 << (MySqlParser.NEVER - 431)) | (1 << (MySqlParser.NEXT - 431)) | (1 << (MySqlParser.NO - 431)) | (1 << (MySqlParser.NODEGROUP - 431)) | (1 << (MySqlParser.NONE - 431)) | (1 << (MySqlParser.ODBC - 431)) | (1 << (MySqlParser.OFFLINE - 431)) | (1 << (MySqlParser.OFFSET - 431)) | (1 << (MySqlParser.OF - 431)) | (1 << (MySqlParser.OJ - 431)) | (1 << (MySqlParser.OLD_PASSWORD - 431)) | (1 << (MySqlParser.ONE - 431)) | (1 << (MySqlParser.ONLINE - 431)) | (1 << (MySqlParser.ONLY - 431)))) != 0) or ((((_la - 495)) & ~0x3f) == 0 and ((1 << (_la - 495)) & ((1 << (MySqlParser.OPEN - 495)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 495)) | (1 << (MySqlParser.OPTIONS - 495)) | (1 << (MySqlParser.OWNER - 495)) | (1 << (MySqlParser.PACK_KEYS - 495)) | (1 << (MySqlParser.PAGE - 495)) | (1 << (MySqlParser.PARSER - 495)) | (1 << (MySqlParser.PARTIAL - 495)) | (1 << (MySqlParser.PARTITIONING - 495)) | (1 << (MySqlParser.PARTITIONS - 495)) | (1 << (MySqlParser.PASSWORD - 495)) | (1 << (MySqlParser.PHASE - 495)) | (1 << (MySqlParser.PLUGIN - 495)) | (1 << (MySqlParser.PLUGIN_DIR - 495)) | (1 << (MySqlParser.PLUGINS - 495)) | (1 << (MySqlParser.PORT - 495)) | (1 << (MySqlParser.PRECEDES - 495)) | (1 << (MySqlParser.PREPARE - 495)) | (1 << (MySqlParser.PRESERVE - 495)) | (1 << (MySqlParser.PREV - 495)) | (1 << (MySqlParser.PROCESSLIST - 495)) | (1 << (MySqlParser.PROFILE - 495)) | (1 << (MySqlParser.PROFILES - 495)) | (1 << (MySqlParser.PROXY - 495)) | (1 << (MySqlParser.QUERY - 495)) | (1 << (MySqlParser.QUICK - 495)) | (1 << (MySqlParser.REBUILD - 495)) | (1 << (MySqlParser.RECOVER - 495)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 495)) | (1 << (MySqlParser.REDUNDANT - 495)) | (1 << (MySqlParser.RELAY - 495)) | (1 << (MySqlParser.RELAY_LOG_FILE - 495)) | (1 << (MySqlParser.RELAY_LOG_POS - 495)) | (1 << (MySqlParser.RELAYLOG - 495)) | (1 << (MySqlParser.REMOVE - 495)) | (1 << (MySqlParser.REORGANIZE - 495)) | (1 << (MySqlParser.REPAIR - 495)) | (1 << (MySqlParser.REPLICATE_DO_DB - 495)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 495)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 495)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 495)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 495)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 495)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 495)) | (1 << (MySqlParser.REPLICATION - 495)) | (1 << (MySqlParser.RESET - 495)) | (1 << (MySqlParser.RESUME - 495)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 495)) | (1 << (MySqlParser.RETURNS - 495)) | (1 << (MySqlParser.ROLE - 495)) | (1 << (MySqlParser.ROLLBACK - 495)) | (1 << (MySqlParser.ROLLUP - 495)) | (1 << (MySqlParser.ROTATE - 495)) | (1 << (MySqlParser.ROW - 495)) | (1 << (MySqlParser.ROWS - 495)) | (1 << (MySqlParser.ROW_FORMAT - 495)) | (1 << (MySqlParser.SAVEPOINT - 495)) | (1 << (MySqlParser.SCHEDULE - 495)) | (1 << (MySqlParser.SECURITY - 495)) | (1 << (MySqlParser.SERVER - 495)) | (1 << (MySqlParser.SESSION - 495)) | (1 << (MySqlParser.SHARE - 495)) | (1 << (MySqlParser.SHARED - 495)))) != 0) or ((((_la - 559)) & ~0x3f) == 0 and ((1 << (_la - 559)) & ((1 << (MySqlParser.SIGNED - 559)) | (1 << (MySqlParser.SIMPLE - 559)) | (1 << (MySqlParser.SLAVE - 559)) | (1 << (MySqlParser.SLOW - 559)) | (1 << (MySqlParser.SNAPSHOT - 559)) | (1 << (MySqlParser.SOCKET - 559)) | (1 << (MySqlParser.SOME - 559)) | (1 << (MySqlParser.SONAME - 559)) | (1 << (MySqlParser.SOUNDS - 559)) | (1 << (MySqlParser.SOURCE - 559)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 559)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 559)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 559)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 559)) | (1 << (MySqlParser.SQL_CACHE - 559)) | (1 << (MySqlParser.SQL_NO_CACHE - 559)) | (1 << (MySqlParser.SQL_THREAD - 559)) | (1 << (MySqlParser.START - 559)) | (1 << (MySqlParser.STARTS - 559)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 559)) | (1 << (MySqlParser.STATS_PERSISTENT - 559)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 559)) | (1 << (MySqlParser.STATUS - 559)) | (1 << (MySqlParser.STOP - 559)) | (1 << (MySqlParser.STORAGE - 559)) | (1 << (MySqlParser.STRING - 559)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 559)) | (1 << (MySqlParser.SUBJECT - 559)) | (1 << (MySqlParser.SUBPARTITION - 559)) | (1 << (MySqlParser.SUBPARTITIONS - 559)) | (1 << (MySqlParser.SUSPEND - 559)) | (1 << (MySqlParser.SWAPS - 559)) | (1 << (MySqlParser.SWITCHES - 559)) | (1 << (MySqlParser.TABLE_NAME - 559)) | (1 << (MySqlParser.TABLESPACE - 559)) | (1 << (MySqlParser.TEMPORARY - 559)) | (1 << (MySqlParser.TEMPTABLE - 559)) | (1 << (MySqlParser.THAN - 559)) | (1 << (MySqlParser.TRADITIONAL - 559)) | (1 << (MySqlParser.TRANSACTION - 559)) | (1 << (MySqlParser.TRANSACTIONAL - 559)) | (1 << (MySqlParser.TRIGGERS - 559)) | (1 << (MySqlParser.TRUNCATE - 559)) | (1 << (MySqlParser.UNDEFINED - 559)) | (1 << (MySqlParser.UNDOFILE - 559)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 559)) | (1 << (MySqlParser.UNINSTALL - 559)) | (1 << (MySqlParser.UNKNOWN - 559)) | (1 << (MySqlParser.UNTIL - 559)) | (1 << (MySqlParser.UPGRADE - 559)) | (1 << (MySqlParser.USER - 559)) | (1 << (MySqlParser.USE_FRM - 559)) | (1 << (MySqlParser.USER_RESOURCES - 559)) | (1 << (MySqlParser.VALIDATION - 559)) | (1 << (MySqlParser.VALUE - 559)) | (1 << (MySqlParser.VARIABLES - 559)) | (1 << (MySqlParser.VIEW - 559)) | (1 << (MySqlParser.WAIT - 559)) | (1 << (MySqlParser.WARNINGS - 559)) | (1 << (MySqlParser.WITHOUT - 559)))) != 0) or ((((_la - 623)) & ~0x3f) == 0 and ((1 << (_la - 623)) & ((1 << (MySqlParser.WORK - 623)) | (1 << (MySqlParser.WRAPPER - 623)) | (1 << (MySqlParser.X509 - 623)) | (1 << (MySqlParser.XA - 623)) | (1 << (MySqlParser.XML - 623)) | (1 << (MySqlParser.INTERNAL - 623)) | (1 << (MySqlParser.AUDIT_ADMIN - 623)) | (1 << (MySqlParser.BACKUP_ADMIN - 623)) | (1 << (MySqlParser.BINLOG_ADMIN - 623)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 623)) | (1 << (MySqlParser.CLONE_ADMIN - 623)) | (1 << (MySqlParser.CONNECTION_ADMIN - 623)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 623)) | (1 << (MySqlParser.FIREWALL_ADMIN - 623)) | (1 << (MySqlParser.FIREWALL_USER - 623)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 623)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 623)) | (1 << (MySqlParser.NDB_STORED_USER - 623)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 623)) | (1 << (MySqlParser.REPLICATION_APPLIER - 623)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 623)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 623)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 623)) | (1 << (MySqlParser.ROLE_ADMIN - 623)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 623)) | (1 << (MySqlParser.SET_USER_ID - 623)) | (1 << (MySqlParser.SHOW_ROUTINE - 623)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 623)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 623)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 623)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 623)))) != 0) or _la==MySqlParser.MEMORY or _la==MySqlParser.CATALOG_NAME or _la==MySqlParser.SCHEMA_NAME or _la==MySqlParser.OPTIONAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(MySqlParser.ABS, 0)

        def ACOS(self):
            return self.getToken(MySqlParser.ACOS, 0)

        def ADDDATE(self):
            return self.getToken(MySqlParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(MySqlParser.ADDTIME, 0)

        def AES_DECRYPT(self):
            return self.getToken(MySqlParser.AES_DECRYPT, 0)

        def AES_ENCRYPT(self):
            return self.getToken(MySqlParser.AES_ENCRYPT, 0)

        def AREA(self):
            return self.getToken(MySqlParser.AREA, 0)

        def ASBINARY(self):
            return self.getToken(MySqlParser.ASBINARY, 0)

        def ASIN(self):
            return self.getToken(MySqlParser.ASIN, 0)

        def ASTEXT(self):
            return self.getToken(MySqlParser.ASTEXT, 0)

        def ASWKB(self):
            return self.getToken(MySqlParser.ASWKB, 0)

        def ASWKT(self):
            return self.getToken(MySqlParser.ASWKT, 0)

        def ASYMMETRIC_DECRYPT(self):
            return self.getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0)

        def ASYMMETRIC_DERIVE(self):
            return self.getToken(MySqlParser.ASYMMETRIC_DERIVE, 0)

        def ASYMMETRIC_ENCRYPT(self):
            return self.getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0)

        def ASYMMETRIC_SIGN(self):
            return self.getToken(MySqlParser.ASYMMETRIC_SIGN, 0)

        def ASYMMETRIC_VERIFY(self):
            return self.getToken(MySqlParser.ASYMMETRIC_VERIFY, 0)

        def ATAN(self):
            return self.getToken(MySqlParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(MySqlParser.ATAN2, 0)

        def BENCHMARK(self):
            return self.getToken(MySqlParser.BENCHMARK, 0)

        def BIN(self):
            return self.getToken(MySqlParser.BIN, 0)

        def BIT_COUNT(self):
            return self.getToken(MySqlParser.BIT_COUNT, 0)

        def BIT_LENGTH(self):
            return self.getToken(MySqlParser.BIT_LENGTH, 0)

        def BUFFER(self):
            return self.getToken(MySqlParser.BUFFER, 0)

        def CEIL(self):
            return self.getToken(MySqlParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(MySqlParser.CEILING, 0)

        def CENTROID(self):
            return self.getToken(MySqlParser.CENTROID, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(MySqlParser.CHARACTER_LENGTH, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def CHAR_LENGTH(self):
            return self.getToken(MySqlParser.CHAR_LENGTH, 0)

        def COERCIBILITY(self):
            return self.getToken(MySqlParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(MySqlParser.COLLATION, 0)

        def COMPRESS(self):
            return self.getToken(MySqlParser.COMPRESS, 0)

        def CONCAT(self):
            return self.getToken(MySqlParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(MySqlParser.CONCAT_WS, 0)

        def CONNECTION_ID(self):
            return self.getToken(MySqlParser.CONNECTION_ID, 0)

        def CONV(self):
            return self.getToken(MySqlParser.CONV, 0)

        def CONVERT_TZ(self):
            return self.getToken(MySqlParser.CONVERT_TZ, 0)

        def COS(self):
            return self.getToken(MySqlParser.COS, 0)

        def COT(self):
            return self.getToken(MySqlParser.COT, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def CRC32(self):
            return self.getToken(MySqlParser.CRC32, 0)

        def CREATE_ASYMMETRIC_PRIV_KEY(self):
            return self.getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0)

        def CREATE_ASYMMETRIC_PUB_KEY(self):
            return self.getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0)

        def CREATE_DH_PARAMETERS(self):
            return self.getToken(MySqlParser.CREATE_DH_PARAMETERS, 0)

        def CREATE_DIGEST(self):
            return self.getToken(MySqlParser.CREATE_DIGEST, 0)

        def CROSSES(self):
            return self.getToken(MySqlParser.CROSSES, 0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def DATEDIFF(self):
            return self.getToken(MySqlParser.DATEDIFF, 0)

        def DATE_FORMAT(self):
            return self.getToken(MySqlParser.DATE_FORMAT, 0)

        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def DAYNAME(self):
            return self.getToken(MySqlParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(MySqlParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(MySqlParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(MySqlParser.DAYOFYEAR, 0)

        def DECODE(self):
            return self.getToken(MySqlParser.DECODE, 0)

        def DEGREES(self):
            return self.getToken(MySqlParser.DEGREES, 0)

        def DES_DECRYPT(self):
            return self.getToken(MySqlParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(MySqlParser.DES_ENCRYPT, 0)

        def DIMENSION(self):
            return self.getToken(MySqlParser.DIMENSION, 0)

        def DISJOINT(self):
            return self.getToken(MySqlParser.DISJOINT, 0)

        def ELT(self):
            return self.getToken(MySqlParser.ELT, 0)

        def ENCODE(self):
            return self.getToken(MySqlParser.ENCODE, 0)

        def ENCRYPT(self):
            return self.getToken(MySqlParser.ENCRYPT, 0)

        def ENDPOINT(self):
            return self.getToken(MySqlParser.ENDPOINT, 0)

        def ENVELOPE(self):
            return self.getToken(MySqlParser.ENVELOPE, 0)

        def EQUALS(self):
            return self.getToken(MySqlParser.EQUALS, 0)

        def EXP(self):
            return self.getToken(MySqlParser.EXP, 0)

        def EXPORT_SET(self):
            return self.getToken(MySqlParser.EXPORT_SET, 0)

        def EXTERIORRING(self):
            return self.getToken(MySqlParser.EXTERIORRING, 0)

        def EXTRACTVALUE(self):
            return self.getToken(MySqlParser.EXTRACTVALUE, 0)

        def FIELD(self):
            return self.getToken(MySqlParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(MySqlParser.FIND_IN_SET, 0)

        def FLOOR(self):
            return self.getToken(MySqlParser.FLOOR, 0)

        def FORMAT(self):
            return self.getToken(MySqlParser.FORMAT, 0)

        def FOUND_ROWS(self):
            return self.getToken(MySqlParser.FOUND_ROWS, 0)

        def FROM_BASE64(self):
            return self.getToken(MySqlParser.FROM_BASE64, 0)

        def FROM_DAYS(self):
            return self.getToken(MySqlParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(MySqlParser.FROM_UNIXTIME, 0)

        def GEOMCOLLFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMCOLLFROMTEXT, 0)

        def GEOMCOLLFROMWKB(self):
            return self.getToken(MySqlParser.GEOMCOLLFROMWKB, 0)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTION, 0)

        def GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0)

        def GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0)

        def GEOMETRYFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMETRYFROMTEXT, 0)

        def GEOMETRYFROMWKB(self):
            return self.getToken(MySqlParser.GEOMETRYFROMWKB, 0)

        def GEOMETRYN(self):
            return self.getToken(MySqlParser.GEOMETRYN, 0)

        def GEOMETRYTYPE(self):
            return self.getToken(MySqlParser.GEOMETRYTYPE, 0)

        def GEOMFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMFROMTEXT, 0)

        def GEOMFROMWKB(self):
            return self.getToken(MySqlParser.GEOMFROMWKB, 0)

        def GET_FORMAT(self):
            return self.getToken(MySqlParser.GET_FORMAT, 0)

        def GET_LOCK(self):
            return self.getToken(MySqlParser.GET_LOCK, 0)

        def GLENGTH(self):
            return self.getToken(MySqlParser.GLENGTH, 0)

        def GREATEST(self):
            return self.getToken(MySqlParser.GREATEST, 0)

        def GTID_SUBSET(self):
            return self.getToken(MySqlParser.GTID_SUBSET, 0)

        def GTID_SUBTRACT(self):
            return self.getToken(MySqlParser.GTID_SUBTRACT, 0)

        def HEX(self):
            return self.getToken(MySqlParser.HEX, 0)

        def HOUR(self):
            return self.getToken(MySqlParser.HOUR, 0)

        def IFNULL(self):
            return self.getToken(MySqlParser.IFNULL, 0)

        def INET6_ATON(self):
            return self.getToken(MySqlParser.INET6_ATON, 0)

        def INET6_NTOA(self):
            return self.getToken(MySqlParser.INET6_NTOA, 0)

        def INET_ATON(self):
            return self.getToken(MySqlParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(MySqlParser.INET_NTOA, 0)

        def INSTR(self):
            return self.getToken(MySqlParser.INSTR, 0)

        def INTERIORRINGN(self):
            return self.getToken(MySqlParser.INTERIORRINGN, 0)

        def INTERSECTS(self):
            return self.getToken(MySqlParser.INTERSECTS, 0)

        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def ISCLOSED(self):
            return self.getToken(MySqlParser.ISCLOSED, 0)

        def ISEMPTY(self):
            return self.getToken(MySqlParser.ISEMPTY, 0)

        def ISNULL(self):
            return self.getToken(MySqlParser.ISNULL, 0)

        def ISSIMPLE(self):
            return self.getToken(MySqlParser.ISSIMPLE, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(MySqlParser.IS_FREE_LOCK, 0)

        def IS_IPV4(self):
            return self.getToken(MySqlParser.IS_IPV4, 0)

        def IS_IPV4_COMPAT(self):
            return self.getToken(MySqlParser.IS_IPV4_COMPAT, 0)

        def IS_IPV4_MAPPED(self):
            return self.getToken(MySqlParser.IS_IPV4_MAPPED, 0)

        def IS_IPV6(self):
            return self.getToken(MySqlParser.IS_IPV6, 0)

        def IS_USED_LOCK(self):
            return self.getToken(MySqlParser.IS_USED_LOCK, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(MySqlParser.LAST_INSERT_ID, 0)

        def LCASE(self):
            return self.getToken(MySqlParser.LCASE, 0)

        def LEAST(self):
            return self.getToken(MySqlParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(MySqlParser.LENGTH, 0)

        def LINEFROMTEXT(self):
            return self.getToken(MySqlParser.LINEFROMTEXT, 0)

        def LINEFROMWKB(self):
            return self.getToken(MySqlParser.LINEFROMWKB, 0)

        def LINESTRING(self):
            return self.getToken(MySqlParser.LINESTRING, 0)

        def LINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.LINESTRINGFROMTEXT, 0)

        def LINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.LINESTRINGFROMWKB, 0)

        def LN(self):
            return self.getToken(MySqlParser.LN, 0)

        def LOAD_FILE(self):
            return self.getToken(MySqlParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(MySqlParser.LOCATE, 0)

        def LOG(self):
            return self.getToken(MySqlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(MySqlParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(MySqlParser.LOG2, 0)

        def LOWER(self):
            return self.getToken(MySqlParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(MySqlParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(MySqlParser.LTRIM, 0)

        def MAKEDATE(self):
            return self.getToken(MySqlParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(MySqlParser.MAKETIME, 0)

        def MAKE_SET(self):
            return self.getToken(MySqlParser.MAKE_SET, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(MySqlParser.MASTER_POS_WAIT, 0)

        def MBRCONTAINS(self):
            return self.getToken(MySqlParser.MBRCONTAINS, 0)

        def MBRDISJOINT(self):
            return self.getToken(MySqlParser.MBRDISJOINT, 0)

        def MBREQUAL(self):
            return self.getToken(MySqlParser.MBREQUAL, 0)

        def MBRINTERSECTS(self):
            return self.getToken(MySqlParser.MBRINTERSECTS, 0)

        def MBROVERLAPS(self):
            return self.getToken(MySqlParser.MBROVERLAPS, 0)

        def MBRTOUCHES(self):
            return self.getToken(MySqlParser.MBRTOUCHES, 0)

        def MBRWITHIN(self):
            return self.getToken(MySqlParser.MBRWITHIN, 0)

        def MD5(self):
            return self.getToken(MySqlParser.MD5, 0)

        def MICROSECOND(self):
            return self.getToken(MySqlParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(MySqlParser.MINUTE, 0)

        def MLINEFROMTEXT(self):
            return self.getToken(MySqlParser.MLINEFROMTEXT, 0)

        def MLINEFROMWKB(self):
            return self.getToken(MySqlParser.MLINEFROMWKB, 0)

        def MOD(self):
            return self.getToken(MySqlParser.MOD, 0)

        def MONTH(self):
            return self.getToken(MySqlParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(MySqlParser.MONTHNAME, 0)

        def MPOINTFROMTEXT(self):
            return self.getToken(MySqlParser.MPOINTFROMTEXT, 0)

        def MPOINTFROMWKB(self):
            return self.getToken(MySqlParser.MPOINTFROMWKB, 0)

        def MPOLYFROMTEXT(self):
            return self.getToken(MySqlParser.MPOLYFROMTEXT, 0)

        def MPOLYFROMWKB(self):
            return self.getToken(MySqlParser.MPOLYFROMWKB, 0)

        def MULTILINESTRING(self):
            return self.getToken(MySqlParser.MULTILINESTRING, 0)

        def MULTILINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0)

        def MULTILINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0)

        def MULTIPOINT(self):
            return self.getToken(MySqlParser.MULTIPOINT, 0)

        def MULTIPOINTFROMTEXT(self):
            return self.getToken(MySqlParser.MULTIPOINTFROMTEXT, 0)

        def MULTIPOINTFROMWKB(self):
            return self.getToken(MySqlParser.MULTIPOINTFROMWKB, 0)

        def MULTIPOLYGON(self):
            return self.getToken(MySqlParser.MULTIPOLYGON, 0)

        def MULTIPOLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0)

        def MULTIPOLYGONFROMWKB(self):
            return self.getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0)

        def NAME_CONST(self):
            return self.getToken(MySqlParser.NAME_CONST, 0)

        def NULLIF(self):
            return self.getToken(MySqlParser.NULLIF, 0)

        def NUMGEOMETRIES(self):
            return self.getToken(MySqlParser.NUMGEOMETRIES, 0)

        def NUMINTERIORRINGS(self):
            return self.getToken(MySqlParser.NUMINTERIORRINGS, 0)

        def NUMPOINTS(self):
            return self.getToken(MySqlParser.NUMPOINTS, 0)

        def OCT(self):
            return self.getToken(MySqlParser.OCT, 0)

        def OCTET_LENGTH(self):
            return self.getToken(MySqlParser.OCTET_LENGTH, 0)

        def ORD(self):
            return self.getToken(MySqlParser.ORD, 0)

        def OVERLAPS(self):
            return self.getToken(MySqlParser.OVERLAPS, 0)

        def PERIOD_ADD(self):
            return self.getToken(MySqlParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(MySqlParser.PERIOD_DIFF, 0)

        def PI(self):
            return self.getToken(MySqlParser.PI, 0)

        def POINT(self):
            return self.getToken(MySqlParser.POINT, 0)

        def POINTFROMTEXT(self):
            return self.getToken(MySqlParser.POINTFROMTEXT, 0)

        def POINTFROMWKB(self):
            return self.getToken(MySqlParser.POINTFROMWKB, 0)

        def POINTN(self):
            return self.getToken(MySqlParser.POINTN, 0)

        def POLYFROMTEXT(self):
            return self.getToken(MySqlParser.POLYFROMTEXT, 0)

        def POLYFROMWKB(self):
            return self.getToken(MySqlParser.POLYFROMWKB, 0)

        def POLYGON(self):
            return self.getToken(MySqlParser.POLYGON, 0)

        def POLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.POLYGONFROMTEXT, 0)

        def POLYGONFROMWKB(self):
            return self.getToken(MySqlParser.POLYGONFROMWKB, 0)

        def POSITION(self):
            return self.getToken(MySqlParser.POSITION, 0)

        def POW(self):
            return self.getToken(MySqlParser.POW, 0)

        def POWER(self):
            return self.getToken(MySqlParser.POWER, 0)

        def QUARTER(self):
            return self.getToken(MySqlParser.QUARTER, 0)

        def QUOTE(self):
            return self.getToken(MySqlParser.QUOTE, 0)

        def RADIANS(self):
            return self.getToken(MySqlParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(MySqlParser.RAND, 0)

        def RANDOM_BYTES(self):
            return self.getToken(MySqlParser.RANDOM_BYTES, 0)

        def RELEASE_LOCK(self):
            return self.getToken(MySqlParser.RELEASE_LOCK, 0)

        def REVERSE(self):
            return self.getToken(MySqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)

        def ROUND(self):
            return self.getToken(MySqlParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(MySqlParser.ROW_COUNT, 0)

        def RPAD(self):
            return self.getToken(MySqlParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(MySqlParser.RTRIM, 0)

        def SECOND(self):
            return self.getToken(MySqlParser.SECOND, 0)

        def SEC_TO_TIME(self):
            return self.getToken(MySqlParser.SEC_TO_TIME, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def SESSION_USER(self):
            return self.getToken(MySqlParser.SESSION_USER, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SHA(self):
            return self.getToken(MySqlParser.SHA, 0)

        def SHA1(self):
            return self.getToken(MySqlParser.SHA1, 0)

        def SHA2(self):
            return self.getToken(MySqlParser.SHA2, 0)

        def SIGN(self):
            return self.getToken(MySqlParser.SIGN, 0)

        def SIN(self):
            return self.getToken(MySqlParser.SIN, 0)

        def SLEEP(self):
            return self.getToken(MySqlParser.SLEEP, 0)

        def SOUNDEX(self):
            return self.getToken(MySqlParser.SOUNDEX, 0)

        def SQL_THREAD_WAIT_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0)

        def SQRT(self):
            return self.getToken(MySqlParser.SQRT, 0)

        def SRID(self):
            return self.getToken(MySqlParser.SRID, 0)

        def STARTPOINT(self):
            return self.getToken(MySqlParser.STARTPOINT, 0)

        def STRCMP(self):
            return self.getToken(MySqlParser.STRCMP, 0)

        def STR_TO_DATE(self):
            return self.getToken(MySqlParser.STR_TO_DATE, 0)

        def ST_AREA(self):
            return self.getToken(MySqlParser.ST_AREA, 0)

        def ST_ASBINARY(self):
            return self.getToken(MySqlParser.ST_ASBINARY, 0)

        def ST_ASTEXT(self):
            return self.getToken(MySqlParser.ST_ASTEXT, 0)

        def ST_ASWKB(self):
            return self.getToken(MySqlParser.ST_ASWKB, 0)

        def ST_ASWKT(self):
            return self.getToken(MySqlParser.ST_ASWKT, 0)

        def ST_BUFFER(self):
            return self.getToken(MySqlParser.ST_BUFFER, 0)

        def ST_CENTROID(self):
            return self.getToken(MySqlParser.ST_CENTROID, 0)

        def ST_CONTAINS(self):
            return self.getToken(MySqlParser.ST_CONTAINS, 0)

        def ST_CROSSES(self):
            return self.getToken(MySqlParser.ST_CROSSES, 0)

        def ST_DIFFERENCE(self):
            return self.getToken(MySqlParser.ST_DIFFERENCE, 0)

        def ST_DIMENSION(self):
            return self.getToken(MySqlParser.ST_DIMENSION, 0)

        def ST_DISJOINT(self):
            return self.getToken(MySqlParser.ST_DISJOINT, 0)

        def ST_DISTANCE(self):
            return self.getToken(MySqlParser.ST_DISTANCE, 0)

        def ST_ENDPOINT(self):
            return self.getToken(MySqlParser.ST_ENDPOINT, 0)

        def ST_ENVELOPE(self):
            return self.getToken(MySqlParser.ST_ENVELOPE, 0)

        def ST_EQUALS(self):
            return self.getToken(MySqlParser.ST_EQUALS, 0)

        def ST_EXTERIORRING(self):
            return self.getToken(MySqlParser.ST_EXTERIORRING, 0)

        def ST_GEOMCOLLFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0)

        def ST_GEOMCOLLFROMTXT(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0)

        def ST_GEOMCOLLFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0)

        def ST_GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0)

        def ST_GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0)

        def ST_GEOMETRYFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0)

        def ST_GEOMETRYFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0)

        def ST_GEOMETRYN(self):
            return self.getToken(MySqlParser.ST_GEOMETRYN, 0)

        def ST_GEOMETRYTYPE(self):
            return self.getToken(MySqlParser.ST_GEOMETRYTYPE, 0)

        def ST_GEOMFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMFROMTEXT, 0)

        def ST_GEOMFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMFROMWKB, 0)

        def ST_INTERIORRINGN(self):
            return self.getToken(MySqlParser.ST_INTERIORRINGN, 0)

        def ST_INTERSECTION(self):
            return self.getToken(MySqlParser.ST_INTERSECTION, 0)

        def ST_INTERSECTS(self):
            return self.getToken(MySqlParser.ST_INTERSECTS, 0)

        def ST_ISCLOSED(self):
            return self.getToken(MySqlParser.ST_ISCLOSED, 0)

        def ST_ISEMPTY(self):
            return self.getToken(MySqlParser.ST_ISEMPTY, 0)

        def ST_ISSIMPLE(self):
            return self.getToken(MySqlParser.ST_ISSIMPLE, 0)

        def ST_LINEFROMTEXT(self):
            return self.getToken(MySqlParser.ST_LINEFROMTEXT, 0)

        def ST_LINEFROMWKB(self):
            return self.getToken(MySqlParser.ST_LINEFROMWKB, 0)

        def ST_LINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0)

        def ST_LINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0)

        def ST_NUMGEOMETRIES(self):
            return self.getToken(MySqlParser.ST_NUMGEOMETRIES, 0)

        def ST_NUMINTERIORRING(self):
            return self.getToken(MySqlParser.ST_NUMINTERIORRING, 0)

        def ST_NUMINTERIORRINGS(self):
            return self.getToken(MySqlParser.ST_NUMINTERIORRINGS, 0)

        def ST_NUMPOINTS(self):
            return self.getToken(MySqlParser.ST_NUMPOINTS, 0)

        def ST_OVERLAPS(self):
            return self.getToken(MySqlParser.ST_OVERLAPS, 0)

        def ST_POINTFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POINTFROMTEXT, 0)

        def ST_POINTFROMWKB(self):
            return self.getToken(MySqlParser.ST_POINTFROMWKB, 0)

        def ST_POINTN(self):
            return self.getToken(MySqlParser.ST_POINTN, 0)

        def ST_POLYFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POLYFROMTEXT, 0)

        def ST_POLYFROMWKB(self):
            return self.getToken(MySqlParser.ST_POLYFROMWKB, 0)

        def ST_POLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POLYGONFROMTEXT, 0)

        def ST_POLYGONFROMWKB(self):
            return self.getToken(MySqlParser.ST_POLYGONFROMWKB, 0)

        def ST_SRID(self):
            return self.getToken(MySqlParser.ST_SRID, 0)

        def ST_STARTPOINT(self):
            return self.getToken(MySqlParser.ST_STARTPOINT, 0)

        def ST_SYMDIFFERENCE(self):
            return self.getToken(MySqlParser.ST_SYMDIFFERENCE, 0)

        def ST_TOUCHES(self):
            return self.getToken(MySqlParser.ST_TOUCHES, 0)

        def ST_UNION(self):
            return self.getToken(MySqlParser.ST_UNION, 0)

        def ST_WITHIN(self):
            return self.getToken(MySqlParser.ST_WITHIN, 0)

        def ST_X(self):
            return self.getToken(MySqlParser.ST_X, 0)

        def ST_Y(self):
            return self.getToken(MySqlParser.ST_Y, 0)

        def SUBDATE(self):
            return self.getToken(MySqlParser.SUBDATE, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(MySqlParser.SUBSTRING_INDEX, 0)

        def SUBTIME(self):
            return self.getToken(MySqlParser.SUBTIME, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySqlParser.SYSTEM_USER, 0)

        def TAN(self):
            return self.getToken(MySqlParser.TAN, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(MySqlParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(MySqlParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(MySqlParser.TIMESTAMPDIFF, 0)

        def TIME_FORMAT(self):
            return self.getToken(MySqlParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(MySqlParser.TIME_TO_SEC, 0)

        def TOUCHES(self):
            return self.getToken(MySqlParser.TOUCHES, 0)

        def TO_BASE64(self):
            return self.getToken(MySqlParser.TO_BASE64, 0)

        def TO_DAYS(self):
            return self.getToken(MySqlParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(MySqlParser.TO_SECONDS, 0)

        def UCASE(self):
            return self.getToken(MySqlParser.UCASE, 0)

        def UNCOMPRESS(self):
            return self.getToken(MySqlParser.UNCOMPRESS, 0)

        def UNCOMPRESSED_LENGTH(self):
            return self.getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0)

        def UNHEX(self):
            return self.getToken(MySqlParser.UNHEX, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(MySqlParser.UNIX_TIMESTAMP, 0)

        def UPDATEXML(self):
            return self.getToken(MySqlParser.UPDATEXML, 0)

        def UPPER(self):
            return self.getToken(MySqlParser.UPPER, 0)

        def UUID(self):
            return self.getToken(MySqlParser.UUID, 0)

        def UUID_SHORT(self):
            return self.getToken(MySqlParser.UUID_SHORT, 0)

        def VALIDATE_PASSWORD_STRENGTH(self):
            return self.getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0)

        def VERSION(self):
            return self.getToken(MySqlParser.VERSION, 0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)

        def WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)

        def WEEK(self):
            return self.getToken(MySqlParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(MySqlParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(MySqlParser.WEEKOFYEAR, 0)

        def WEIGHT_STRING(self):
            return self.getToken(MySqlParser.WEIGHT_STRING, 0)

        def WITHIN(self):
            return self.getToken(MySqlParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(MySqlParser.YEARWEEK, 0)

        def Y_FUNCTION(self):
            return self.getToken(MySqlParser.Y_FUNCTION, 0)

        def X_FUNCTION(self):
            return self.getToken(MySqlParser.X_FUNCTION, 0)

        def JSON_ARRAY(self):
            return self.getToken(MySqlParser.JSON_ARRAY, 0)

        def JSON_OBJECT(self):
            return self.getToken(MySqlParser.JSON_OBJECT, 0)

        def JSON_QUOTE(self):
            return self.getToken(MySqlParser.JSON_QUOTE, 0)

        def JSON_CONTAINS(self):
            return self.getToken(MySqlParser.JSON_CONTAINS, 0)

        def JSON_CONTAINS_PATH(self):
            return self.getToken(MySqlParser.JSON_CONTAINS_PATH, 0)

        def JSON_EXTRACT(self):
            return self.getToken(MySqlParser.JSON_EXTRACT, 0)

        def JSON_KEYS(self):
            return self.getToken(MySqlParser.JSON_KEYS, 0)

        def JSON_OVERLAPS(self):
            return self.getToken(MySqlParser.JSON_OVERLAPS, 0)

        def JSON_SEARCH(self):
            return self.getToken(MySqlParser.JSON_SEARCH, 0)

        def JSON_VALUE(self):
            return self.getToken(MySqlParser.JSON_VALUE, 0)

        def JSON_ARRAY_APPEND(self):
            return self.getToken(MySqlParser.JSON_ARRAY_APPEND, 0)

        def JSON_ARRAY_INSERT(self):
            return self.getToken(MySqlParser.JSON_ARRAY_INSERT, 0)

        def JSON_INSERT(self):
            return self.getToken(MySqlParser.JSON_INSERT, 0)

        def JSON_MERGE(self):
            return self.getToken(MySqlParser.JSON_MERGE, 0)

        def JSON_MERGE_PATCH(self):
            return self.getToken(MySqlParser.JSON_MERGE_PATCH, 0)

        def JSON_MERGE_PRESERVE(self):
            return self.getToken(MySqlParser.JSON_MERGE_PRESERVE, 0)

        def JSON_REMOVE(self):
            return self.getToken(MySqlParser.JSON_REMOVE, 0)

        def JSON_REPLACE(self):
            return self.getToken(MySqlParser.JSON_REPLACE, 0)

        def JSON_SET(self):
            return self.getToken(MySqlParser.JSON_SET, 0)

        def JSON_UNQUOTE(self):
            return self.getToken(MySqlParser.JSON_UNQUOTE, 0)

        def JSON_DEPTH(self):
            return self.getToken(MySqlParser.JSON_DEPTH, 0)

        def JSON_LENGTH(self):
            return self.getToken(MySqlParser.JSON_LENGTH, 0)

        def JSON_TYPE(self):
            return self.getToken(MySqlParser.JSON_TYPE, 0)

        def JSON_VALID(self):
            return self.getToken(MySqlParser.JSON_VALID, 0)

        def JSON_TABLE(self):
            return self.getToken(MySqlParser.JSON_TABLE, 0)

        def JSON_SCHEMA_VALID(self):
            return self.getToken(MySqlParser.JSON_SCHEMA_VALID, 0)

        def JSON_SCHEMA_VALIDATION_REPORT(self):
            return self.getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0)

        def JSON_PRETTY(self):
            return self.getToken(MySqlParser.JSON_PRETTY, 0)

        def JSON_STORAGE_FREE(self):
            return self.getToken(MySqlParser.JSON_STORAGE_FREE, 0)

        def JSON_STORAGE_SIZE(self):
            return self.getToken(MySqlParser.JSON_STORAGE_SIZE, 0)

        def JSON_ARRAYAGG(self):
            return self.getToken(MySqlParser.JSON_ARRAYAGG, 0)

        def JSON_OBJECTAGG(self):
            return self.getToken(MySqlParser.JSON_OBJECTAGG, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_functionNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionNameBase" ):
                listener.enterFunctionNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionNameBase" ):
                listener.exitFunctionNameBase(self)




    def functionNameBase(self):

        localctx = MySqlParser.FunctionNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_functionNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6565
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (MySqlParser.LEFT - 90)) | (1 << (MySqlParser.RIGHT - 90)) | (1 << (MySqlParser.SCHEMA - 90)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (MySqlParser.DATE - 202)) | (1 << (MySqlParser.TIME - 202)) | (1 << (MySqlParser.TIMESTAMP - 202)) | (1 << (MySqlParser.YEAR - 202)) | (1 << (MySqlParser.JSON_ARRAY - 202)) | (1 << (MySqlParser.JSON_OBJECT - 202)) | (1 << (MySqlParser.JSON_QUOTE - 202)) | (1 << (MySqlParser.JSON_CONTAINS - 202)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 202)) | (1 << (MySqlParser.JSON_EXTRACT - 202)) | (1 << (MySqlParser.JSON_KEYS - 202)) | (1 << (MySqlParser.JSON_OVERLAPS - 202)) | (1 << (MySqlParser.JSON_SEARCH - 202)) | (1 << (MySqlParser.JSON_VALUE - 202)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 202)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 202)) | (1 << (MySqlParser.JSON_INSERT - 202)) | (1 << (MySqlParser.JSON_MERGE - 202)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 202)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 202)) | (1 << (MySqlParser.JSON_REMOVE - 202)) | (1 << (MySqlParser.JSON_REPLACE - 202)) | (1 << (MySqlParser.JSON_SET - 202)) | (1 << (MySqlParser.JSON_UNQUOTE - 202)) | (1 << (MySqlParser.JSON_DEPTH - 202)) | (1 << (MySqlParser.JSON_LENGTH - 202)) | (1 << (MySqlParser.JSON_TYPE - 202)) | (1 << (MySqlParser.JSON_VALID - 202)) | (1 << (MySqlParser.JSON_TABLE - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 202)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 202)) | (1 << (MySqlParser.JSON_PRETTY - 202)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 202)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 266)) | (1 << (MySqlParser.JSON_OBJECTAGG - 266)) | (1 << (MySqlParser.COUNT - 266)) | (1 << (MySqlParser.POSITION - 266)))) != 0) or _la==MySqlParser.INVISIBLE or ((((_la - 619)) & ~0x3f) == 0 and ((1 << (_la - 619)) & ((1 << (MySqlParser.VISIBLE - 619)) | (1 << (MySqlParser.QUARTER - 619)) | (1 << (MySqlParser.MONTH - 619)) | (1 << (MySqlParser.DAY - 619)) | (1 << (MySqlParser.HOUR - 619)) | (1 << (MySqlParser.MINUTE - 619)) | (1 << (MySqlParser.WEEK - 619)) | (1 << (MySqlParser.SECOND - 619)) | (1 << (MySqlParser.MICROSECOND - 619)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 619)))) != 0) or ((((_la - 738)) & ~0x3f) == 0 and ((1 << (_la - 738)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 738)) | (1 << (MySqlParser.LINESTRING - 738)) | (1 << (MySqlParser.MULTILINESTRING - 738)) | (1 << (MySqlParser.MULTIPOINT - 738)) | (1 << (MySqlParser.MULTIPOLYGON - 738)) | (1 << (MySqlParser.POINT - 738)) | (1 << (MySqlParser.POLYGON - 738)) | (1 << (MySqlParser.ABS - 738)) | (1 << (MySqlParser.ACOS - 738)) | (1 << (MySqlParser.ADDDATE - 738)) | (1 << (MySqlParser.ADDTIME - 738)) | (1 << (MySqlParser.AES_DECRYPT - 738)) | (1 << (MySqlParser.AES_ENCRYPT - 738)) | (1 << (MySqlParser.AREA - 738)) | (1 << (MySqlParser.ASBINARY - 738)) | (1 << (MySqlParser.ASIN - 738)) | (1 << (MySqlParser.ASTEXT - 738)) | (1 << (MySqlParser.ASWKB - 738)) | (1 << (MySqlParser.ASWKT - 738)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 738)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 738)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 738)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 738)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 738)) | (1 << (MySqlParser.ATAN - 738)) | (1 << (MySqlParser.ATAN2 - 738)) | (1 << (MySqlParser.BENCHMARK - 738)) | (1 << (MySqlParser.BIN - 738)) | (1 << (MySqlParser.BIT_COUNT - 738)) | (1 << (MySqlParser.BIT_LENGTH - 738)) | (1 << (MySqlParser.BUFFER - 738)) | (1 << (MySqlParser.CEIL - 738)) | (1 << (MySqlParser.CEILING - 738)) | (1 << (MySqlParser.CENTROID - 738)) | (1 << (MySqlParser.CHARACTER_LENGTH - 738)) | (1 << (MySqlParser.CHARSET - 738)) | (1 << (MySqlParser.CHAR_LENGTH - 738)) | (1 << (MySqlParser.COERCIBILITY - 738)) | (1 << (MySqlParser.COLLATION - 738)) | (1 << (MySqlParser.COMPRESS - 738)) | (1 << (MySqlParser.CONCAT - 738)) | (1 << (MySqlParser.CONCAT_WS - 738)) | (1 << (MySqlParser.CONNECTION_ID - 738)) | (1 << (MySqlParser.CONV - 738)) | (1 << (MySqlParser.CONVERT_TZ - 738)) | (1 << (MySqlParser.COS - 738)) | (1 << (MySqlParser.COT - 738)) | (1 << (MySqlParser.CRC32 - 738)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 738)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 738)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 738)) | (1 << (MySqlParser.CREATE_DIGEST - 738)) | (1 << (MySqlParser.CROSSES - 738)) | (1 << (MySqlParser.DATEDIFF - 738)) | (1 << (MySqlParser.DATE_FORMAT - 738)) | (1 << (MySqlParser.DAYNAME - 738)) | (1 << (MySqlParser.DAYOFMONTH - 738)) | (1 << (MySqlParser.DAYOFWEEK - 738)) | (1 << (MySqlParser.DAYOFYEAR - 738)) | (1 << (MySqlParser.DECODE - 738)) | (1 << (MySqlParser.DEGREES - 738)))) != 0) or ((((_la - 802)) & ~0x3f) == 0 and ((1 << (_la - 802)) & ((1 << (MySqlParser.DES_DECRYPT - 802)) | (1 << (MySqlParser.DES_ENCRYPT - 802)) | (1 << (MySqlParser.DIMENSION - 802)) | (1 << (MySqlParser.DISJOINT - 802)) | (1 << (MySqlParser.ELT - 802)) | (1 << (MySqlParser.ENCODE - 802)) | (1 << (MySqlParser.ENCRYPT - 802)) | (1 << (MySqlParser.ENDPOINT - 802)) | (1 << (MySqlParser.ENVELOPE - 802)) | (1 << (MySqlParser.EQUALS - 802)) | (1 << (MySqlParser.EXP - 802)) | (1 << (MySqlParser.EXPORT_SET - 802)) | (1 << (MySqlParser.EXTERIORRING - 802)) | (1 << (MySqlParser.EXTRACTVALUE - 802)) | (1 << (MySqlParser.FIELD - 802)) | (1 << (MySqlParser.FIND_IN_SET - 802)) | (1 << (MySqlParser.FLOOR - 802)) | (1 << (MySqlParser.FORMAT - 802)) | (1 << (MySqlParser.FOUND_ROWS - 802)) | (1 << (MySqlParser.FROM_BASE64 - 802)) | (1 << (MySqlParser.FROM_DAYS - 802)) | (1 << (MySqlParser.FROM_UNIXTIME - 802)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 802)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 802)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 802)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 802)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 802)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 802)) | (1 << (MySqlParser.GEOMETRYN - 802)) | (1 << (MySqlParser.GEOMETRYTYPE - 802)) | (1 << (MySqlParser.GEOMFROMTEXT - 802)) | (1 << (MySqlParser.GEOMFROMWKB - 802)) | (1 << (MySqlParser.GET_FORMAT - 802)) | (1 << (MySqlParser.GET_LOCK - 802)) | (1 << (MySqlParser.GLENGTH - 802)) | (1 << (MySqlParser.GREATEST - 802)) | (1 << (MySqlParser.GTID_SUBSET - 802)) | (1 << (MySqlParser.GTID_SUBTRACT - 802)) | (1 << (MySqlParser.HEX - 802)) | (1 << (MySqlParser.IFNULL - 802)) | (1 << (MySqlParser.INET6_ATON - 802)) | (1 << (MySqlParser.INET6_NTOA - 802)) | (1 << (MySqlParser.INET_ATON - 802)) | (1 << (MySqlParser.INET_NTOA - 802)) | (1 << (MySqlParser.INSTR - 802)) | (1 << (MySqlParser.INTERIORRINGN - 802)) | (1 << (MySqlParser.INTERSECTS - 802)) | (1 << (MySqlParser.ISCLOSED - 802)) | (1 << (MySqlParser.ISEMPTY - 802)) | (1 << (MySqlParser.ISNULL - 802)) | (1 << (MySqlParser.ISSIMPLE - 802)) | (1 << (MySqlParser.IS_FREE_LOCK - 802)) | (1 << (MySqlParser.IS_IPV4 - 802)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 802)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 802)) | (1 << (MySqlParser.IS_IPV6 - 802)) | (1 << (MySqlParser.IS_USED_LOCK - 802)) | (1 << (MySqlParser.LAST_INSERT_ID - 802)) | (1 << (MySqlParser.LCASE - 802)) | (1 << (MySqlParser.LEAST - 802)) | (1 << (MySqlParser.LENGTH - 802)) | (1 << (MySqlParser.LINEFROMTEXT - 802)) | (1 << (MySqlParser.LINEFROMWKB - 802)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 802)))) != 0) or ((((_la - 866)) & ~0x3f) == 0 and ((1 << (_la - 866)) & ((1 << (MySqlParser.LINESTRINGFROMWKB - 866)) | (1 << (MySqlParser.LN - 866)) | (1 << (MySqlParser.LOAD_FILE - 866)) | (1 << (MySqlParser.LOCATE - 866)) | (1 << (MySqlParser.LOG - 866)) | (1 << (MySqlParser.LOG10 - 866)) | (1 << (MySqlParser.LOG2 - 866)) | (1 << (MySqlParser.LOWER - 866)) | (1 << (MySqlParser.LPAD - 866)) | (1 << (MySqlParser.LTRIM - 866)) | (1 << (MySqlParser.MAKEDATE - 866)) | (1 << (MySqlParser.MAKETIME - 866)) | (1 << (MySqlParser.MAKE_SET - 866)) | (1 << (MySqlParser.MASTER_POS_WAIT - 866)) | (1 << (MySqlParser.MBRCONTAINS - 866)) | (1 << (MySqlParser.MBRDISJOINT - 866)) | (1 << (MySqlParser.MBREQUAL - 866)) | (1 << (MySqlParser.MBRINTERSECTS - 866)) | (1 << (MySqlParser.MBROVERLAPS - 866)) | (1 << (MySqlParser.MBRTOUCHES - 866)) | (1 << (MySqlParser.MBRWITHIN - 866)) | (1 << (MySqlParser.MD5 - 866)) | (1 << (MySqlParser.MLINEFROMTEXT - 866)) | (1 << (MySqlParser.MLINEFROMWKB - 866)) | (1 << (MySqlParser.MONTHNAME - 866)) | (1 << (MySqlParser.MPOINTFROMTEXT - 866)) | (1 << (MySqlParser.MPOINTFROMWKB - 866)) | (1 << (MySqlParser.MPOLYFROMTEXT - 866)) | (1 << (MySqlParser.MPOLYFROMWKB - 866)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 866)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 866)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 866)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 866)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 866)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 866)) | (1 << (MySqlParser.NAME_CONST - 866)) | (1 << (MySqlParser.NULLIF - 866)) | (1 << (MySqlParser.NUMGEOMETRIES - 866)) | (1 << (MySqlParser.NUMINTERIORRINGS - 866)) | (1 << (MySqlParser.NUMPOINTS - 866)) | (1 << (MySqlParser.OCT - 866)) | (1 << (MySqlParser.OCTET_LENGTH - 866)) | (1 << (MySqlParser.ORD - 866)) | (1 << (MySqlParser.OVERLAPS - 866)) | (1 << (MySqlParser.PERIOD_ADD - 866)) | (1 << (MySqlParser.PERIOD_DIFF - 866)) | (1 << (MySqlParser.PI - 866)) | (1 << (MySqlParser.POINTFROMTEXT - 866)) | (1 << (MySqlParser.POINTFROMWKB - 866)) | (1 << (MySqlParser.POINTN - 866)) | (1 << (MySqlParser.POLYFROMTEXT - 866)) | (1 << (MySqlParser.POLYFROMWKB - 866)) | (1 << (MySqlParser.POLYGONFROMTEXT - 866)) | (1 << (MySqlParser.POLYGONFROMWKB - 866)) | (1 << (MySqlParser.POW - 866)) | (1 << (MySqlParser.POWER - 866)) | (1 << (MySqlParser.QUOTE - 866)) | (1 << (MySqlParser.RADIANS - 866)) | (1 << (MySqlParser.RAND - 866)) | (1 << (MySqlParser.RANDOM_BYTES - 866)) | (1 << (MySqlParser.RELEASE_LOCK - 866)) | (1 << (MySqlParser.REVERSE - 866)) | (1 << (MySqlParser.ROUND - 866)) | (1 << (MySqlParser.ROW_COUNT - 866)))) != 0) or ((((_la - 930)) & ~0x3f) == 0 and ((1 << (_la - 930)) & ((1 << (MySqlParser.RPAD - 930)) | (1 << (MySqlParser.RTRIM - 930)) | (1 << (MySqlParser.SEC_TO_TIME - 930)) | (1 << (MySqlParser.SESSION_USER - 930)) | (1 << (MySqlParser.SHA - 930)) | (1 << (MySqlParser.SHA1 - 930)) | (1 << (MySqlParser.SHA2 - 930)) | (1 << (MySqlParser.SIGN - 930)) | (1 << (MySqlParser.SIN - 930)) | (1 << (MySqlParser.SLEEP - 930)) | (1 << (MySqlParser.SOUNDEX - 930)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 930)) | (1 << (MySqlParser.SQRT - 930)) | (1 << (MySqlParser.SRID - 930)) | (1 << (MySqlParser.STARTPOINT - 930)) | (1 << (MySqlParser.STRCMP - 930)) | (1 << (MySqlParser.STR_TO_DATE - 930)) | (1 << (MySqlParser.ST_AREA - 930)) | (1 << (MySqlParser.ST_ASBINARY - 930)) | (1 << (MySqlParser.ST_ASTEXT - 930)) | (1 << (MySqlParser.ST_ASWKB - 930)) | (1 << (MySqlParser.ST_ASWKT - 930)) | (1 << (MySqlParser.ST_BUFFER - 930)) | (1 << (MySqlParser.ST_CENTROID - 930)) | (1 << (MySqlParser.ST_CONTAINS - 930)) | (1 << (MySqlParser.ST_CROSSES - 930)) | (1 << (MySqlParser.ST_DIFFERENCE - 930)) | (1 << (MySqlParser.ST_DIMENSION - 930)) | (1 << (MySqlParser.ST_DISJOINT - 930)) | (1 << (MySqlParser.ST_DISTANCE - 930)) | (1 << (MySqlParser.ST_ENDPOINT - 930)) | (1 << (MySqlParser.ST_ENVELOPE - 930)) | (1 << (MySqlParser.ST_EQUALS - 930)) | (1 << (MySqlParser.ST_EXTERIORRING - 930)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 930)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 930)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 930)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 930)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 930)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 930)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 930)) | (1 << (MySqlParser.ST_GEOMETRYN - 930)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 930)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 930)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 930)) | (1 << (MySqlParser.ST_INTERIORRINGN - 930)) | (1 << (MySqlParser.ST_INTERSECTION - 930)) | (1 << (MySqlParser.ST_INTERSECTS - 930)) | (1 << (MySqlParser.ST_ISCLOSED - 930)) | (1 << (MySqlParser.ST_ISEMPTY - 930)) | (1 << (MySqlParser.ST_ISSIMPLE - 930)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 930)) | (1 << (MySqlParser.ST_LINEFROMWKB - 930)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 930)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 930)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 930)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 930)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 930)) | (1 << (MySqlParser.ST_NUMPOINTS - 930)) | (1 << (MySqlParser.ST_OVERLAPS - 930)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 930)) | (1 << (MySqlParser.ST_POINTFROMWKB - 930)) | (1 << (MySqlParser.ST_POINTN - 930)))) != 0) or ((((_la - 994)) & ~0x3f) == 0 and ((1 << (_la - 994)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 994)) | (1 << (MySqlParser.ST_POLYFROMWKB - 994)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 994)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 994)) | (1 << (MySqlParser.ST_SRID - 994)) | (1 << (MySqlParser.ST_STARTPOINT - 994)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 994)) | (1 << (MySqlParser.ST_TOUCHES - 994)) | (1 << (MySqlParser.ST_UNION - 994)) | (1 << (MySqlParser.ST_WITHIN - 994)) | (1 << (MySqlParser.ST_X - 994)) | (1 << (MySqlParser.ST_Y - 994)) | (1 << (MySqlParser.SUBDATE - 994)) | (1 << (MySqlParser.SUBSTRING_INDEX - 994)) | (1 << (MySqlParser.SUBTIME - 994)) | (1 << (MySqlParser.SYSTEM_USER - 994)) | (1 << (MySqlParser.TAN - 994)) | (1 << (MySqlParser.TIMEDIFF - 994)) | (1 << (MySqlParser.TIMESTAMPADD - 994)) | (1 << (MySqlParser.TIMESTAMPDIFF - 994)) | (1 << (MySqlParser.TIME_FORMAT - 994)) | (1 << (MySqlParser.TIME_TO_SEC - 994)) | (1 << (MySqlParser.TOUCHES - 994)) | (1 << (MySqlParser.TO_BASE64 - 994)) | (1 << (MySqlParser.TO_DAYS - 994)) | (1 << (MySqlParser.TO_SECONDS - 994)) | (1 << (MySqlParser.UCASE - 994)) | (1 << (MySqlParser.UNCOMPRESS - 994)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 994)) | (1 << (MySqlParser.UNHEX - 994)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 994)) | (1 << (MySqlParser.UPDATEXML - 994)) | (1 << (MySqlParser.UPPER - 994)) | (1 << (MySqlParser.UUID - 994)) | (1 << (MySqlParser.UUID_SHORT - 994)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 994)) | (1 << (MySqlParser.VERSION - 994)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 994)) | (1 << (MySqlParser.WEEKDAY - 994)) | (1 << (MySqlParser.WEEKOFYEAR - 994)) | (1 << (MySqlParser.WEIGHT_STRING - 994)) | (1 << (MySqlParser.WITHIN - 994)) | (1 << (MySqlParser.YEARWEEK - 994)) | (1 << (MySqlParser.Y_FUNCTION - 994)) | (1 << (MySqlParser.X_FUNCTION - 994)) | (1 << (MySqlParser.MOD - 994)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterMarkerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION_(self):
            return self.getToken(MySqlParser.QUESTION_, 0)

        def PERCENT_S_(self):
            return self.getToken(MySqlParser.PERCENT_S_, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_parameterMarker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterMarker" ):
                listener.enterParameterMarker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterMarker" ):
                listener.exitParameterMarker(self)




    def parameterMarker(self):

        localctx = MySqlParser.ParameterMarkerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_parameterMarker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6567
            _la = self._input.LA(1)
            if not(_la==MySqlParser.QUESTION_ or _la==MySqlParser.PERCENT_S_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[303] = self.expression_sempred
        self._predicates[304] = self.predicate_sempred
        self._predicates[305] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 12)
         




